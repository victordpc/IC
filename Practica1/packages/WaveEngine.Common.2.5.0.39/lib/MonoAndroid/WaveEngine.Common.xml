<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WaveEngine.Common</name>
    </assembly>
    <members>
        <member name="T:WaveEngine.Common.Attributes.AssetFilter">
            <summary>
            Asset Filter (Asset, Scene, Prefabs, etc etc..)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetFilter.None">
            <summary>
             No elements
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetFilter.Unknown">
            <summary>
            The unknown assets
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetFilter.Standard">
            <summary>
            The standard assets
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetFilter.Material">
            <summary>
            Materials
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetFilter.Scene">
            <summary>
            The scenes
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetFilter.Prefab">
            <summary>
            The prefabs
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetFilter.All">
            <summary>
            All the assets
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsTimeline">
            <summary>
            Render Property As TextBox input
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsTimeline.StartMember">
            <summary>
            The start range member
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsTimeline.EndMember">
            <summary>
            The end range member
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsTimeline.FramerateMember">
            <summary>
            The frames per second of the control member
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsTimeline.EndFrame">
            <summary>
            The length member
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsTimeline.SnapFrames">
            <summary>
            If the frames of the timeline are snapped (integer)
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsTimeline.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsTimeline" /> class.
            </summary>
            <param name="startMember">The start range member</param>
            <param name="endMember">The end range member</param>
            <param name="frameRate">The fps member</param>
            <param name="endFrame">The length member</param>
            <param name="snapFrames">If the frames are snapped</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.AssetType">
            <summary>
            Asset Type (Model, Material, Texture, etc..)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Unknown">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Model">
            <summary>
            Model asset (ej .fbx ...)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Material">
            <summary>
            Material asset (ej. wmat)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Sound">
            <summary>
            Sound asset (ej. wav)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Texture">
            <summary>
            Texture asset (ej. jpg, png ...)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Cubemap">
            <summary>
            Cubemap asset
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Spritesheet">
            <summary>
            Sprite sheet asset
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Entity">
            <summary>
            The entity
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Font">
            <summary>
            The font
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.AssetType.Prefab">
            <summary>
            The prefab
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.Converters.FloatRadianToDegreeConverter">
            <summary>
            Radian to degree converter class
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.Converters.FloatRadianToDegreeConverter.Convert(System.Object)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The degrees</returns>
        </member>
        <member name="M:WaveEngine.Common.Attributes.Converters.FloatRadianToDegreeConverter.ConvertBack(System.Object)">
            <summary>
            Converts the back.
            </summary>
            <param name="value">The value.</param>
            <returns>The radians</returns>
        </member>
        <member name="T:WaveEngine.Common.Attributes.Converters.IConverter">
            <summary>
            Interface Converter Source - Destination
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.Converters.IConverter.Convert(System.Object)">
            <summary>
            Convert source object to destination object
            </summary>
            <param name="value">source object</param>
            <returns>destination object</returns>
        </member>
        <member name="M:WaveEngine.Common.Attributes.Converters.IConverter.ConvertBack(System.Object)">
            <summary>
            Convert destionation object
            </summary>
            <param name="value">destination object</param>
            <returns>source object</returns>
        </member>
        <member name="T:WaveEngine.Common.Attributes.Converters.Vector3RadianToDegreeConverter">
            <summary>
            Randian to degree converter class
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.Converters.Vector3RadianToDegreeConverter.Convert(System.Object)">
            <summary>
            Convert from radians vector3 to degrees vector3
            </summary>
            <param name="value">the radians</param>
            <returns>the degrees</returns>
        </member>
        <member name="M:WaveEngine.Common.Attributes.Converters.Vector3RadianToDegreeConverter.ConvertBack(System.Object)">
            <summary>
            Convert from degrees vector3 to radians vector3
            </summary>
            <param name="value">the degrees</param>
            <returns>the radians</returns>
        </member>
        <member name="T:WaveEngine.Common.Attributes.DontRenderProperty">
            <summary>
            Don't Render Property attribute
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RefreshEntityRequired">
            <summary>
            Refresh entity required components attribute
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RefreshEntityRequired.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RefreshEntityRequired" /> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsList">
            <summary>
            Render Property As List Attribute
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsList.IsItemEditable">
            <summary>
            Gets or sets a value indicating whether this list item  is editable.
            </summary>
            <value><c>true</c> if editable; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsList.UseNameKey">
            <summary>
            Value indicating whether the list has a key index
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsList.IsReorderable">
            <summary>
            Gets or sets a value indicating whether the list is reorderable.
            </summary>
            <value><c>true</c> if editable; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsList.ItemsToSelect">
            <summary>
            Gets the available items to insert
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsList.AddItemAction">
            <summary>
            Optional method called (after) when a new item is added
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsList.RemoveItemAction">
            <summary>
            Optional method called (after) when a new item is removed
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsList.UpdateItemAction">
            <summary>
            Optional method called (after) when the a item property has been changed
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsList.SelectionChangedItemAction">
            <summary>
            Optional method called (after) when the selected item is changed
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsList.ShowOrder">
            <summary>
            If the order of the elements must be visible
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsList.Legend">
            <summary>
            The legend of the widget
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsList.CanDeleteItem">
            <summary>
            The property name of the item telling whether the item can be deleted or not.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsList.SelectItemTitle">
            <summary>
            The text that will show in the select item title (Only in case there are items to select)
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsList.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsList"/> class.
            </summary>
            <param name="isItemEditable">If the items must be editable</param>
            <param name="isReorderable">If the list is reorderable</param>
            <param name="useNameKey">If the list use a key</param>
            <param name="showOrder">If the list must show the element index</param>
            <param name="legend"> The text to be presented in the legend area</param>
            <param name="selectItemTitle">The text showing in the item selector</param>
            <param name="itemsToSelect">Method name of the items to select</param>
            <param name="canDeleteItem">Method name of every item, telling whether it can be deleted</param>
            <param name="onAddedItemAction">Optional method called (after) when a new item is added</param>
            <param name="onRemovedItemAction">Optional method called (after) when a new item is removed</param>
            <param name="onUpdateItemAction">Optional method called (after) when the a item property has been changed</param>
            <param name="onSelectionChangedItemAction">Optional method called (after) when the selected item is changed</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsTextBox">
            <summary>
            Render Property As TextBox input
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsTextBox" /> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsObject">
            <summary>
            Shows the property a sub-property panel with its elements.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsBitwise">
            <summary>
            Render Property as Bits attribute
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsBitwise.NBits">
            <summary>
            The number of bits
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsBitwise.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsBitwise" /> class.
            </summary>
            <param name="nBits">The number of bits</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsBitwise.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsBitwise" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="nBits">The number of bits</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsProfileList">
            <summary>
            RenderProperty as Profile List (Used in Project Settings)
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsProfileList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsProfileList"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsTypeSelector">
            <summary>
            Property attribute for the type selector
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsTypeSelector.Filter">
            <summary>
            The filter class
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsTypeSelector.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsTypeSelector"/> class.
            </summary>
            <param name="filter">The class filter</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input">
            <summary>
            Render Property As Float Input attribute
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.MinX">
            <summary>
            Minimun X
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.MinY">
            <summary>
            Minimum Y
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.MaxX">
            <summary>
            Maximum X
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.MaxY">
            <summary>
            Maximum Y
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
            <param name="minX">Minimum X</param>
            <param name="minY">Minimum Y</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
            <param name="minX">Minimum X</param>
            <param name="minY">Minimum Y</param>
            <param name="maxX">Maximum X</param>
            <param name="maxY">Maximum Y</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.#ctor(System.Type,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="minX">Minimum X</param>
            <param name="minY">Minimum Y</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input.#ctor(System.Type,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsVector2Input" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="minX">Minimum X</param>
            <param name="minY">Minimum Y</param>
            <param name="maxX">Maximum X</param>
            <param name="maxY">Maximum Y</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.WaveAssemblyUsage">
            <summary>
            The wave assembly usage type
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.WaveAssemblyUsage.Core">
            <summary>
            Wave core assembly
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.WaveAssemblyUsage.Extension">
            <summary>
            Extension assembly
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.WaveAssemblyUsage.UserProject">
            <summary>
            Assembly from an user project
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.WaveEngineAssembly">
            <summary>
            Mark an assembly as a WaveEngine game assembly
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Attributes.WaveEngineAssembly.Type">
            <summary>
            Gets the assembly type
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.WaveEngineAssembly.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.WaveEngineAssembly"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.WaveEngineAssembly.#ctor(WaveEngine.Common.Attributes.WaveAssemblyUsage)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.WaveEngineAssembly"/> class.
            </summary>
            <param name="type">The assembly</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPosition">
            <summary>
            The render position
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPosition.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPosition.Start">
            <summary>
            The start
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPosition.End">
            <summary>
            The ends
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderProperty">
            <summary>
            Render property attribute
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderProperty.ConverterType">
            <summary>
            Converter instance
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderProperty.RenderPosition">
            <summary>
            The render position
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderProperty.Tag">
            <summary>
            The tag
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderProperty.AttatchToTag">
            <summary>
            The attatch to tag
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderProperty.Mask">
            <summary>
            The mask
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderProperty.AttachToValue">
            <summary>
            The attach to object
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderProperty.Tooltip">
            <summary>
            Information about the property when pointer is over of it.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderProperty.CustomPropertyName">
            <summary>
            Custom property name
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderProperty.ShowConditionFunction">
            <summary>
            The property is shown if the condition is true
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderProperty" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderProperty.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderProperty" /> class.
            </summary>
            <param name="converterType">the converter type</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsAsset">
            <summary>
            Render Property As Asset Attribute
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsAsset.Type">
            <summary>
            Asset Type
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsAsset.ExtensionFilter">
            <summary>
            Extension filter
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsAsset.OutputIndex">
            <summary>
            The output index
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsAsset.#ctor(WaveEngine.Common.Attributes.AssetType,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the  <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsAsset" /> class.
            </summary>
            <param name="type">Asset type (Model, Material, Texture)</param>
            <param name="extensionFilter">Extension Filter (Ej: .mp3|.mp4)</param>
            <param name="outputIndex">The output index</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsAnimationList">
            <summary>
            Render Property as Animation List attribute
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsAnimationList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsAnimationList"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsEntity">
            <summary>
            Render Property As Entity Attribute
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsEntity.ComponentsFilter">
            <summary>
            The components filter
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsEntity.FromPrefab">
            <summary>
            If the property uses a prefab instead of a scene entity
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsEntity" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsEntity.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsEntity" /> class.
            </summary>
            <param name="componentsFilter">The components filter.</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsFInput">
            <summary>
            Render Property As Float Input attribute
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsFInput.MinLimit">
            <summary>
            Minimun value
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsFInput.MaxLimit">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsFInput.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsFInput.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
            <param name="minLimit">Minimum value (Default float.MinValue)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsFInput.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
            <param name="minLimit">Minimum value (Default float.MinValue)</param>
            <param name="maxLimit">Maximum value (Default float.MaxValue)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsFInput.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsFInput.#ctor(System.Type,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="minLimit">Minimum value (Default float.MinValue)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsFInput.#ctor(System.Type,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsFInput" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="minLimit">Minimum value (Default float.MinValue)</param>
            <param name="maxLimit">Maximum value (Default float.MaxValue)</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsSelector">
            <summary>
            Render Property as Selector
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsSelector.CollectionSource">
            <summary>
            The collection
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSelector.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSelector" /> class.
            </summary>
            <param name="collectionSource">The collection source.</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsSquare">
            <summary>
            Render Property As Square
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsSquare.MinLimit">
            <summary>
            Minimun value
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsSquare.MaxLimit">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Attributes.RenderPropertyAsSquare.Values">
            <summary>
            Gets the values.
            </summary>
            <value>
            The values.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSquare.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSquare" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSquare.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSquare" /> class.
            </summary>
            <param name="minLimit">Minimum value (Default 16)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSquare.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSquare" /> class.
            </summary>
            <param name="minLimit">Minimum value (Default 16)</param>
            <param name="maxLimit">Maximum value (Default 2048)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSquare.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSquare" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSquare.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSquare" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="minLimit">Minimum value (Default 16)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSquare.#ctor(System.Type,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSquare" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="minLimit">Minimum value (Default 16)</param>
            <param name="maxLimit">Maximum value (Default 2048)</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsInput">
            <summary>
            Render Property As Input
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsInput.MinLimit">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsInput.MaxLimit">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsInput.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsInput.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
            <param name="minLimit">Minimum value (Default int.MinValue)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsInput.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
            <param name="minLimit">Minimum value (Default int.MinValue)</param>
            <param name="maxLimit">Maximum value (Default int.MaxValue)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsInput.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsInput.#ctor(System.Type,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="minLimit">Minimum value (Default int.MinValue)</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsInput.#ctor(System.Type,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsInput" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="minLimit">Minimum value (Default int.MinValue)</param>
            <param name="maxLimit">Maximum value (Default int.MaxValue)</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsLayer">
            <summary>
            Render Property As Layer Attribute
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsLayer.#ctor">
            <summary>
            Initializes a new instance of the  <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsLayer"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsPath">
            <summary>
            Render Property As Path
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsPath.PathType">
            <summary>
            Path type (File, Folder)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsPath.PathType.File">
            <summary>
            File path
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsPath.PathType.Folder">
            <summary>
            Folder path
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsPath.Type">
            <summary>
            Path type
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsPath.#ctor(WaveEngine.Common.Attributes.RenderPropertyAsPath.PathType)">
            <summary>
            Initializes a new instance of the  <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsPath"/> class.
            </summary>
            <param name="type">Path type (File or Folder)</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.RenderPropertyAsSlider">
            <summary>
            Render Property as Slider attribute
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsSlider.Min">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsSlider.Max">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Attributes.RenderPropertyAsSlider.Step">
            <summary>
            the step increment / decrement
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSlider.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSlider" /> class.
            </summary>
            <param name="min">the minimum value</param>
            <param name="max">the maximum value</param>
            <param name="step">the step</param>
        </member>
        <member name="M:WaveEngine.Common.Attributes.RenderPropertyAsSlider.#ctor(System.Type,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Attributes.RenderPropertyAsSlider" /> class.
            </summary>
            <param name="converterType">the data converter type</param>
            <param name="min">the minimum value</param>
            <param name="max">the maximum value</param>
            <param name="step">the step</param>
        </member>
        <member name="T:WaveEngine.Common.Attributes.NameKey">
            <summary>
            Attribute indicating a name key
            </summary>
        </member>
        <member name="T:WaveEngine.Common.ExecutionMode">
            <summary>
            Specifies the execution mode of the application
            </summary>
        </member>
        <member name="F:WaveEngine.Common.ExecutionMode.Standalone">
            <summary>
            This application is running as Standalone one (outside of Visual Editor).
            </summary>
        </member>
        <member name="F:WaveEngine.Common.ExecutionMode.Editor">
            <summary>
            The application is running inside Visual Editor.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.ExecutionMode.EditorSimulation">
            <summary>
            The application is running inside Visual Editor on Simulation mode.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.AdapterType">
            <summary>
            Specifies the type of adapter.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.AdapterType.DirectX">
            <summary>
            Uses DirectX.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.AdapterType.OpenGLES">
            <summary>
            User OpenGL ES.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.AdapterType.OpenGL">
            <summary>
            Uses OpenGL.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.BinaryReaderExtensions">
            <summary>
            Extension functions for reading WaveEngine data types with a BinaryReader.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadMatrix(System.IO.BinaryReader)">
            <summary>
            Reads the matrix.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadMatrix(System.IO.BinaryReader,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Reads the matrix.
            </summary>
            <param name="reader">The reader.</param>
            <param name="m">The m.</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadMatrix(System.IO.BinaryReader,System.Byte[],System.Int32,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Reads the matrix.
            </summary>
            <param name="reader">The reader.</param>
            <param name="data">The data.</param>
            <param name="startIndex">The start index.</param>
            <param name="m">The m.</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadPoint(System.IO.BinaryReader)">
            <summary>
            Reads the Point.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadVector2(System.IO.BinaryReader)">
            <summary>
            Reads the vector2.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadVector2(System.IO.BinaryReader,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Reads the quaternion.
            </summary>
            <param name="reader">The reader.</param>
            <param name="v">The output quaternion</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadVector3(System.IO.BinaryReader)">
            <summary>
            Reads the vector3.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadVector3(System.IO.BinaryReader,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Reads the quaternion.
            </summary>
            <param name="reader">The reader.</param>
            <param name="v">The output quaternion</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadVector4(System.IO.BinaryReader)">
            <summary>
            Reads the vector4.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadVector4(System.IO.BinaryReader,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Reads the quaternion.
            </summary>
            <param name="reader">The reader.</param>
            <param name="v">The output quaternion</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadQuaternion(System.IO.BinaryReader)">
            <summary>
            Reads the quaternion.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadQuaternion(System.IO.BinaryReader,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Reads the quaternion.
            </summary>
            <param name="reader">The reader.</param>
            <param name="q">The output quaternion</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadRectangle(System.IO.BinaryReader)">
            <summary>
            Reads the rectangle.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadRectangleF(System.IO.BinaryReader)">
            <summary>
            Reads the rectangle.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.BinaryReaderExtensions.ReadByte4(System.IO.BinaryReader)">
            <summary>
            Reads the byte4.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:WaveEngine.Common.BinaryWriterExtensions">
            <summary>
            Extension functions for writing WaveEngine data types with a BinaryWriter.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,WaveEngine.Common.Math.Matrix)">
            <summary>
            Writes the matrix.
            </summary>
            <param name="writer">The writer.</param>
            <param name="m">The matrix.</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,WaveEngine.Common.Math.Point)">
            <summary>
            Writes the Point.
            </summary>
            <param name="writer">The writer.</param>
            <param name="v">The vector2.</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,WaveEngine.Common.Math.Vector2)">
            <summary>
            Writes the vector2.
            </summary>
            <param name="writer">The writer.</param>
            <param name="v">The vector2.</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,WaveEngine.Common.Math.Vector3)">
            <summary>
            Writes the vector3.
            </summary>
            <param name="writer">The writer.</param>
            <param name="v">The vector3.</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Writes the vector4.
            </summary>
            <param name="writer">The writer.</param>
            <param name="q">The quaternion.</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,WaveEngine.Common.Math.Vector4)">
            <summary>
            Writes the vector4.
            </summary>
            <param name="writer">The writer.</param>
            <param name="v">The vector4.</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,WaveEngine.Common.Math.Byte4)">
            <summary>
            Writes the byte4.
            </summary>
            <param name="writer">The writer.</param>
            <param name="b">The byte.</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,WaveEngine.Common.Math.Rectangle)">
            <summary>
            Writes the rectangle.
            </summary>
            <param name="writer">The writer.</param>
            <param name="r">The rectangle.</param>
        </member>
        <member name="M:WaveEngine.Common.BinaryWriterExtensions.Write(System.IO.BinaryWriter,WaveEngine.Common.Math.RectangleF)">
            <summary>
            Writes the rectangle.
            </summary>
            <param name="writer">The writer.</param>
            <param name="r">The rectangle.</param>
        </member>
        <member name="T:WaveEngine.Common.Curves.ColorCurve">
            <summary>
            Class that manages a color gradient
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Curves.ColorCurve.Lerp(WaveEngine.Common.Graphics.Color,WaveEngine.Common.Graphics.Color,System.Single)">
            <summary>
            Obtains an interpolated value between 2 curves
            </summary>
            <param name="value1">The value 1</param>
            <param name="value2">The value 2</param>
            <param name="amount">The lerp amount</param>
            <returns>The interpolated value</returns>
        </member>
        <member name="M:WaveEngine.Common.Curves.ColorCurve.CreateKey(System.Single,WaveEngine.Common.Graphics.Color)">
            <summary>
            Cretes a new key element
            </summary>
            <param name="lerp">The lerp</param>
            <param name="value">The value</param>
            <returns>The keyframe</returns>
        </member>
        <member name="T:WaveEngine.Common.Curves.CurveKeyframe`1">
            <summary>
            The curve key class
            </summary>
            <typeparam name="T">The type of the keyframe</typeparam>
        </member>
        <member name="M:WaveEngine.Common.Curves.CurveKeyframe`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Curves.CurveKeyframe`1"/> class
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Curves.CurveKeyframe`1.Lerp">
            <summary>
            The key lerp
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Curves.CurveKeyframe`1.Value">
            <summary>
            The key value
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Curves.FloatCurve">
            <summary>
            The curve class
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Curves.FloatCurve.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Curves.FloatCurve"/> class
            </summary>
            <param name="level">The level</param>
        </member>
        <member name="M:WaveEngine.Common.Curves.FloatCurve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Curves.FloatCurve"/> class
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Curves.FloatCurve.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Obtains an interpolated value between 2 curves
            </summary>
            <param name="value1">The value 1</param>
            <param name="value2">The value 2</param>
            <param name="amount">The lerp amount</param>
            <returns>The interpolated value</returns>
        </member>
        <member name="M:WaveEngine.Common.Curves.FloatCurve.CreateKey(System.Single,System.Single)">
            <summary>
            Cretes a new key element
            </summary>
            <param name="lerp">The lerp</param>
            <param name="value">The value</param>
            <returns>The keyframe</returns>
        </member>
        <member name="T:WaveEngine.Common.Curves.Curve`2">
            <summary>
            The curve class
            </summary>
            <typeparam name="T">The type of the curve</typeparam>
            <typeparam name="K">The type of the keyframe</typeparam>
        </member>
        <member name="F:WaveEngine.Common.Curves.Curve`2.keyframes">
            <summary>
            The keyframes of the curve
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Curves.Curve`2.cachedValues">
            <summary>
            The cached values
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Curves.Curve`2.cacheDirty">
            <summary>
            If the cache is dirty
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Curves.Curve`2.isCached">
            <summary>
            If the
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Curves.Curve`2.cacheSize">
            <summary>
            The cache size
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Curves.Curve`2.minLerp">
            <summary>
            Minimum lerp
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Curves.Curve`2.maxLerp">
            <summary>
            Maximum lerp
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Curves.Curve`2.rangeLerp">
            <summary>
            The lerp range of the curve
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Curves.Curve`2.Keyframes">
            <summary>
            Gets the key frames
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Curves.Curve`2.HasValues">
            <summary>
            Gets a value indicating whether the curve has values
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Curves.Curve`2.DefaultValues">
            <summary>
            Sets the default values
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Curves.Curve`2.IsCached">
            <summary>
            Gets or sets a value indicating whether the curve is cached or not.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Curves.Curve`2.CacheSize">
            <summary>
            Gets or sets the cache size
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Curves.Curve`2.AddKey(System.Single,`0)">
            <summary>
            Adds a key to the curve
            </summary>
            <param name="lerp">The lerp</param>
            <param name="value">The key value</param>
        </member>
        <member name="M:WaveEngine.Common.Curves.Curve`2.RemoveKey(`1)">
            <summary>
            Removes a key
            </summary>
            <param name="key">The key</param>
        </member>
        <member name="M:WaveEngine.Common.Curves.Curve`2.GetValue(System.Single)">
            <summary>
            Gets the value of the curve in a specific lerp.
            </summary>
            <param name="lerp">The lerp</param>
            <returns>The value</returns>
        </member>
        <member name="M:WaveEngine.Common.Curves.Curve`2.GetCurveValue(System.Single)">
            <summary>
            Calculates the curve value in a specific lerp
            </summary>
            <param name="lerp">The lerp</param>
            <returns>The curve value</returns>
        </member>
        <member name="M:WaveEngine.Common.Curves.Curve`2.RefreshCache">
            <summary>
            Refreshes the cache
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Curves.Curve`2.Lerp(`0,`0,System.Single)">
            <summary>
            Obtains an interpolated value between 2 curves
            </summary>
            <param name="value1">The value 1</param>
            <param name="value2">The value 2</param>
            <param name="amount">The lerp amount</param>
            <returns>The interpolated value</returns>
        </member>
        <member name="M:WaveEngine.Common.Curves.Curve`2.CreateKey(System.Single,`0)">
            <summary>
            Cretes a new key element
            </summary>
            <param name="lerp">The lerp</param>
            <param name="value">The value</param>
            <returns>The keyframe</returns>
        </member>
        <member name="T:WaveEngine.Common.Curves.ColorKeyframe">
            <summary>
            Repersents a color keyframe of a curve
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Curves.FloatKeyframe">
            <summary>
            Repersents a float keyframe of a curve
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Features.BaseBattery">
            <summary>
            Base class for cross battery.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Features.BaseBattery.RemainingChargePercent">
            <summary>
            Gets the remaining battery charge percent
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Features.BaseBattery.Status">
            <summary>
            Gets the current battery status
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Features.BaseBattery.PowerSource">
            <summary>
            Gets the current power source
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Features.BaseBattery.BatteryChanged">
            <summary>
            Event that fires when battery status, level or power changes
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Features.BaseBattery.IsBatteryChangedEventSubscribed">
            <summary>
            Whether the BatteryChanged event has subscribers or not
            </summary>
            <returns>Whether the BatteryChanged event has subscribers</returns>
        </member>
        <member name="M:WaveEngine.Common.Features.BaseBattery.OnBatteryChanged(WaveEngine.Common.Features.BatteryChangedEventArgs)">
            <summary>
            Event handler for battery changes
            </summary>
            <param name="e">The arguments</param>
        </member>
        <member name="F:WaveEngine.Common.Features.BaseBattery.disposed">
            <summary>
            Whether the object was already disposed
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Features.BaseBattery.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Common.Features.BaseBattery"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Features.BaseBattery.Dispose">
            <summary>
            Dispose of class and parent classes
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Features.BaseBattery.Dispose(System.Boolean)">
            <summary>
            Dispose the object
            </summary>
            <param name="disposing">Whether to dispose of unmanaged resources</param>
        </member>
        <member name="T:WaveEngine.Common.Features.BaseConnectivity">
            <summary>
            Base class for cross connectivity.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Features.BaseConnectivity.IsConnected">
            <summary>
            Gets a value indicating whether device is connected to a network or not.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Features.BaseConnectivity.OnIsConnectedChanged(WaveEngine.Common.Features.IsConnectedChangedEventArgs)">
            <summary>
            Executed when connection changes.
            </summary>
            <param name="e"><see cref="T:WaveEngine.Common.Features.IsConnectedChangedEventArgs"/> args</param>
        </member>
        <member name="E:WaveEngine.Common.Features.BaseConnectivity.IsConnectedChanged">
            <summary>
            Event handler for connection changes.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Features.BaseConnectivity.Dispose">
            <summary>
            Dispose of class and parent classes
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Features.BaseConnectivity.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Common.Features.BaseConnectivity"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Features.BaseConnectivity.Dispose(System.Boolean)">
            <summary>
            Dispose method
            </summary>
            <param name="disposing">Whether to dispose of unmanaged resources</param>
        </member>
        <member name="T:WaveEngine.Common.Features.BatteryChangedEventArgs">
            <summary>
            Arguments to pass to event handlers
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Features.BatteryChangedEventArgs.RemainingChargePercent">
            <summary>
            Gets or sets the remaining battery charge percent
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Features.BatteryChangedEventArgs.Status">
            <summary>
            Gets or sets the current status of the battery
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Features.BatteryChangedEventArgs.PowerSource">
            <summary>
            Gets or sets the source of power
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Features.BatteryStatus">
            <summary>
            Status of the battery
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Features.BatteryStatus.Unknown">
            <summary>
            The battery is in an unknown state
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Features.BatteryStatus.Charging">
            <summary>
            The battery is plugged in and charging
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Features.BatteryStatus.Discharging">
            <summary>
            The battery is currently discharging
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Features.BatteryStatus.Full">
            <summary>
            The battery is completely full
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Features.BatteryStatus.NotCharging">
            <summary>
            The battery is neither charging nor discharging
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Features.BatteryStatus.NoBattery">
            <summary>
            The battery is not present
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Features.IBattery">
            <summary>
            Interface for battery.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Features.IBattery.RemainingChargePercent">
            <summary>
            Gets the remaining battery charge percent
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Features.IBattery.Status">
            <summary>
            Gets the current battery status
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Features.IBattery.PowerSource">
            <summary>
            Gets the current power source
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Features.IBattery.BatteryChanged">
            <summary>
            Event handler for battery changes
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Features.BatteryChangedEventHandler">
            <summary>
            Battery level changed event handler
            </summary>
            <param name="sender">The event sender</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:WaveEngine.Common.Features.IConnectivity">
            <summary>
            Interface for network connectivity
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Features.IConnectivity.IsConnected">
            <summary>
            Gets a value indicating whether device is connected to a network or not.
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Features.IConnectivity.IsConnectedChanged">
            <summary>
            Event handler for connection changes.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Features.ConnectivityIsConnectedChangedEventHandler">
            <summary>
            Battery level changed event handler
            </summary>
            <param name="sender">The event sender</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:WaveEngine.Common.Features.IsConnectedChangedEventArgs">
            <summary>
            Arguments to pass to event handlers
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Features.IsConnectedChangedEventArgs.IsConnected">
            <summary>
            Gets or sets a value indicating whether device is connected or not.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Features.IVibrate">
            <summary>
            Interface for vibrate.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Features.IVibrate.StartVibrate(System.Int32)">
            <summary>
            Vibrate the device for specified amount of time
            </summary>
            <param name="milliseconds">Time in Milliseconds to vibrate. 500ms is default</param>
        </member>
        <member name="T:WaveEngine.Common.Features.PowerSource">
            <summary>
            Current power source
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Features.PowerSource.None">
            <summary>
            No external power source
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Features.PowerSource.Ac">
            <summary>
            Charging from AC
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Features.PowerSource.Usb">
            <summary>
            Charging from USB
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Features.PowerSource.Wireless">
            <summary>
            Charging with a wireless charger
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Features.IFeatures">
            <summary>
            Features interface
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Features.IFeatures.Vibrate">
            <summary>
            Gets the vibrate feature
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Features.IFeatures.Battery">
            <summary>
            Gets the battery feature
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Features.IFeatures.Connectivity">
            <summary>
            Gets the connectivity feature
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.IRenderLayerMode">
            <summary>
            The interfaces that has all the render layer configuration enums
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderLayerMode.RasterizeMode">
            <summary>
            Gets or sets the layer's rasterize mode.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderLayerMode.BlendMode">
            <summary>
            Gets or sets the layer's cull mode.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderLayerMode.DepthStencilMode">
            <summary>
            Gets or sets the layer's depth mode.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.MorphTargetSlot">
            <summary>
            Represents a morph target slot
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.MorphTargetSlot.VertexBuffer">
            <summary>
            The morph targets buffers array
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.MorphTargetSlot.SparseIndexBuffer">
            <summary>
            IndexBuffer used for sparse accessor
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.MorphTargetSlot.BoundingBox">
            <summary>
            The bounding box of this slot
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.MorphTargetSlot.CheckCompatibility(WaveEngine.Common.Graphics.VertexBuffer)">
            <summary>
            Checks the compatibility of this buffer to the reference pose
            </summary>
            <param name="referenceVertexBuffer">The reference vertex buffer</param>
            <returns>True if this slot is compatible</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.SkeletonJointContent">
            <summary>
            The skeletal joint.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkeletonJointContent.NodeId">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkeletonJointContent.InverseBindPose">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkeletonJointContent.#ctor(System.Int32,WaveEngine.Common.Math.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.SkeletonJointContent"/> struct.
            </summary>
            <param name="nodeId">The node id</param>
            <param name="invBindPose">The inverse bind pose</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.MeshContent">
            <summary>
            The mesh content.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.MeshContent.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.MeshContent.Skin">
            <summary>
            Gets or sets the skin
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.MeshContent.MorphTargetCount">
            <summary>
            Gets or sets the number of morph targets
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.MeshContent.MorphTargetWeights">
            <summary>
            Gets or sets the default morph target weights
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.MeshContent.BoundingBox">
            <summary>
            Gets or sets the bounding box
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.MeshContent.MeshParts">
            <summary>
            The mesh parts
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.MeshContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.MeshContent"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.MeshContent.Write(System.IO.BinaryWriter)">
            <summary>
            Write this mesh
            </summary>
            <param name="writer">The writer</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.MeshContent.Read(System.IO.BinaryReader)">
            <summary>
            Read a mesh content
            </summary>
            <param name="reader">The reader</param>
            <returns>The mesh content</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.MeshContent.RefreshBoundingBox">
            <summary>
            Compute bounding box
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.MeshContent.Clone">
            <summary>
            Clone this instance
            </summary>
            <returns>The cloned mesh content</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.SkinContent">
            <summary>
            The skin content.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.SkinContent.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinContent.Joints">
            <summary>
            The skeleton joints
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinContent.RootJoint">
            <summary>
            The root joint
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.SkinContent"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinContent.Write(System.IO.BinaryWriter)">
            <summary>
            Write this instance
            </summary>
            <param name="writer">The binary writer</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinContent.Read(System.IO.BinaryReader)">
            <summary>
            Write this instance
            </summary>
            <param name="reader">The binary writer</param>
            <returns>The readed skin content</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.NodeContent">
            <summary>
            The node content.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.NodeContent.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="F:WaveEngine.Common.Graphics.NodeContent.nodePath">
            <summary>
            Gets the node path
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.NodeContent.ChildIndices">
            <summary>
            Gets or sets the children.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.NodeContent.Parent">
            <summary>
            The node parent
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.NodeContent.Children">
            <summary>
            The node children
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.NodeContent.Translation">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.NodeContent.Orientation">
            <summary>
            The orientation
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.NodeContent.Scale">
            <summary>
            The scale
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.NodeContent.Mesh">
            <summary>
            Gets or sets the mesh content index
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.NodeContent.Skin">
            <summary>
            Gets or sets the skin index
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.NodeContent.MorphTargetWeights">
            <summary>
            Gets or sets the default morph target weights for this node
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.NodeContent.NodePath">
            <summary>
            Gets the node path of this node
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.NodeContent.Transform">
            <summary>
            Gets the transform matrix
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.NodeContent.AbsoluteTransform">
            <summary>
            Gets the absolute transform matrix
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.NodeContent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.NodeContent"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.NodeContent.ToString">
            <summary>
            To string
            </summary>
            <returns>the string</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.NodeContent.Write(System.IO.BinaryWriter)">
            <summary>
            Write the node hierarchy in the stream
            </summary>
            <param name="writer">The binary writer</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.NodeContent.Read(System.IO.BinaryReader)">
            <summary>
            Read Node tree
            </summary>
            <param name="reader">The binary reader</param>
            <returns>The root node</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.AddressMode">
            <summary>
            Specifies texture addressing mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.AddressMode.PointClamp">
            <summary>
            Point/nearest neighbor filtering, clamped texture coordinates.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.AddressMode.PointWrap">
            <summary>
            Point/nearest neighbor filtering, wrapped texture coordinates.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.AddressMode.LinearClamp">
            <summary>
            Bilinear filtering, clamped texture coordinates.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.AddressMode.LinearWrap">
            <summary>
            Bilinear filtering, wrapped texture coordinates.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.AddressMode.AnisotropicClamp">
            <summary>
            Anisotropic filtering, clamped texture coordinates.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.AddressMode.AnisotropicWrap">
            <summary>
            Anisotropic filtering, wrapped texture coordinates.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.AnisotropyLevel">
            <summary>
            Specifies the level of anisotropic filtering.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.AnisotropyLevel.Aniso1x">
            <summary>
            1x anisotropic filtering.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.AnisotropyLevel.Aniso2x">
            <summary>
            2x anisotropic filtering.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.BlendMode">
            <summary>
            Specifies alpha blending mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendMode.Opaque">
            <summary>
            No blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendMode.AlphaBlend">
            <summary>
            Premultiplied alpha blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendMode.Additive">
            <summary>
            Additive alpha blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendMode.NonPremultiplied">
            <summary>
            Non premultiplied alpha blending.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.DepthBias">
            <summary>
            Specifies polygon depth boas.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthBias.Zero">
            <summary>
            Zero depth bias
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthBias.Positive">
            <summary>
            Positive depth bias
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthBias.Negative">
            <summary>
            Negative depth bias
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.DepthMode">
            <summary>
            Specifies depth reading/writing mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthMode.Read">
            <summary>
            Read only.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthMode.Write">
            <summary>
            Read and write.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthMode.None">
            <summary>
            No depth mode.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.RenderLayerDescription">
            <summary>
            The render layer description class
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RenderLayerDescription.UserEditorLayer">
            <summary>
            The editor layer Threshold
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RenderLayerDescription.UserCodeLayer">
            <summary>
            The code layer Threshold
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RenderLayerDescription.nextEditorLayerId">
            <summary>
            The next Editor layer id
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RenderLayerDescription.nextCodeLayerId">
            <summary>
            The next code layer id
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RenderLayerDescription.Name">
            <summary>
            Gets or sets the layer name
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RenderLayerDescription.Id">
            <summary>
            Gets or sets the layer id
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.RenderLayerDescription.CanDelete">
            <summary>
            Gets a value indicating whether the layer can be deleted
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RenderLayerDescription.renderState">
            <summary>
            The render state of the layer
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RenderLayerDescription.rasterizeMode">
            <summary>
            The rasterize mode
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RenderLayerDescription.blendMode">
            <summary>
            The blend mode
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RenderLayerDescription.depthStencilMode">
            <summary>
            The depth stencil mode
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RenderLayerDescription.IsGUILayer">
            <summary>
            If the layer is designed for GUI
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.RenderLayerDescription.WaveEngine#Common#Graphics#IRenderLayerMode#RasterizeMode">
            <summary>
            Gets or sets the layer's rasterize mode.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.RenderLayerDescription.RenderState">
            <summary>
            Gets the render state description of the layer
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.RenderLayerDescription.RasterizeState">
            <summary>
            Gets or sets the rasterize state
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.RenderLayerDescription.WaveEngine#Common#Graphics#IRenderLayerMode#BlendMode">
            <summary>
            Gets or sets the layer's cull mode.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.RenderLayerDescription.BlendState">
            <summary>
            Gets or sets the blend state
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.RenderLayerDescription.WaveEngine#Common#Graphics#IRenderLayerMode#DepthStencilMode">
            <summary>
            Gets or sets the layer's depth mode.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.RenderLayerDescription.DepthStencilState">
            <summary>
            Gets or sets the Depth Stencil State.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.RenderLayerDescription.DepthRange">
            <summary>
            Gets or sets the layer's depth range.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RenderLayerDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.RenderLayerDescription"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RenderLayerDescription.#ctor(WaveEngine.Common.Graphics.RasterizeStateEnum,WaveEngine.Common.Graphics.BlendStateEnum,WaveEngine.Common.Graphics.DepthStencilStateEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.RenderLayerDescription"/> class.
            </summary>
            <param name="blendMode">The blend mode of the render layer</param>
            <param name="rasterizerMode">The rasterizer mode of the render layer</param>
            <param name="depthStencilMode">The depth stencil mode of the render layer</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RenderLayerDescription.#ctor(WaveEngine.Common.Graphics.RasterizeStateEnum,WaveEngine.Common.Graphics.BlendStateEnum,WaveEngine.Common.Graphics.DepthStencilStateEnum,WaveEngine.Common.Graphics.DepthRange)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.RenderLayerDescription"/> class.
            </summary>
            <param name="blendMode">The blend mode of the render layer</param>
            <param name="rasterizerMode">The rasterizer mode of the render layer</param>
            <param name="depthStencilMode">The depth stencil mode of the render layer</param>
            <param name="depthRange">The depth range of the layer</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RenderLayerDescription.DefaultValues">
            <summary>
            The default values of the layer
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RenderLayerDescription.ToString">
            <summary>
            Retuns a string that represents the current layer.
            </summary>
            <returns>The layer text representation</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.Blend">
            <summary>
            Blend factors, which modulate values for the pixel shader and render target.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Blend.Zero">
            <summary>
            The data source is the color black (0, 0, 0, 0). No pre-blend operation.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Blend.One">
            <summary>
            The data source is the color white (1, 1, 1, 1). No pre-blend operation.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Blend.SourceColor">
            <summary>
            The data source is color data (RGB) from a pixel shader. No pre-blend operation.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Blend.InverseSourceColor">
            <summary>
            The data source is color data (RGB) from a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Blend.SourceAlpha">
            <summary>
            The data source is alpha data (A) from a pixel shader. No pre-blend operation.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Blend.InverseSourceAlpha">
            <summary>
            The data source is alpha data (A) from a pixel shader. The pre-blend operation inverts the data, generating 1 - A.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Blend.DestinationAlpha">
            <summary>
            The data source is alpha data from a rendertarget. No pre-blend operation.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Blend.InverseDestinationAlpha">
            <summary>
            The data source is alpha data from a rendertarget. The pre-blend operation inverts the data, generating 1 - A.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Blend.DestinationColor">
            <summary>
            The data source is color data from a rendertarget. No pre-blend operation.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Blend.InverseDestinationColor">
            <summary>
            The data source is color data from a rendertarget. The pre-blend operation inverts the data, generating 1 - RGB.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Blend.SourceAlphaSaturate">
            <summary>
            The data source is alpha data from a pixel shader. The pre-blend operation clamps the data to 1 or less.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Blend.BlendFactor">
            <summary>
            The data source is the blend factor set with BlendStates. No pre-blend operation.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Blend.InverseBlendFactor">
            <summary>
            The data source is the blend factor set with SetBlendState. The pre-blend operation inverts the blend factor, generating 1 - blend_factor.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Blend.SecondarySourceColor">
            <summary>
            The data sources are both color data output by a pixel shader. There is no pre-blend operation. This options supports dual-source color blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Blend.InverseSecondarySourceColor">
            <summary>
            The data sources are both color data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. This options supports dual-source color blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Blend.SecondarySourceAlpha">
            <summary>
            The data sources are alpha data output by a pixel shader. There is no pre-blend operation. This options supports dual-source color blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Blend.InverseSecondarySourceAlpha">
            <summary>
            The data sources are alpha data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - A. This options supports dual-source color blending.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.BlendOperation">
            <summary>
            RGB or alpha blending operation.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendOperation.Add">
            <summary>
            Add source 1 and source 2.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendOperation.Substract">
            <summary>
            Subtract source 1 from source 2.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendOperation.ReverseSubstract">
            <summary>
            Subtract source 2 from source 1.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendOperation.Min">
            <summary>
            Find the minimum of source 1 and source 2.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendOperation.Max">
            <summary>
            Find the maximum of source 1 and source 2.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.BlendStateEnum">
            <summary>
            The blend state default values
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateEnum.Opaque">
            <summary>
            Not blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateEnum.AlphaBlend">
            <summary>
            Premultiplied alpha blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateEnum.AlphaNonPremultiplied">
            <summary>
            Non premultiplied alpha blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateEnum.Additive">
            <summary>
            Additive alpha blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateEnum.Multiplicative">
            <summary>
            Multiplicative alpha blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateEnum.Custom">
            <summary>
            Custom value
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.BlendStates">
            <summary>
            Default known values for <see cref="T:WaveEngine.Common.Graphics.BlendStateDescription"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStates.Opaque">
            <summary>
            Not blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStates.AlphaBlend">
            <summary>
            Premultiplied alpha blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStates.Additive">
            <summary>
            Additive alpha blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStates.Multiplicative">
            <summary>
            Additive alpha blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStates.NonPremultiplied">
            <summary>
            Non premultiplied alpha blending.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.BlendStates.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.BlendStates"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.BlendStateDescription">
            <summary>
            Describes the blend state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateDescription.AlphaToCoverageEnable">
            <summary>
            Specifies whether to use alpha-to-coverage as a multisampling technique when setting a pixel to a render target.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateDescription.IndependentBlendEnable">
            <summary>
            Specifies whether to enable independent blending in simultaneous render targets. Set to TRUE to enable independent blending.
            If set to FALSE, only the RenderTarget[0] members are used; RenderTarget[1..7] are ignored.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateDescription.RenderTarget0">
            <summary>
            RenderTarget blend description 0 / 7
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateDescription.RenderTarget1">
            <summary>
            RenderTarget blend description 1 / 7
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateDescription.RenderTarget2">
            <summary>
            RenderTarget blend description 2 / 7
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateDescription.RenderTarget3">
            <summary>
            RenderTarget blend description 3 / 7
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateDescription.RenderTarget4">
            <summary>
            RenderTarget blend description 4 / 7
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateDescription.RenderTarget5">
            <summary>
            RenderTarget blend description 5 / 7
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateDescription.RenderTarget6">
            <summary>
            RenderTarget blend description 6 / 7
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateDescription.RenderTarget7">
            <summary>
            RenderTarget blend description 7 / 7
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.BlendStateDescription.Default">
            <summary>
            Gets default values for BlendStateDescription.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.BlendStateDescription.SetDefault">
            <summary>
            Default BlendStateDescription values.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.BlendStateDescription.Equals(WaveEngine.Common.Graphics.BlendStateDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.BlendStateDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.BlendStateDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.BlendStateDescription.op_Equality(WaveEngine.Common.Graphics.BlendStateDescription,WaveEngine.Common.Graphics.BlendStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.BlendStateDescription.op_Inequality(WaveEngine.Common.Graphics.BlendStateDescription,WaveEngine.Common.Graphics.BlendStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.BlendStateRenderTargetDescription">
            <summary>
            Describes the blend state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateRenderTargetDescription.BlendEnable">
            <summary>
            Enable (or disable) blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateRenderTargetDescription.SourceBlendColor">
            <summary>
            This blend option specifies the operation to perform on the RGB value that the pixel shader outputs.
            The BlendOp member defines how to combine the SrcBlend and DestBlend operations.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateRenderTargetDescription.DestinationBlendColor">
            <summary>
            This blend option specifies the operation to perform on the current RGB value in the render target.
            The BlendOp member defines how to combine the SrcBlend and DestBlend operations.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateRenderTargetDescription.BlendOperationColor">
            <summary>
            This blend operation defines how to combine the SrcBlend and DestBlend operations.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateRenderTargetDescription.SourceBlendAlpha">
            <summary>
            This blend option specifies the operation to perform on the alpha value that the pixel shader outputs.
            Blend options that end in _COLOR are not allowed. The BlendOpAlpha member defines how to combine the SrcBlendAlpha
            and DestBlendAlpha operations.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateRenderTargetDescription.DestinationBlendAlpha">
            <summary>
            This blend option specifies the operation to perform on the current alpha value in the render target.
            Blend options that end in _COLOR are not allowed. The BlendOpAlpha member defines how to combine the SrcBlendAlpha
            and DestBlendAlpha operations.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateRenderTargetDescription.BlendOperationAlpha">
            <summary>
            This blend operation defines how to combine the SrcBlendAlpha and DestBlendAlpha operations.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BlendStateRenderTargetDescription.ColorWriteChannels">
            <summary>
            A write mask.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.BlendStateRenderTargetDescription.Default">
            <summary>
            Gets default values for BlendStateDescription.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.BlendStateRenderTargetDescription.SetDefault">
            <summary>
            Default BlendStateDescription values.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.BlendStateRenderTargetDescription.Equals(WaveEngine.Common.Graphics.BlendStateRenderTargetDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.BlendStateRenderTargetDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.BlendStateRenderTargetDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.BlendStateRenderTargetDescription.op_Equality(WaveEngine.Common.Graphics.BlendStateRenderTargetDescription,WaveEngine.Common.Graphics.BlendStateRenderTargetDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.BlendStateRenderTargetDescription.op_Inequality(WaveEngine.Common.Graphics.BlendStateRenderTargetDescription,WaveEngine.Common.Graphics.BlendStateRenderTargetDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.ColorWriteChannels">
            <summary>
            Identify which components of each pixel of a render target are writable during blending.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ColorWriteChannels.None">
            <summary>
            None of the data are stored.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ColorWriteChannels.Red">
            <summary>
            Allow data to be stored in the red component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ColorWriteChannels.Green">
            <summary>
            Allow data to be stored in the green component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ColorWriteChannels.Blue">
            <summary>
            Allow data to be stored in the blue component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ColorWriteChannels.Alpha">
            <summary>
            Allow data to be stored in the alpha component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ColorWriteChannels.All">
            <summary>
            Allow data to be stored in all components.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.ComparisonFunction">
            <summary>
            Comparison options.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ComparisonFunction.Never">
            <summary>
            Never pass the comparison.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ComparisonFunction.Less">
            <summary>
            If the source data is less than the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ComparisonFunction.Equal">
            <summary>
            If the source data is equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ComparisonFunction.LessEqual">
            <summary>
            If the source data is less than or equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ComparisonFunction.Greater">
            <summary>
            If the source data is greater than the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ComparisonFunction.NotEqual">
            <summary>
            If the source data is not equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ComparisonFunction.GreaterEqual">
            <summary>
            If the source data is greater than or equal to the destination data, the comparison passes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ComparisonFunction.Always">
            <summary>
            Always pass the comparison.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.CullMode">
            <summary>
            Specifies polygon culling mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.CullMode.None">
            <summary>
            Always draw all triangles.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.CullMode.Front">
            <summary>
            Do not draw triangles that are front-facing.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.CullMode.Back">
            <summary>
            Do not draw triangles that are back-facing.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.DepthStencilStateDescription">
            <summary>
            Describes depth-stencil state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilStateDescription.DepthEnable">
            <summary>
            Enable depth testing.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilStateDescription.DepthWriteMask">
            <summary>
            Identify a portion of the depth-stencil buffer that can be modified by depth data.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilStateDescription.DepthFunction">
            <summary>
            A function that compares depth data against existing depth data.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilStateDescription.StencilEnable">
            <summary>
            Enable stencil testing.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilStateDescription.StencilReadMask">
            <summary>
            Identify a portion of the depth-stencil buffer for reading stencil data.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilStateDescription.StencilWriteMask">
            <summary>
            Identify a portion of the depth-stencil buffer for writing stencil data.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilStateDescription.FrontFace">
            <summary>
            Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilStateDescription.BackFace">
            <summary>
            Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away from the camera.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.DepthStencilStateDescription.Default">
            <summary>
            Gets default values for DephtStencilStateDescription.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthStencilStateDescription.SetDefault">
            <summary>
            Default DephtStencilStateDescription values.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthStencilStateDescription.Equals(WaveEngine.Common.Graphics.DepthStencilStateDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthStencilStateDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthStencilStateDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthStencilStateDescription.op_Equality(WaveEngine.Common.Graphics.DepthStencilStateDescription,WaveEngine.Common.Graphics.DepthStencilStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthStencilStateDescription.op_Inequality(WaveEngine.Common.Graphics.DepthStencilStateDescription,WaveEngine.Common.Graphics.DepthStencilStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.DepthStencilOperationDescription">
            <summary>
            Stencil operations that can be performed based on the results of stencil test.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilOperationDescription.StencilFailOperation">
            <summary>
            The stencil operation to perform when stencil testing fails.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilOperationDescription.StencilDepthFailOperation">
            <summary>
            The stencil operation to perform when stencil testing passes and depth testing fails.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilOperationDescription.StencilPassOperation">
            <summary>
            The stencil operation to perform when stencil testing and depth testing both pass.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilOperationDescription.StencilFunction">
            <summary>
            A function that compares stencil data against existing stencil data.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthStencilOperationDescription.Equals(WaveEngine.Common.Graphics.DepthStencilOperationDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthStencilOperationDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthStencilOperationDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthStencilOperationDescription.op_Equality(WaveEngine.Common.Graphics.DepthStencilOperationDescription,WaveEngine.Common.Graphics.DepthStencilOperationDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthStencilOperationDescription.op_Inequality(WaveEngine.Common.Graphics.DepthStencilOperationDescription,WaveEngine.Common.Graphics.DepthStencilOperationDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.DepthStencilStateEnum">
            <summary>
            The depth stencil state default values
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilStateEnum.None">
            <summary>
            Depth disable
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilStateEnum.Write">
            <summary>
            Depth enable and writemask enable.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilStateEnum.Read">
            <summary>
            Depth enable but writemask zero.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilStateEnum.Custom">
            <summary>
            Custom value
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.DepthStencilStates">
            <summary>
            Default known values for <see cref="T:WaveEngine.Common.Graphics.DepthStencilStateDescription"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilStates.None">
            <summary>
            Depth disable
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilStates.Write">
            <summary>
            Depth enable and writemask enable.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthStencilStates.Read">
            <summary>
            Depth enable but writemask zero.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthStencilStates.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.DepthStencilStates"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.FillMode">
            <summary>
            Primitive fill mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.FillMode.Wireframe">
            <summary>
            Draw lines connecting the vertices. Adjacent vertices are not drawn.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.FillMode.Solid">
            <summary>
            Fill the triangles formed by the vertices. Adjacent vertices are not drawn.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.IRenderState">
            <summary>
            Interface for render states.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderState.InvalidatedViewport">
            <summary>
            Gets or sets a value indicating whether the current viewport is valid.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderState.InvalidatedScissorRectangle">
            <summary>
            Gets or sets a value indicating whether the current scissor rectangle is valid.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderState.InvalidatedRasterizerDescription">
            <summary>
            Gets or sets a value indicating whether the current rasterizer description is valid.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderState.InvalidatedBlendDescription">
            <summary>
            Gets or sets a value indicating whether the current blend description is valid.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderState.InvalidatedDepthStencilDescription">
            <summary>
            Gets or sets a value indicating whether the current depthStencil description is valid.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderState.Apply(WaveEngine.Common.Graphics.RenderStateDescription,WaveEngine.Common.Graphics.Viewport@,WaveEngine.Common.Graphics.DepthRange@)">
            <summary>
            Apply a new renderstate.
            </summary>
            <param name="description">The new renderstate description.</param>
            <param name="viewport">The viewport of the render state</param>
            <param name="depthRange">The depth range of the render state</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.RasterizerStateDescription">
            <summary>
            Describes a rasterizer state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizerStateDescription.FillMode">
            <summary>
            Determines the fill mode to use when rendering.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizerStateDescription.CullMode">
            <summary>
            Indicates triangles facing the specified direction are not drawn.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizerStateDescription.FrontCounterClockwise">
            <summary>
            Determines if a triangle is front- or back-facing. If this parameter is TRUE, a triangle will be considered front-facing
            if its vertices are counter-clockwise on the render target and considered back-facing if they are clockwise.
            If this parameter is FALSE, the opposite is true.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizerStateDescription.DepthBias">
            <summary>
            Depth value added to a given pixel. For info about depth bias.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizerStateDescription.DepthBiasClamp">
            <summary>
            Maximum depth bias of a pixel.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizerStateDescription.SlopeScaledDepthBias">
            <summary>
            Scalar on a given pixel's slope.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizerStateDescription.DepthClipEnable">
            <summary>
            Enable clipping based on distance.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizerStateDescription.ScissorEnable">
            <summary>
            Enable scissor-rectangle culling. All pixels outside an active scissor rectangle are culled.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizerStateDescription.MultisampleEnable">
            <summary>
            Specifies whether to use the quadrilateral or alpha line anti-aliasing algorithm on multisample antialiasing (MSAA)
            render targets. Set to TRUE to use the quadrilateral line anti-aliasing algorithm and to FALSE to use the alpha line
            anti-aliasing algorithm. For more info about this member, see Remarks.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizerStateDescription.AntialiasedLineEnable">
            <summary>
            Specifies whether to enable line antialiasing; only applies if doing line drawing and MultisampleEnable is FALSE
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.RasterizerStateDescription.Default">
            <summary>
            Gets default values for RasterizerStateDescription.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RasterizerStateDescription.SetDefault">
            <summary>
            Default rasterizerstatedescription values.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RasterizerStateDescription.Equals(WaveEngine.Common.Graphics.RasterizerStateDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RasterizerStateDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RasterizerStateDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RasterizerStateDescription.op_Equality(WaveEngine.Common.Graphics.RasterizerStateDescription,WaveEngine.Common.Graphics.RasterizerStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RasterizerStateDescription.op_Inequality(WaveEngine.Common.Graphics.RasterizerStateDescription,WaveEngine.Common.Graphics.RasterizerStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.RasterizeStateEnum">
            <summary>
            Enum of the rasterizer states
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizeStateEnum.CullFront">
            <summary>
            Cull primitives with clockwise winding order,
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizeStateEnum.CullBack">
            <summary>
            Cull primitives with counter-clockwise winding order.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizeStateEnum.None">
            <summary>
            Not cull primitives.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizeStateEnum.WireframeCullFront">
            <summary>
            Cull primitives with clockwise winding order and wireframe enable.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizeStateEnum.WireframeCullBack">
            <summary>
            Cull primitives with counter-clockwise winding order and wireframe enable.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizeStateEnum.WireframeCullNone">
            <summary>
            Not cull primitives and wireframe enable.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizeStateEnum.Custom">
            <summary>
            Custom value
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.RasterizerStates">
            <summary>
            Default known values for <see cref="T:WaveEngine.Common.Graphics.RasterizerStateDescription"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizerStates.CullFront">
            <summary>
            Cull primitives with clockwise winding order;
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizerStates.CullBack">
            <summary>
            Cull primitives with counter-clockwise winding order.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizerStates.None">
            <summary>
            Not cull primitives.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizerStates.WireframeCullFront">
            <summary>
            Cull primitives with clockwise winding order and wireframe enable.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizerStates.WireframeCullBack">
            <summary>
            Cull primitives with counter-clockwise winding order and wireframe enable.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RasterizerStates.WireframeCullNone">
            <summary>
            Not cull primitives and wireframe enable.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RasterizerStates.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.RasterizerStates"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.RenderStateDescription">
            <summary>
            Defines the render state of a graphics device.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RenderStateDescription.RasterizerState">
            <summary>
            Gets or sets the Rasterizer State.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RenderStateDescription.DepthStencilState">
            <summary>
            Gets or sets the DepthStencil state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RenderStateDescription.BlendState">
            <summary>
            Gets or sets the BlendState state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RenderStateDescription.ScissorRectangle">
            <summary>
            Gets or sets the The scissor rectangle.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.RenderStateDescription.DepthRange">
            <summary>
            Gets or sets the current depth range.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RenderStateDescription.DefaultValues">
            <summary>
            The default values
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.SamplerStateEnum">
            <summary>
            The sampler state default values
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateEnum.PointClamp">
            <summary>
            SamplerState description using point filter (bilinear) and clamp address mode for UVW.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateEnum.PointWrap">
            <summary>
            SamplerState description using point filter (bilinear) and wrap address mode for UVW.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateEnum.PointMirror">
            <summary>
            SamplerState description using point filter (bilinear) and mirror address mode for UVW.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateEnum.LinearClamp">
            <summary>
            SamplerState description using linear filter (trilinear) and clamp address mode for UVW.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateEnum.LinearWrap">
            <summary>
            SamplerState description using linear filter (trilinear) and wrap address mode for UVW.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateEnum.LinearMirror">
            <summary>
            SamplerState description using linear filter (trilinear) and mirror address mode for UVW.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateEnum.AnisotropicClamp">
            <summary>
            SamplerState description using anisotropic filter and clamp address mode for UVW.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateEnum.AnisotropicWrap">
            <summary>
            SamplerState description using anisotropic filter and wrap address mode for UVW.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateEnum.AnisotropicMirror">
            <summary>
            SamplerState description using anisotropic filter and mirror address mode for UVW.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateEnum.Custom">
            <summary>
            Custom value
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.SamplerStates">
            <summary>
            Describes a sampler state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStates.PointClamp">
            <summary>
            SamplerState description using point filter (bilinear) and clamp address mode for UVW.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStates.PointWrap">
            <summary>
            SamplerState description using point filter (bilinear) and wrap address mode for UVW.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStates.PointMirror">
            <summary>
            SamplerState description using point filter (bilinear) and mirror address mode for UVW.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStates.LinearClamp">
            <summary>
            SamplerState description using linear filter (trilinear) and clamp address mode for UVW.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStates.LinearWrap">
            <summary>
            SamplerState description using linear filter (trilinear) and wrap address mode for UVW.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStates.LinearMirror">
            <summary>
            SamplerState description using linear filter (trilinear) and mirror address mode for UVW.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStates.AnisotropicClamp">
            <summary>
            SamplerState description using anisotropic filter and clamp address mode for UVW.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStates.AnisotropicWrap">
            <summary>
            SamplerState description using anisotropic filter and wrap address mode for UVW.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStates.AnisotropicMirror">
            <summary>
            SamplerState description using anisotropic filter and mirror address mode for UVW.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SamplerStates.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.SamplerStates"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.SamplerStateDescription">
            <summary>
            Describes a sampler state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateDescription.Filter">
            <summary>
            Filtering method to use when sampling a texture.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateDescription.AddressU">
            <summary>
            Method to use for resolving a u texture coordinate that is outside the 0 to 1 range.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateDescription.AddressV">
            <summary>
            Method to use for resolving a v texture coordinate that is outside the 0 to 1 range.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateDescription.AddressW">
            <summary>
            Method to use for resolving a w texture coordinate that is outside the 0 to 1 range.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateDescription.MipLODBias">
            <summary>
            Offset from the calculated mipmap level. For example, if Direct3D calculates that a
            texture should be sampled at mipmap level 3 and MipLODBias is 2, then the texture will be sampled at mipmap level 5.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateDescription.MaxAnisotropy">
            <summary>
            Clamping value used if D3D11_FILTER_ANISOTROPIC or D3D11_FILTER_COMPARISON_ANISOTROPIC is
            specified in Filter. Valid values are between 1 and 16.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateDescription.ComparisonFunc">
            <summary>
            A function that compares sampled data against existing sampled data.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateDescription.BorderColorVector">
            <summary>
            Border color to use if D3D11_TEXTURE_ADDRESS_BORDER is specified for AddressU, AddressV, or AddressW.
            Range must be between 0.0 and 1.0 inclusive.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.SamplerStateDescription.BorderColor">
            <summary>
            Gets or sets Border color to use if D3D11_TEXTURE_ADDRESS_BORDER is specified for AddressU, AddressV, or AddressW.
            Range must be between 0.0 and 1.0 inclusive.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateDescription.MinLOD">
            <summary>
            Lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level
            and any level higher than that is less detailed.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SamplerStateDescription.MaxLOD">
            <summary>
            Upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level
            higher than that is less detailed. This value must be greater than or equal to MinLOD.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.SamplerStateDescription.Default">
            <summary>
            Gets default values for SamplerStateDescription.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SamplerStateDescription.SetDefault">
            <summary>
            Default SamplerStateDescription values.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SamplerStateDescription.Equals(WaveEngine.Common.Graphics.SamplerStateDescription)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SamplerStateDescription.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SamplerStateDescription.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SamplerStateDescription.op_Equality(WaveEngine.Common.Graphics.SamplerStateDescription,WaveEngine.Common.Graphics.SamplerStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SamplerStateDescription.op_Inequality(WaveEngine.Common.Graphics.SamplerStateDescription,WaveEngine.Common.Graphics.SamplerStateDescription)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.StencilOperation">
            <summary>
            The stencil operations that can be performed during depth-stencil testing.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.StencilOperation.Keep">
            <summary>
            Keep the existing stencil data.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.StencilOperation.Zero">
            <summary>
            Set the stencil data to 0.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.StencilOperation.Replace">
            <summary>
            Set the stencil data to the reference value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.StencilOperation.IncrementSaturation">
            <summary>
            Increment the stencil value by 1, and clamp the result.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.StencilOperation.DecrementSaturation">
            <summary>
            Decrement the stencil value by 1, and clamp the result.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.StencilOperation.Invert">
            <summary>
            Invert the stencil data.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.StencilOperation.Increment">
            <summary>
            Increment the stencil value by 1, and wrap the result if necessary.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.StencilOperation.Decrement">
            <summary>
            Decrement the stencil value by 1, and wrap the result if necessary.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.TextureAddressMode">
            <summary>
            Identify a technique for resolving texture coordinates that are outside of the boundaries of a texture.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureAddressMode.Wrap">
            <summary>
            Tile the texture at every (u,v) integer junction. For example, for u values between 0 and 3, the texture is repeated three times.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureAddressMode.Mirror">
            <summary>
            Flip the texture at every (u,v) integer junction. For u values between 0 and 1, for example, the texture is addressed normally;
            between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again; and so on.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureAddressMode.Clamp">
            <summary>
            Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureAddressMode.Border">
            <summary>
            Texture coordinates outside the range [0.0, 1.0] are set to the border color specified in SamplerStateDescription or HLSL code.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureAddressMode.Mirror_One">
            <summary>
            Similar to D3D11_TEXTURE_ADDRESS_MIRROR and D3D11_TEXTURE_ADDRESS_CLAMP. Takes the absolute value of the texture coordinate
            (thus, mirroring around 0), and then clamps to the maximum value.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.TextureFilter">
            <summary>
            Filtering options during texture sampling.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.Point">
            <summary>
            Use point sampling for minification, magnification, and mip-level sampling.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.MinMagPointMipLinear">
            <summary>
            Use point sampling for minification and magnification; use linear interpolation for mip-level sampling.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.MinPointMagLinearMipPoint">
            <summary>
            Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.MinPointMagMipLinear">
            <summary>
            Use point sampling for minification; use linear interpolation for magnification and mip-level sampling.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.MinLinearMagMipPoint">
            <summary>
            Use linear interpolation for minification; use point sampling for magnification and mip-level sampling.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.MinLinearMagPointMipLinear">
            <summary>
            Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.MinMagLinearMipPoint">
            <summary>
            Use linear interpolation for minification and magnification; use point sampling for mip-level sampling.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.Linear">
            <summary>
            Use linear interpolation for minification, magnification, and mip-level sampling.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.Anisotropic">
            <summary>
            Use anisotropic interpolation for minification, magnification, and mip-level sampling.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.ComparisonPoint">
            <summary>
            Use point sampling for minification, magnification, and mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.ComparisonMinMagPointMipLinear">
            <summary>
            Use point sampling for minification and magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.ComparisonMinPointMagLinearMipPoint">
            <summary>
            Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.ComparisonMinPointMagMipLinear">
            <summary>
            Use point sampling for minification; use linear interpolation for magnification and mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.ComparisonMinLinearMagMipPoint">
            <summary>
            Use linear interpolation for minification; use point sampling for magnification and mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.ComparisonMinLinearMagPointMipLinear">
            <summary>
            Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.ComparisonMinMagLinearMipPoint">
            <summary>
            Use linear interpolation for minification and magnification; use point sampling for mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.ComparisonLinear">
            <summary>
            Use linear interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureFilter.ComparisonAnisotropic">
            <summary>
            Use anisotropic interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.DepthRange">
            <summary>
            Abstracts a viewport used for defining rendering regions.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthRange.Default">
            <summary>
            Empty value for an undefined viewport.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthRange.MinDepth">
            <summary>
            Gets or sets the minimum Z (depth) value of the viewport.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DepthRange.MaxDepth">
            <summary>
            Gets or sets the maximum Z (depth) value of the viewport.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthRange.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.DepthRange"/> struct.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthRange.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.DepthRange"/> struct.
            </summary>
            <param name="minDepth">The min depth range.</param>
            <param name="maxDepth">The max depth range.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthRange.ComputeDepthRange(WaveEngine.Common.Graphics.DepthRange@,WaveEngine.Common.Graphics.DepthRange@)">
            <summary>
            Computes the depth range applying it to a global depth range.
            </summary>
            <param name="globalDepthRange">The global depth range</param>
            <param name="depthRange">The depth range to be applied</param>
            <returns>The computed depth range</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthRange.Equals(WaveEngine.Common.Graphics.DepthRange)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthRange.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthRange.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthRange.op_Equality(WaveEngine.Common.Graphics.DepthRange,WaveEngine.Common.Graphics.DepthRange)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthRange.op_Inequality(WaveEngine.Common.Graphics.DepthRange,WaveEngine.Common.Graphics.DepthRange)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.Viewport">
            <summary>
            Abstracts a viewport used for defining rendering regions.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Viewport.Empty">
            <summary>
            Empty value for an undefined viewport.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Viewport.DefaultWidth">
            <summary>
            The default viewport width
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Viewport.DefaultHeight">
            <summary>
            The default viewport height
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Viewport.X">
            <summary>
            Gets or sets the X origin of the viewport.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Viewport.Y">
            <summary>
            Gets or sets the Y origin of the viewport.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Viewport.Width">
            <summary>
            Gets or sets the width of the viewport.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Viewport.Height">
            <summary>
            Gets or sets the height of the viewport.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Viewport.AspectRatio">
            <summary>
            Gets the aspect ratio used of this viewport.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Viewport.Size">
            <summary>
            Gets the size of the viewport
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Viewport.Bounds">
            <summary>
            Gets the rectangle of the viewport.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Viewport.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Viewport"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Viewport.#ctor(WaveEngine.Common.Math.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Viewport"/> struct.
            </summary>
            <param name="rectangle">The viewport rectangle.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Viewport.Equals(WaveEngine.Common.Graphics.Viewport)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="other">Other used to compare.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Viewport.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Viewport.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Viewport.op_Equality(WaveEngine.Common.Graphics.Viewport,WaveEngine.Common.Graphics.Viewport)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Viewport.op_Inequality(WaveEngine.Common.Graphics.Viewport,WaveEngine.Common.Graphics.Viewport)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.SpriteDrawMode">
            <summary>
            Specifies texture addressing mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpriteDrawMode.Simple">
            <summary>
            Displays the full sprite.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpriteDrawMode.Sliced">
            <summary>
            The SpriteRenderer will render the sprite as a nine patch image where the corners will remain constant and the other sections will scale.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.IGraphicsPtr">
            <summary>
            Interface for Graphics native pointer.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IGraphicsPtr.NativePointer">
            <summary>
            Gets the native pointer of graphics device.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.TextureCpuAccess">
            <summary>
            Specifies the types of CPU access allowed for a texture.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureCpuAccess.None">
            <summary>
            None (default value).
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureCpuAccess.Write">
            <summary>
            The CPU can be write this resource.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureCpuAccess.Read">
            <summary>
            the CPU can be read this resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.TextureUsage">
            <summary>
            Identifies expected texture use during rendering
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureUsage.Default">
            <summary>
            A texture that requires read and write access by the GPU, Default value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureUsage.Dynamic">
            <summary>
            A texture that is accessible by both the GPU (read only) and the CPU (write only).
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexElementUsage">
            <summary>
            Specifies the vertex element usage.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.Position">
            <summary>
            Used for position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.Color">
            <summary>
            Used for color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.TextureCoordinate">
            <summary>
            Used for texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.Normal">
            <summary>
            Used for normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.Binormal">
            <summary>
            Used for binormal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.Tangent">
            <summary>
            Used for tangent.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.BlendIndices">
            <summary>
            Used for blend indices.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.BlendWeight">
            <summary>
            Used for blend weights.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.Depth">
            <summary>
            Used for depth.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.Fog">
            <summary>
            Used for fog.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.PointSize">
            <summary>
            Used for point size.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.Sample">
            <summary>
            Used for sample.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementUsage.TessellateFactor">
            <summary>
            Used for tesellation factor.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture">
            <summary>
            Represents a vertex with position, color and texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture.TexCoord2">
            <summary>
            Second vertex texture coordinate
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
            <param name="texCoord">The tex coord.</param>
            <param name="texCoord2">The second texture coordinate.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorDualTexture"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionDualTexture">
            <summary>
            A vertex format structure containing position and two texture coordinates.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionDualTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionDualTexture.TexCoord">
            <summary>
            First vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionDualTexture.TexCoord2">
            <summary>
            Second vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionDualTexture.VertexFormat">
            <summary>
            Vertex format of this vertex.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionDualTexture.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionDualTexture.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionDualTexture"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="texCoord">The first texture coordinate.</param>
            <param name="texCoord2">The second texture coordinate.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionDualTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionDualTexture"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.TexCoord2">
            <summary>
            Second vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture" /> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="color">The color.</param>
            <param name="texCoord">The first texture coordinate.</param>
            <param name="texCoord2">The second texture coordinate.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorDualTexture"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture.TexCoord2">
            <summary>
            Second vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="texCoord">The first texture coordinate.</param>
            <param name="texCoord2">The second texture coordinate.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalDualTexture"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis">
            <summary>
            Represents a vertex with position, color, texture coordinate and axis size.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis.AxisSize">
            <summary>
            Vertex axis size.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
            <param name="texCoord">The texture coordinate.</param>
            <param name="axisSize">The axis size.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTextureAxis"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex">
            <summary>
            A vertex format structure containing data for applying matrix skinning and normal mapping.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.Binormal">
            <summary>
            Vertex binormal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.Tangent">
            <summary>
            Vertex tangent.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.BlendIndices">
            <summary>
            Vertex blend indices.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.BlendWeights">
            <summary>
            Vertex blend weights.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.VertexFormat">
            <summary>
            Vertex format of this vertex.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Byte4,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="texCoord">The tex coord.</param>
            <param name="blendIndices">The blend indices.</param>
            <param name="blendWeights">The blend weights.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.SkinnedNormalMappedVertex"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex">
            <summary>
            A vertex format structure containing data for applying matrix skinning.
            </summary>
            <remarks>TODO: this vertex struct shouldn't have normal mapping info!</remarks>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.BlendIndices">
            <summary>
            Vertex blend indices.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.BlendWeights">
            <summary>
            Vertex blend weights.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.Binormal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.Tangent">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.VertexFormat">
            <summary>
            Vertex format of this vertex.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Byte4,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="texCoord">The tex coord.</param>
            <param name="blendIndices">The blend indices.</param>
            <param name="blendWeights">The blend weights.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.SkinnedVertex"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPosition">
            <summary>
            A vertex format structure containing vertex position and color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPosition.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPosition.VertexFormat">
            <summary>
            Vertex format of this vertex.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPosition.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPosition.#ctor(WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPosition" /> struct.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPosition.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPosition"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor">
            <summary>
            A vertex format structure containing vertex position and color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor.VertexFormat">
            <summary>
            Vertex format of this vertex.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColor"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture">
            <summary>
            Represents a vertex with position, color and texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="color">The color.</param>
            <param name="texCoord">The tex coord.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionColorTexture"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal">
            <summary>
            Represents a vertex with position and normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormal"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor">
            <summary>
            Represents a vertex with position, color and texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor" /> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColor"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture" /> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="color">The color.</param>
            <param name="texCoord">The tex coord.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalColorTexture"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.Tangent">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.Binormal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.Color">
            <summary>
            Vertex color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.TexCoord2">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Graphics.Color,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="tangent">The tangent.</param>
            <param name="binormal">The binormal.</param>
            /// <param name="color">The color.</param>
            <param name="texCoord">The texcoord.</param>
            <param name="texCoord2">The texcoord2.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentColorDualTexture"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.Tangent">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.Binormal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture"/> struct.
            </summary>
            <param name="position">The vertex position.</param>
            <param name="normal">The vertex normal.</param>
            <param name="tangent">The vertex tangent.</param>
            <param name="binormal">The vertex binormal.</param>
            <param name="texCoord">the vertex texCoord.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTangentTexture"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture">
            <summary>
            Represents a vertex with position, normal and texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.Normal">
            <summary>
            Vertex normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="texCoord">The tex coord.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionNormalTexture"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture">
            <summary>
            Represents a vertex with position and texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture.TexCoord">
            <summary>
            Vertex texture coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture.VertexFormat">
            <summary>
            Vertex format.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture.WaveEngine#Common#Graphics#IBasicVertex#VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="texCoord">The tex coord.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.VertexFormats.VertexPositionTexture"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.IBasicVertex">
            <summary>
            Interface for vertex formats.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IBasicVertex.VertexFormat">
            <summary>
            Gets the vertex format.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.BillboardType">
            <summary>
            Specifies a Billboard behavior.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BillboardType.PointOrientation">
            <summary>
            An object is orientated about a point to always face the camera.
            With this type of billboarding the object will always appear the same to the camera, however it will be affected by perspective.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.BillboardType.Axial_Orientation">
            <summary>
            An object is rotated about an axis to face towards the camera.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.Bone">
            <summary>
            Represents a bone object from a model.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Bone.Index">
            <summary>
            Index of the bone in the hierarchy.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Bone.ParentIndex">
            <summary>
            Index of the parent bone; -1 if it is the root bone.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Bone.Name">
            <summary>
            Name of the bone.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Bone.LocalTransform">
            <summary>
            Local bone transform.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Bone.AbsoluteTransform">
            <summary>
            Absolute bone transform.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Bone.#ctor(System.Int32,System.Int32,System.String,WaveEngine.Common.Math.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Bone"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="parentIndex">Index of the parent.</param>
            <param name="name">The name.</param>
            <param name="localTransform">The local transform.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Bone.#ctor(System.Int32,System.Int32,System.String,WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Bone"/> class.
            </summary>
            <param name="index">The index.</param>
            <param name="parentIndex">Index of the parent.</param>
            <param name="name">The name.</param>
            <param name="localTransform">The local transform.</param>
            <param name="absoluteTransform">The absolute transform.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Bone.SetValues(System.Int32,System.Int32,System.String,WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Private method for setting all values.
            </summary>
            <param name="index">The index.</param>
            <param name="parentIndex">Index of the parent.</param>
            <param name="name">The name.</param>
            <param name="localTransform">The local transform.</param>
            <param name="absoluteTransform">The absolute transform.</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.ClearFlags">
            <summary>
            Specifies <see cref="T:WaveEngine.Common.Graphics.RenderTarget"/> clearing modes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ClearFlags.Target">
            <summary>
            Clear color target.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ClearFlags.DepthAndStencil">
            <summary>
            Clear depth and stencil target.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ClearFlags.All">
            <summary>
            Clear color, depth and stencil target
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.Color">
            <summary>
            Represents a 32-bit color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.transparent">
            <summary>
            Transparent color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.aliceBlue">
            <summary>
            Alice blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.antiqueWhite">
            <summary>
            Antique white color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.aqua">
            <summary>
            Aqua color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.aquamarine">
            <summary>
            Aquamarine color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.azure">
            <summary>
            Azure color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.beige">
            <summary>
            Beige color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.bisque">
            <summary>
            Bisque color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.black">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.blanchedAlmond">
            <summary>
            Blanched almond color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.blue">
            <summary>
            Blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.blueViolet">
            <summary>
            Blue violet color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.brown">
            <summary>
            Brown color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.burlyWood">
            <summary>
            Burly wood color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.cadetBlue">
            <summary>
            Cadet blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.chartreuse">
            <summary>
            Chartreuse color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.chocolate">
            <summary>
            Chocolate color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.coral">
            <summary>
            Coral color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.cornflowerBlue">
            <summary>
            Cornflower blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.cornsilk">
            <summary>
            Cornsilk color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.crimson">
            <summary>
            Crimson color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.cyan">
            <summary>
            Cyan color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkBlue">
            <summary>
            Dark blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkCyan">
            <summary>
            Dark cyan color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkGoldenrod">
            <summary>
            Dark goldenrod color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkGray">
            <summary>
            Dark gray color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkGreen">
            <summary>
            Dark green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkKhaki">
            <summary>
            Dark khaki color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkMagenta">
            <summary>
            Dark magenta color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkOliveGreen">
            <summary>
            Dark olive green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkOrange">
            <summary>
            Dark orange color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkOrchid">
            <summary>
            Dark orchid color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkRed">
            <summary>
            Dark red color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkSalmon">
            <summary>
            Dark salmon color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkSeaGreen">
            <summary>
            Dark sea green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkSlateBlue">
            <summary>
            Dark slate blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkSlateGray">
            <summary>
            Dark slate gray color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkTurquoise">
            <summary>
            Dark turquoise color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.darkViolet">
            <summary>
            Dark violet color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.deepPink">
            <summary>
            Deep pink color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.deepSkyBlue">
            <summary>
            Deep sky blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.dimGray">
            <summary>
            Dim gray color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.dodgerBlue">
            <summary>
            Dodger blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.firebrick">
            <summary>
            Firebrick color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.floralWhite">
            <summary>
            Floral white color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.forestGreen">
            <summary>
            Forest green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.fuchsia">
            <summary>
            Fuchsia color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.gainsboro">
            <summary>
            Gainsboro color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.ghostWhite">
            <summary>
            Ghost white color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.gold">
            <summary>
            Gold color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.goldenrod">
            <summary>
            Goldenrod color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.gray">
            <summary>
            Gray color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.green">
            <summary>
            Green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.greenYellow">
            <summary>
            Green yellow color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.honeydew">
            <summary>
            Honeydew color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.hotPink">
            <summary>
            Hot pink color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.indianRed">
            <summary>
            Indian red color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.indigo">
            <summary>
            Indigo color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.ivory">
            <summary>
            Ivory color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.khaki">
            <summary>
            Khaki color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lavender">
            <summary>
            Lavender color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lavenderBlush">
            <summary>
            Lavender blush color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lawnGreen">
            <summary>
            Lawn green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lemonChiffon">
            <summary>
            Lemon chiffon color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightBlue">
            <summary>
            Light blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightCoral">
            <summary>
            Light color color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightCyan">
            <summary>
            Light cyan color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightGoldenrodYellow">
            <summary>
            Light goldenrod yellow color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightGreen">
            <summary>
            Light green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightGray">
            <summary>
            Light gray color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightPink">
            <summary>
            Light pink color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightSalmon">
            <summary>
            Light salmon color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightSeaGreen">
            <summary>
            Light sea green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightSkyBlue">
            <summary>
            Light sky blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightSlateGray">
            <summary>
            Light slate gray color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightSteelBlue">
            <summary>
            Light steel blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lightYellow">
            <summary>
            Light yellow color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.lime">
            <summary>
            Lime color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.limeGreen">
            <summary>
            Lime green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.linen">
            <summary>
            Linen color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.magenta">
            <summary>
            Magenta color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.maroon">
            <summary>
            Maroon color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumAquamarine">
            <summary>
            Medium aquamarine color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumBlue">
            <summary>
            Medium blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumOrchid">
            <summary>
            Medium orchid color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumPurple">
            <summary>
            Medium purple color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumSeaGreen">
            <summary>
            Medium sea green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumSlateBlue">
            <summary>
            Medium slate blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumSpringGreen">
            <summary>
            Medium spring green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumTurquoise">
            <summary>
            Medium turquoise color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mediumVioletRed">
            <summary>
            Medium violet red color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.midnightBlue">
            <summary>
            Midnight blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mintCream">
            <summary>
            Mint cream color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.mistyRose">
            <summary>
            Misty rose color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.moccasin">
            <summary>
            Mocassin color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.navajoWhite">
            <summary>
            Navajo white color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.navy">
            <summary>
            Pale navy color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.oldLace">
            <summary>
            Pale old lace color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.olive">
            <summary>
            Pale olive color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.oliveDrab">
            <summary>
            Pale olive drab color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.orange">
            <summary>
            Pale orange color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.orangeRed">
            <summary>
            Pale orange red color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.orchid">
            <summary>
            Pale orchid color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.paleGoldenrod">
            <summary>
            Pale goldenrod color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.paleGreen">
            <summary>
            Pale green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.paleTurquoise">
            <summary>
            Pale turquoise color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.paleVioletRed">
            <summary>
            Pale violet red color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.papayaWhip">
            <summary>
            Papaya whip color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.peachPuff">
            <summary>
            Peach puff color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.peru">
            <summary>
            Peru color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.pink">
            <summary>
            Pink color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.plum">
            <summary>
            Plum color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.powderBlue">
            <summary>
            Powder blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.purple">
            <summary>
            Purple color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.red">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.rosyBrown">
            <summary>
            Rosy brown color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.royalBlue">
            <summary>
            Royal blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.saddleBrown">
            <summary>
            Saddle brown color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.salmon">
            <summary>
            Salmon color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.sandyBrown">
            <summary>
            Sandy brown color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.seaGreen">
            <summary>
            Sea green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.seaShell">
            <summary>
            Sea shell color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.sienna">
            <summary>
            Sienna color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.silver">
            <summary>
            Silver color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.skyBlue">
            <summary>
            Sky blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.slateBlue">
            <summary>
            Slate blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.slateGray">
            <summary>
            Slate gray color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.snow">
            <summary>
            Snow color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.springGreen">
            <summary>
            Spring green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.steelBlue">
            <summary>
            Steel blue color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.tan">
            <summary>
            Tan color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.teal">
            <summary>
            Teal color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.thistle">
            <summary>
            Thistle color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.tomato">
            <summary>
            Tomato color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.turquoise">
            <summary>
            Turquoise color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.violet">
            <summary>
            Violet color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.wheat">
            <summary>
            Wheat color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.white">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.whiteSmoke">
            <summary>
            White smoke color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.yellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.yellowGreen">
            <summary>
            Yellow green color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.R">
            <summary>
            Red component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.G">
            <summary>
            Green component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.B">
            <summary>
            Blue component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Color.A">
            <summary>
            Alpha component.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Transparent">
            <summary>
            Gets the transparent.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.AliceBlue">
            <summary>
            Gets the alice blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.AntiqueWhite">
            <summary>
            Gets the antique white.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Aqua">
            <summary>
            Gets the aqua.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Aquamarine">
            <summary>
            Gets the aquamarine.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Azure">
            <summary>
            Gets the azure.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Beige">
            <summary>
            Gets the beige.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Bisque">
            <summary>
            Gets the bisque.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Black">
            <summary>
            Gets the black.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.BlanchedAlmond">
            <summary>
            Gets the blanched almond.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Blue">
            <summary>
            Gets the blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.BlueViolet">
            <summary>
            Gets the blue violet.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Brown">
            <summary>
            Gets the brown.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.BurlyWood">
            <summary>
            Gets the burly wood.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.CadetBlue">
            <summary>
            Gets the cadet blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Chartreuse">
            <summary>
            Gets the chartreuse.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Chocolate">
            <summary>
            Gets the chocolate.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Coral">
            <summary>
            Gets the coral.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.CornflowerBlue">
            <summary>
            Gets the cornflower blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Cornsilk">
            <summary>
            Gets the cornsilk.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Crimson">
            <summary>
            Gets the crimson.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Cyan">
            <summary>
            Gets the cyan.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkBlue">
            <summary>
            Gets the dark blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkCyan">
            <summary>
            Gets the dark cyan.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkGoldenrod">
            <summary>
            Gets the dark goldenrod.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkGray">
            <summary>
            Gets the dark gray.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkGreen">
            <summary>
            Gets the dark green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkKhaki">
            <summary>
            Gets the dark khaki.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkMagenta">
            <summary>
            Gets the dark magenta.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkOliveGreen">
            <summary>
            Gets the dark olive green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkOrange">
            <summary>
            Gets the dark orange.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkOrchid">
            <summary>
            Gets the dark orchid.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkRed">
            <summary>
            Gets the dark red.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkSalmon">
            <summary>
            Gets the dark salmon.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkSeaGreen">
            <summary>
            Gets the dark sea green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkSlateBlue">
            <summary>
            Gets the dark slate blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkSlateGray">
            <summary>
            Gets the dark slate gray.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkTurquoise">
            <summary>
            Gets the dark turquoise.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DarkViolet">
            <summary>
            Gets the dark violet.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DeepPink">
            <summary>
            Gets the deep pink.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DeepSkyBlue">
            <summary>
            Gets the deep sky blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DimGray">
            <summary>
            Gets the dim gray.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.DodgerBlue">
            <summary>
            Gets the dodger blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Firebrick">
            <summary>
            Gets the firebrick.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.FloralWhite">
            <summary>
            Gets the floral white.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.ForestGreen">
            <summary>
            Gets the forest green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Fuchsia">
            <summary>
            Gets the fuchsia.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Gainsboro">
            <summary>
            Gets the gainsboro.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.GhostWhite">
            <summary>
            Gets the ghost white.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Gold">
            <summary>
            Gets the gold.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Goldenrod">
            <summary>
            Gets the goldenrod.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Gray">
            <summary>
            Gets the gray.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Green">
            <summary>
            Gets the green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.GreenYellow">
            <summary>
            Gets the green yellow.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Honeydew">
            <summary>
            Gets the honeydew.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.HotPink">
            <summary>
            Gets the hot pink.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.IndianRed">
            <summary>
            Gets the indian red.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Indigo">
            <summary>
            Gets the indigo.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Ivory">
            <summary>
            Gets the ivory.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Khaki">
            <summary>
            Gets the khaki.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Lavender">
            <summary>
            Gets the lavender.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LavenderBlush">
            <summary>
            Gets the lavender blush.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LawnGreen">
            <summary>
            Gets the lawn green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LemonChiffon">
            <summary>
            Gets the lemon chiffon.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightBlue">
            <summary>
            Gets the light blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightCoral">
            <summary>
            Gets the light coral.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightCyan">
            <summary>
            Gets the light cyan.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightGoldenrodYellow">
            <summary>
            Gets the light goldenrod yellow.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightGreen">
            <summary>
            Gets the light green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightGray">
            <summary>
            Gets the light gray.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightPink">
            <summary>
            Gets the light pink.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightSalmon">
            <summary>
            Gets the light salmon.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightSeaGreen">
            <summary>
            Gets the light sea green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightSkyBlue">
            <summary>
            Gets the light sky blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightSlateGray">
            <summary>
            Gets the light slate gray.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightSteelBlue">
            <summary>
            Gets the light steel blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LightYellow">
            <summary>
            Gets the light yellow.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Lime">
            <summary>
            Gets the lime.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.LimeGreen">
            <summary>
            Gets the lime green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Linen">
            <summary>
            Gets the linen.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Magenta">
            <summary>
            Gets the magenta.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Maroon">
            <summary>
            Gets the maroon.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumAquamarine">
            <summary>
            Gets the medium aquamarine.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumBlue">
            <summary>
            Gets the medium blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumOrchid">
            <summary>
            Gets the medium orchid.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumPurple">
            <summary>
            Gets the medium purple.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumSeaGreen">
            <summary>
            Gets the medium sea green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumSlateBlue">
            <summary>
            Gets the medium slate blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumSpringGreen">
            <summary>
            Gets the medium spring green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumTurquoise">
            <summary>
            Gets the medium turquoise.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MediumVioletRed">
            <summary>
            Gets the medium violet red.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MidnightBlue">
            <summary>
            Gets the midnight blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MintCream">
            <summary>
            Gets the mint cream.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.MistyRose">
            <summary>
            Gets the misty rose.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Moccasin">
            <summary>
            Gets the moccasin.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.NavajoWhite">
            <summary>
            Gets the navajo white.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Navy">
            <summary>
            Gets the navy.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.OldLace">
            <summary>
            Gets the old lace.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Olive">
            <summary>
            Gets the olive.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.OliveDrab">
            <summary>
            Gets the olive drab.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Orange">
            <summary>
            Gets the orange.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.OrangeRed">
            <summary>
            Gets the orange red.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Orchid">
            <summary>
            Gets the orchid.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.PaleGoldenrod">
            <summary>
            Gets the pale goldenrod.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.PaleGreen">
            <summary>
            Gets the pale green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.PaleTurquoise">
            <summary>
            Gets the pale turquoise.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.PaleVioletRed">
            <summary>
            Gets the pale violet red.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.PapayaWhip">
            <summary>
            Gets the papaya whip.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.PeachPuff">
            <summary>
            Gets the peach puff.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Peru">
            <summary>
            Gets the peru.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Pink">
            <summary>
            Gets the pink.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Plum">
            <summary>
            Gets the plum.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.PowderBlue">
            <summary>
            Gets the powder blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Purple">
            <summary>
            Gets the purple.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Red">
            <summary>
            Gets the red.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.RosyBrown">
            <summary>
            Gets the rosy brown.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.RoyalBlue">
            <summary>
            Gets the royal blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SaddleBrown">
            <summary>
            Gets the saddle brown.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Salmon">
            <summary>
            Gets the salmon.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SandyBrown">
            <summary>
            Gets the sandy brown.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SeaGreen">
            <summary>
            Gets the sea green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SeaShell">
            <summary>
            Gets the sea shell.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Sienna">
            <summary>
            Gets the sienna.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Silver">
            <summary>
            Gets the silver.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SkyBlue">
            <summary>
            Gets the sky blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SlateBlue">
            <summary>
            Gets the slate blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SlateGray">
            <summary>
            Gets the slate gray.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Snow">
            <summary>
            Gets the snow.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SpringGreen">
            <summary>
            Gets the spring green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.SteelBlue">
            <summary>
            Gets the steel blue.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Tan">
            <summary>
            Gets the tan.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Teal">
            <summary>
            Gets the teal.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Thistle">
            <summary>
            Gets the thistle.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Tomato">
            <summary>
            Gets the tomato.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Turquoise">
            <summary>
            Gets the turquoise.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Violet">
            <summary>
            Gets the violet.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Wheat">
            <summary>
            Gets the wheat.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.White">
            <summary>
            Gets the white.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.WhiteSmoke">
            <summary>
            Gets the white smoke.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Yellow">
            <summary>
            Gets the yellow.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.YellowGreen">
            <summary>
            Gets the yellow green.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Luminance">
            <summary>
            Gets the color luminance
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Color.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Byte"/> at the specified index.
            </summary>
            <param name="index">Element index.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Graphics.Color"/> struct.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="packetValue">The packet value.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="v">Grayscale tone in the [0, 1] range.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="r">Red component in the [0, 1] range.</param>
            <param name="g">Green component in the [0, 1] range.</param>
            <param name="b">Blue component in the [0, 1] range.</param>
            <param name="a">Alpha component in the [0, 1] range.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="v">Grayscale tone.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="r">Red component.</param>
            <param name="g">Green component.</param>
            <param name="b">Blue component.</param>
            <param name="a">Alpha component.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Color"/> struct.
            </summary>
            <param name="hex">hexadecimal color code</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.op_Addition(WaveEngine.Common.Graphics.Color,WaveEngine.Common.Graphics.Color)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="a">First color.</param>
            <param name="b">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.op_Subtraction(WaveEngine.Common.Graphics.Color,WaveEngine.Common.Graphics.Color)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="a">First color.</param>
            <param name="b">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.op_Multiply(WaveEngine.Common.Graphics.Color,WaveEngine.Common.Graphics.Color)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">First color.</param>
            <param name="b">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.op_Multiply(WaveEngine.Common.Graphics.Color,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">First color.</param>
            <param name="b">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.op_Multiply(System.Single,WaveEngine.Common.Graphics.Color)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="b">First color.</param>
            <param name="a">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.op_Division(WaveEngine.Common.Graphics.Color,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="a">First color.</param>
            <param name="b">Second color.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.op_Equality(WaveEngine.Common.Graphics.Color,WaveEngine.Common.Graphics.Color)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.op_Inequality(WaveEngine.Common.Graphics.Color,WaveEngine.Common.Graphics.Color)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.Lerp(WaveEngine.Common.Graphics.Color@,WaveEngine.Common.Graphics.Color@,System.Single)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.Lerp(WaveEngine.Common.Graphics.Color,WaveEngine.Common.Graphics.Color,System.Single)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.Equals(WaveEngine.Common.Graphics.Color)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.ToUnsignedInt">
            <summary>
            To the unsigned int.
            </summary>
            <returns>Color as unsigned int.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.ToHexColorCode">
            <summary>
            To the hexadecimal code.
            </summary>
            <returns>Color as hexadecimal code with the format #RGBA.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.ToVector3">
            <summary>
            Converts to a Vector3.
            </summary>
            <returns>Color as a Vector3.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.ToVector3(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Converts to a Vector3.
            </summary>
            <param name="vector">Color as a Vector3.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.FromVector3(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Converts Vector3 to Color.
            </summary>
            <param name="vector">Vector3 with color.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.FromVector4(WaveEngine.Common.Math.Vector4@)">
            <summary>
            Converts Vector4 to Color.
            </summary>
            <param name="vector">Vector4 with color.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.ToVector4">
            <summary>
            Converts to a Vector4.
            </summary>
            <returns>Color as a Vector4.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.ToVector4(WaveEngine.Common.Math.Vector4@)">
            <summary>
            Converts to a Vector4.
            </summary>
            <param name="vector">Color as a Vector4.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.FromHsv(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a color from HSV components.
            </summary>
            <param name="h">Hue component in the [0, 1] range.</param>
            <param name="s">Saturation component in the [0, 1] range.</param>
            <param name="v">Value component in the [0, 1] range.</param>
            <param name="a">Alpha component in the [0, 1] range.</param>
            <returns>An ARGB color.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.FromHsl(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a color from HSL components.
            </summary>
            <param name="h">Hue component in the [0, 1] range.</param>
            <param name="s">Saturation component in the [0, 1] range.</param>
            <param name="l">Luminance component in the [0, 1] range.</param>
            <param name="a">Alpha component in the [0, 1] range.</param>
            <returns>An ARGB color.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.FromTemperature(System.Single)">
            <summary>
            Creates a color from a temperature (in Kelvin)
            </summary>
            <param name="temperature">The color temperature in Kelvin</param>
            <returns>An RGB color</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Color.HueToRgb(System.Single,System.Single,System.Single)">
            <summary>
            Obtains an RGB component based on the hue values.
            </summary>
            <param name="p">P component.</param>
            <param name="q">Q component.</param>
            <param name="t">T component.</param>
            <returns>A RGB component.</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.DirectionalLightStruct">
            <summary>
            Struct with aligned data for sending a directional light to the shader.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DirectionalLightStruct.Direction">
            <summary>
            Light direction.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.DirectionalLightStruct.Color">
            <summary>
            Light diffuse color.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.DynamicIndexBuffer">
            <summary>
            Represents an index buffer that will be frequently updated.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DynamicIndexBuffer.#ctor(System.UInt16[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.DynamicIndexBuffer"/> class.
            </summary>
            <param name="indices">The indices.</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.DynamicVertexBuffer">
            <summary>
            Represents a vertex buffer that will be frequently updated.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DynamicVertexBuffer.#ctor(WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.DynamicVertexBuffer"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.Effect">
            <summary>
            Base class for all effects.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Effect.Matrices">
            <summary>
            The matrices
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Effect.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Effect.CurrentTechnique">
            <summary>
            Gets the current technique.
            </summary>
            <value>
            The current technique.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Effect.DefaultValues">
            <summary>
            Default initialization values
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Effect.SetParameters(System.Boolean)">
            <summary>
            Sets the parameters.
            </summary>
            <param name="cached">The efect is cached.</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.IGraphics">
            <summary>
            Interface for graphics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IGraphics.VertexBufferHandles">
            <summary>
            Gets the vertex buffer handles.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IGraphics.IndexBufferHandles">
            <summary>
            Gets the index buffer handles.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IGraphics.TextureManager">
            <summary>
            Gets the texture manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IGraphics.ShaderManager">
            <summary>
            Gets the shader manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IGraphics.RenderTargetManager">
            <summary>
            Gets the render target manager.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.Clear(WaveEngine.Common.Graphics.Color@,WaveEngine.Common.Graphics.ClearFlags,System.Single,System.Byte)">
            <summary>
            Clears the specified color.
            </summary>
            <param name="color">The color.</param>
            <param name="clearFlags">Identify the type of data to clear. <see cref="T:WaveEngine.Common.Graphics.ClearFlags"/> </param>
            <param name="depth">Clear the depth buffer with this value. This value will be clamped between 0 and 1.</param>
            <param name="stencil">Clear the stencil buffer with this value.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.ApplyRenderState(WaveEngine.Common.Graphics.RenderStateDescription,WaveEngine.Common.Graphics.Viewport@,WaveEngine.Common.Graphics.DepthRange@)">
            <summary>
            Apply a new render state on the GPU.
            </summary>
            <param name="description">The renderstate to set.</param>
            <param name="viewport">The viewport</param>
            <param name="depthRange">The depth range</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.InvalidateState">
            <summary>
            Invalidate the current state (force apply next time)
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.DrawVertexBuffer(System.Int32,System.Int32,WaveEngine.Common.Graphics.PrimitiveType,WaveEngine.Common.Graphics.VertexBuffer,System.Int32,WaveEngine.Common.Graphics.IndexBuffer,System.Int32)">
            <summary>
            Draws the vertex buffer.
            </summary>
            <param name="numVertices">The num vertices.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="primitiveType">Type of the primitive.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="vertexOffset">The vertex offset.</param>
            <param name="indexBuffer">The index buffer.</param>
            <param name="indexOffset">The index offset.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.BindVertexBuffer(WaveEngine.Common.Graphics.VertexBuffer)">
            <summary>
            Binds the vertex buffer.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.BindIndexBuffer(WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Binds the index buffer.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.UnsetBuffers">
            <summary>
            Unsets the buffers.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.DestroyVertexBuffer(WaveEngine.Common.Graphics.VertexBuffer)">
            <summary>
            Destroys the vertex buffer.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.DestroyIndexBuffer(WaveEngine.Common.Graphics.IndexBuffer)">
            <summary>
            Destroys the index buffer.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.ToPlatformViewMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Adapt a wave matrix to adapter view matrix
            </summary>
            <param name="source">The source matrix</param>
            <param name="target">Target matrix</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IGraphics.ToShaderMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Adapt a wave matrix to adapter matrix
            </summary>
            <param name="source">The source matrix</param>
            <param name="target">Target matrix</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.IndexBuffer">
            <summary>
            Represents an index buffer.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.IndexBuffer.ConcatenateTriangleStripCount">
            <summary>
            Space Reserved
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.IndexBuffer.data">
            <summary>
            The indices data
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IndexBuffer.Data">
            <summary>
            Gets the Data of the buffer.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IndexBuffer.IndexBufferHandle">
            <summary>
            Gets or sets the Handle of the buffer.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IndexBuffer.IndexCount">
            <summary>
            Gets the number of indices.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IndexBuffer.GetElementCount(WaveEngine.Common.Graphics.PrimitiveType)">
            <summary>
            Gets the number of elements defined in the index array. It depends on primitive type
            </summary>
            <param name="primitiveType">The primitive type</param>
            <returns>The element count</returns>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IndexBuffer.Bound">
            <summary>
            Gets or sets a value indicating whether Buffer is bound.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IndexBuffer.#ctor(System.UInt16[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.IndexBuffer"/> class.
            </summary>
            <param name="indices">The indices.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IndexBuffer.SetData(System.UInt16[])">
            <summary>
            Sets the data.
            </summary>
            <param name="newData">The new data.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IndexBuffer.SetData(System.UInt16[],System.Int32)">
            <summary>
            Sets the data.
            </summary>
            <param name="newData">The data.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IndexBuffer.SetData(System.UInt16[],System.Int32,System.Int32)">
            <summary>
            Sets the data.
            </summary>
            <param name="newData">The data.</param>
            <param name="count">The count.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IndexBuffer.AppendIndexBuffer(WaveEngine.Common.Graphics.IndexBuffer,System.Int32,System.Int32,WaveEngine.Common.Graphics.PrimitiveType)">
            <summary>
            Appends the index buffer.
            </summary>
            <param name="indexBuffer">The index buffer.</param>
            <param name="vertexIndexOffset">The vertex Index offset.</param>
            <param name="startIndex">Start index. If is less than 0, append the index buffer at the end</param>
            <param name="primitiveType">The primitive type</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IndexBuffer.RemoveRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Remove a range of index.
            </summary>
            <param name="startIndex">First index to remove.</param>
            <param name="indexCount">The number of indices to remove. if less than 0, remove the rest of the buffer</param>
            <param name="vertexIndexOffset">Start index. If is less than 0, append the index buffer at the end</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IndexBuffer.GetPrimitiveCount(WaveEngine.Common.Graphics.PrimitiveType,System.Int32,System.Int32)">
            <summary>
            Gets the number of primitives by a specified primitive type
            </summary>
            <param name="primitiveType">The primitive type</param>
            <param name="startOffset">The start offset</param>
            <param name="count">The index count</param>
            <returns>The number of primitives</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.IRenderTargetManager">
            <summary>
            Interface for render target managers.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderTargetManager.DefaultDepthTexture">
            <summary>
            Gets the default depth texture
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderTargetManager.IsMRTsupported">
            <summary>
            Gets a value indicating whether this device has support for MRT (Multi Render Target)
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderTargetManager.IsDepthAsTextureSupported">
            <summary>
            Gets a value indicating whether this device has support for Depth Buffer as texture
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderTargetManager.RenderTargetHandles">
            <summary>
            Gets the dictionary of render target handles.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderTargetManager.DepthTextureHandles">
            <summary>
            Gets the dictionary of depth texture handles.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.IRenderTargetManager.RenderTargetActive">
            <summary>
            Gets a value indicating whether a render target is active.
            </summary>
            <value>
              <c>true</c> if render target is active otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.CreateRenderTarget(System.Int32,System.Int32,WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Creates the render target.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="pixelFormat">The pixel format</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.CreateDepthTexture(System.Int32,System.Int32)">
            <summary>
            Create a Depth Texture
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>The new depth texture</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.DestroyRenderTarget(WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Destroys the render target.
            </summary>
            <param name="renderTarget">The render target to remove.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.DestroyDepthTexture(WaveEngine.Common.Graphics.DepthTexture)">
            <summary>
            Destroys the depth texture.
            </summary>
            <param name="depthTexture">The depth texture to remove.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.SetRenderTarget(WaveEngine.Common.Graphics.DepthTexture,WaveEngine.Common.Graphics.RenderTarget[])">
            <summary>
            Sets the render target.
            </summary>
            <param name="depthTexture">The depthTexture</param>
            <param name="renderTarget">The render target.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.TargetFromHandle``1(System.UInt32)">
            <summary>
            Targets from handle.
            </summary>
            <typeparam name="T">Type of the render target.</typeparam>
            <param name="handle">The handle.</param>
            <returns>The render target.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.DepthFromHandle``1(System.UInt32)">
            <summary>
            Depth from handle.
            </summary>
            <typeparam name="T">Type of the depth texture.</typeparam>
            <param name="handle">The handle.</param>
            <returns>The Depth.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.PixelFormatSupported(WaveEngine.Common.Graphics.PixelFormat)">
            <summary>
            Checks if the specified pixel format is supported by this device
            </summary>
            <param name="pixelFormat">The pixel format</param>
            <returns>If the pixel is supported</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IRenderTargetManager.GetData(WaveEngine.Common.Graphics.RenderTarget)">
            <summary>
            Gets the rendertarget data.
            </summary>
            <param name="renderTarget">RenderTarget object</param>
            <returns>Buffer of the data</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.IShaderManager">
            <summary>
            Interface for shader managers.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IShaderManager.CreateTechnique(WaveEngine.Common.Graphics.Effect,System.String,System.Byte[],System.Byte[],WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Creates the technique.
            </summary>
            <param name="parentEffect">The parent effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <param name="vsSource">The vs source.</param>
            <param name="psSource">The ps source.</param>
            <param name="vbLayout">The vb layout.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IShaderManager.CreateTechnique(WaveEngine.Common.Graphics.Effect,System.String,System.Byte[],System.Byte[],System.Byte[],WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[],System.String[])">
            <summary>
            Creates the technique.
            </summary>
            <param name="parentEffect">The parent effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <param name="vsSource">The vs source.</param>
            <param name="psSource">The ps source.</param>
            <param name="gsSource">The gs source.</param>
            <param name="vbLayout">The vb layout.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
            <param name="geometryShaderSymbols">The geometry shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IShaderManager.CreateTechnique(WaveEngine.Common.Graphics.Effect,System.String,System.String,System.String,WaveEngine.Common.Graphics.VertexBufferFormat,System.String[],System.String[])">
            <summary>
            Creates the technique.
            </summary>
            <param name="parentEffect">The parent effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <param name="vsSource">The vs source.</param>
            <param name="psSource">The ps source.</param>
            <param name="vbLayout">The vb layout.</param>
            <param name="vertexShaderSymbols">The technique preprocessor symbols</param>
            <param name="pixelShaderSymbols">The pixel shader technique preprocessor symbols</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IShaderManager.TechniqueExists(WaveEngine.Common.Graphics.Effect,System.String)">
            <summary>
            Techniques the exists.
            </summary>
            <param name="effect">The effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <returns>true if the technique exists.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IShaderManager.GetShaderTechniqueFormat(WaveEngine.Common.Graphics.Effect,System.String)">
            <summary>
            Return the shaderTechnique.
            </summary>
            <param name="effect">The effect.</param>
            <param name="techniqueName">Name of the technique.</param>
            <returns>The vertex format associated to the technique.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IShaderManager.ApplyEffect(WaveEngine.Common.Graphics.Effect)">
            <summary>
            Applies the pass.
            </summary>
            <param name="shader">The shader.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.IShaderManager.SetTexture(WaveEngine.Common.Graphics.Texture,System.Int32,WaveEngine.Common.Graphics.SamplerStateDescription,WaveEngine.Common.Graphics.TextureSlotUsage)">
            <summary>
            Sets the texture.
            </summary>
            <param name="texture">The texture.</param>
            <param name="slot">The slot.</param>
            <param name="samplerState">The sampler state used to this texture.</param>
            <param name="textureUsage">The texture usage</param>
        </member>
        <member name="T:WaveEngine.Common.Graphics.ITextureManager">
            <summary>
            Interface for texture managers.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.ITextureManager.UploadTexture(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Uploads the texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.ITextureManager.DestroyTexture(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Destroys the texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.ITextureManager.GetData(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Gets the texture data.
            </summary>
            <param name="texture">Texture object</param>
            <returns>Buffer of the data</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.ITextureManager.SetData(WaveEngine.Common.Graphics.Texture,System.Byte[])">
            <summary>
            Fill a texture with the data byte array passes as parameter.
            </summary>
            <param name="texture">Texture to update.</param>
            <param name="data">The byte array.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.ITextureManager.SetData(WaveEngine.Common.Graphics.Texture,System.IntPtr,System.Int32)">
            <summary>
            Fill a texture using a data pointer passes by parameters.
            </summary>
            <param name="texture">Texture to update.</param>
            <param name="dataPointer">The data pointer.</param>
            <param name="sizeInBytes">Amout of bytes to copy.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.ITextureManager.TextureFromHandle``1(System.UInt32)">
            <summary>
            Textures from handle.
            </summary>
            <typeparam name="T">Type of the texture.</typeparam>
            <param name="handle">The handle.</param>
            <returns>The texture.</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.MeshType">
            <summary>
            Enumerate the vertex types
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.MeshType.StaticMesh">
            <summary>
            This is a static mesh
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.MeshType.SkinnedMesh">
            <summary>
            This is a skinned mesh
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.Mesh">
            <summary>
            Represents a base mesh class.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.VertexBuffer">
            <summary>
            Vertex buffer that holds the vertices.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.IndexBuffer">
            <summary>
            Index buffer
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.VertexOffset">
            <summary>
            Starting vertex offset.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.NumVertices">
            <summary>
            Number of vertices.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.IndexOffset">
            <summary>
            Starting index offset.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.NumPrimitives">
            <summary>
            Number of primitives.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.PrimitiveType">
            <summary>
            The primitive type.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.Name">
            <summary>
            Name of the mesh.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.BoundingBox">
            <summary>
            Mesh bounding box
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.DisableBatch">
            <summary>
            Disable batching for this mesh
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.ZOrder">
            <summary>
            The z-order value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Mesh.MaterialIndex">
            <summary>
            Material index
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Mesh.MeshType">
            <summary>
            Gets the mesh type
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Mesh.#ctor(WaveEngine.Common.Graphics.VertexBuffer,WaveEngine.Common.Graphics.IndexBuffer,WaveEngine.Common.Graphics.PrimitiveType)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Mesh" /> class.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="indexBuffer">The index buffer.</param>
            <param name="primitiveType">The primitive type.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Mesh.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,WaveEngine.Common.Graphics.VertexBuffer,WaveEngine.Common.Graphics.IndexBuffer,WaveEngine.Common.Graphics.PrimitiveType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Mesh" /> class.
            </summary>
            <param name="vertexOffset">The vertex offset.</param>
            <param name="numVertices">The num vertices.</param>
            <param name="startIndex">The start index.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="indexBuffer">The index buffer.</param>
            <param name="primitiveType">The primitive type.</param>
            <param name="materialID">The material ID.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Mesh.WriteMesh(WaveEngine.Common.Graphics.Mesh,System.IO.BinaryWriter)">
            <summary>
            Write a mesh into the binary writer
            </summary>
            <param name="mesh">The mesh</param>
            <param name="writer">The binary writer</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Mesh.ReadMesh(System.IO.BinaryReader)">
            <summary>
            Read mesh from a binary reader
            </summary>
            <param name="reader">The binary reader</param>
            <returns>The mesh</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.PixelFormat">
            <summary>
            Pixel format type.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R8G8B8">
            <summary>
            24-bit RGB.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R8G8B8A8">
            <summary>
            32-bit RGBA.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.B8G8R8A8">
            <summary>
            32 bits BGRA
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R8G8BA8_sRGB">
            <summary>
            32-bits sRGB
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.DXT1">
            <summary>
            DXT 1.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.DXT5">
            <summary>
            DXT 5.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.PVRTC2BPP">
            <summary>
            PVRTC 2bpp.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.PVRTC4BPP">
            <summary>
            PVRTC 4bpp.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.ETC1RGB8">
            <summary>
            ETC 1.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R8">
            <summary>
            Only red channel 8 bits.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R8G8">
            <summary>
            Red and green channels 8 bits
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R16">
            <summary>
            Only red channel 16 bits.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.A8">
            <summary>
            Alpha only.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R5G6B5">
            <summary>
            16-bit RGB.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R4G4B4A4">
            <summary>
            16-bit RGBA.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.B4R4G4A4">
            <summary>
            16-bit BGRA.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R16G16B16A16_FLOAT">
            <summary>
            16-bits floating points per channel
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.R32G32B32A32_FLOAT">
            <summary>
            32-bits floating points per channel
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PixelFormat.D24S8">
            <summary>
            24-bits depth and 8 bits stencil
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.PointLightStruct">
            <summary>
            Struct with aligned data for sending a point light to the shader.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PointLightStruct.Position">
            <summary>
            Light position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PointLightStruct.Attenuation">
            <summary>
            Light Attenuation.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PointLightStruct.Color">
            <summary>
            Light diffuse color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PointLightStruct.Falloff">
            <summary>
            Light range.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.PrimitiveType">
            <summary>
            Type of primitive.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PrimitiveType.TriangleList">
            <summary>
            Triangle list.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PrimitiveType.TriangleStrip">
            <summary>
            Triangle strip.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PrimitiveType.LineList">
            <summary>
            Line list.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PrimitiveType.LineStrip">
            <summary>
            Line strip.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.PrimitiveType.PointList">
            <summary>
            Point list
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.DepthTexture">
            <summary>
            This class represents a render target.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.DepthTexture"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthTexture.Unload">
            <summary>
            Unloads this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.DepthTexture.GetData">
            <summary>
            Gets the texture data.
            </summary>
            <returns>Buffer of the data</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.RenderTarget">
            <summary>
            This class represents a render target.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.RenderTarget.DepthTexture">
            <summary>
            Gets or sets the depth texture of the framebuffer
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RenderTarget.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.RenderTarget"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RenderTarget.Unload">
            <summary>
            Unloads this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.RenderTarget.GetData">
            <summary>
            Gets the texture data.
            </summary>
            <returns>Buffer of the data</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.ShaderMatrices">
            <summary>
            Stores all the matrices needed by a shader.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ShaderMatrices.WorldViewProj">
            <summary>
            World * View * Projection matrix.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ShaderMatrices.World">
            <summary>
            World matrix.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ShaderMatrices.WorldInverseTranspose">
            <summary>
            World inverse transpose matrix.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ShaderMatrices.TextCoordTransform">
            <summary>
            Text Coords transform.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.ShaderType">
            <summary>
            Type of shader.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ShaderType.BasicEffect">
            <summary>
            Basic effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ShaderType.EnvironmentMapEffect">
            <summary>
            Environment map effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ShaderType.SpriteBatchEffect">
            <summary>
            Sprite batch effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.ShaderType.DualTextureEffect">
            <summary>
            Dual texture effect.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.SkinnedMesh">
            <summary>
            Represents a mesh with skinned vertices.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedMesh.morphTargetSlots">
            <summary>
            The morph targets buffers array
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.SkinnedMesh.MeshType">
            <summary>
            Gets the mesh type
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.SkinnedMesh.MorphTargetSlots">
            <summary>
            Gets the morph targets array
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.SkinnedMesh.SkinnedVertexBuffer">
            <summary>
            Gets the skinned vertex buffer
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedMesh.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,WaveEngine.Common.Graphics.SkinnedVertexBuffer,WaveEngine.Common.Graphics.IndexBuffer,WaveEngine.Common.Graphics.PrimitiveType,System.Int32,WaveEngine.Common.Graphics.MorphTargetSlot[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.SkinnedMesh"/> class.
            </summary>
            <param name="vertexOffset">The vertex offset.</param>
            <param name="numVertices">The num vertices.</param>
            <param name="startIndex">The start index.</param>
            <param name="primitiveCount">The primitive count.</param>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="indexBuffer">The index buffer.</param>
            <param name="primitiveType">The primitive type.</param>
            <param name="materialID">The material index.</param>
            <param name="morphTargetSlots">The morph targets slots</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedMesh.#ctor(WaveEngine.Common.Graphics.SkinnedVertexBuffer,WaveEngine.Common.Graphics.IndexBuffer,WaveEngine.Common.Graphics.PrimitiveType,WaveEngine.Common.Graphics.MorphTargetSlot[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.SkinnedMesh"/> class.
            </summary>
            <param name="vertexBuffer">The vertex buffer.</param>
            <param name="indexBuffer">The index buffer.</param>
            <param name="primitiveType">The primitive type.</param>
            <param name="morphTargetSlots">The morph targets slots</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedMesh.SetMorphTargetWeights(System.Single[],System.Boolean,System.Boolean)">
            <summary>
            Set morph targets weights
            </summary>
            <param name="weights">The weights</param>
            <param name="morphNormals">if morph applies to normal</param>
            <param name="morphTangentSpace">if morph applies to tangent space</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedMesh.SetBones(WaveEngine.Common.Math.Matrix[],WaveEngine.Common.Shared.Graphics.SkinQuality,System.Single[],System.Boolean,System.Boolean)">
            <summary>
            Sets the bones.
            </summary>
            <param name="bones">The bones.</param>
            <param name="skinQuality">The skin quality</param>
            <param name="morphWeights">The weights</param>
            <param name="skinNormals">if set to <c>true</c> [skin normals].</param>
            <param name="skinTangentSpace">skin tangent space</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedMesh.Clone">
            <summary>
            Clone this mesh
            </summary>
            <returns>The skinned mesh</returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.SkinnedVertexBuffer">
            <summary>
            Represents a special type of vertex buffer for skinned meshes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.WeightThreshold">
            <summary>
            Minimum weight threshold.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.MatrixStride">
            <summary>
            Matrix stride
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.positionProperty">
            <summary>
            The position vertex element property
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.normalProperty">
            <summary>
            The normal vertex element property
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.binormalProperty">
            <summary>
            The binormal vertex element property
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.tangentProperty">
            <summary>
            The tangent vertex element property
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.blendIndicesProperty">
            <summary>
            The blend indices vertex element property
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.blendWeightProperty">
            <summary>
            The blend weights vertex element property
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.positionData">
            <summary>
            Init position pointer data
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.refPositionData">
            <summary>
            Init ref position pointer data
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.refSkinPositionData">
            <summary>
            Init ref position pointer data
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.normalData">
            <summary>
            Init normal pointer data
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.refNormalData">
            <summary>
            Init ref normal pointer data
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.binormalData">
            <summary>
            Init binormal pointer data
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.refBinormalData">
            <summary>
            Init ref binormal pointer data
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.tangentData">
            <summary>
            Init tangent pointer data
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.refTangentData">
            <summary>
            Init ref tangent pointer data
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.blendIndicesData">
            <summary>
            Init blend indices pointer data
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.blendWeightData">
            <summary>
            Init blend weight pointer data
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.refBlendWeightData">
            <summary>
            Init blend weight pointer data
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.skinQuality">
            <summary>
            The skin quality
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SkinnedVertexBuffer.refreshWeights">
            <summary>
            Refresh weights
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.SkinnedVertexBuffer.ReferenceVertexBuffer">
            <summary>
            Gets the reference vertex buffer
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedVertexBuffer.#ctor(WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.SkinnedVertexBuffer"/> class.
            </summary>
            <param name="vertexFormat">The vertex buffer format.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedVertexBuffer.#ctor(WaveEngine.Common.Graphics.SkinnedVertexBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.SkinnedVertexBuffer"/> class.
            </summary>
            <param name="referenceVertexBuffer">The reference vertex buffer.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedVertexBuffer.SkinVertices(WaveEngine.Common.Math.Matrix*,WaveEngine.Common.Shared.Graphics.SkinQuality,WaveEngine.Common.Graphics.MorphTargetSlot[],System.Single[],System.Boolean,System.Boolean)">
            <summary>
            Skins the vertices.
            </summary>
            <param name="bones">The bones.</param>
            <param name="quality">The skin quality</param>
            <param name="morphTargetSlots">The morph target slots</param>
            <param name="morphWeights">The weights</param>
            <param name="skinNormals">if set to <c>true</c> [skin normals].</param>
            <param name="skinTangentSpace">skin the tangent space properties (binormal, tangent)</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedVertexBuffer.CacheMorphProperties">
            <summary>
            Cache morph properties
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedVertexBuffer.RefreshSkinWeights">
            <summary>
            Refresh skin weights
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.SkinnedVertexBuffer.CacheVertexProperties">
            <summary>
            Cache all vertex buffer properties
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.LightStruct">
            <summary>
            Struct with aligned data for sending a light to the shader.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.LightStruct.Position">
            <summary>
            Light position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.LightStruct.ConeAngle">
            <summary>
            The cone angle
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.LightStruct.Color">
            <summary>
            Light diffuse color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.LightStruct.LightRange">
            <summary>
            Light range.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.LightStruct.Direction">
            <summary>
            The direction
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.LightStruct.Intensity">
            <summary>
            Sport exponent
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.SpotLightStruct">
            <summary>
            Struct with aligned data for sending a spot light to the shader.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpotLightStruct.Position">
            <summary>
            Light position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpotLightStruct.ConeAngle">
            <summary>
            The cone angle
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpotLightStruct.Color">
            <summary>
            Light diffuse color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpotLightStruct.Falloff">
            <summary>
            Light range.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpotLightStruct.Direction">
            <summary>
            The direction
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.SpriteEffects">
            <summary>
            Specifies a sprite effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpriteEffects.None">
            <summary>
            No effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpriteEffects.FlipHorizontally">
            <summary>
            Horizontal flip.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpriteEffects.FlipVertically">
            <summary>
            Vertical flip.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.SpriteEffects.FontSprite">
            <summary>
            Sprite is a font.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.Texture">
            <summary>
            Represents the base class for textures.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.AssetPath">
            <summary>
            Gets or sets the asset path.
            </summary>
            <value>
            The asset path.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.TextureHandle">
            <summary>
            Gets or sets the texture handle.
            </summary>
            <value>
            The texture handle.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.NativePointer">
            <summary>
            Gets or sets the texture native pointer.
            </summary>
            <value>
            On Direct3D-like devices this returns a pointer to the base texture type
            (IDirect3DBaseTexture9 on D3D9, ID3D11Resource on D3D11, ID3D12Resource on D3D12).
            On OpenGL-like devices the GL texture "name" is returned; cast the pointer to integer type to get it.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.Levels">
            <summary>
            Gets or sets the levels.
            </summary>
            <value>
            The levels.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.Usage">
            <summary>
            Gets or sets the texture usage. <see cref="T:WaveEngine.Common.Graphics.TextureUsage"/>
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.CpuAccess">
            <summary>
            Gets or sets the Cpu Access mode. <see cref="T:WaveEngine.Common.Graphics.TextureCpuAccess"/>
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.Faces">
            <summary>
            Gets or sets the faces.
            </summary>
            <value>
            The faces.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.Texture.IsUploaded">
            <summary>
            Gets or sets a value indicating whether this texture is uploaded into the graphic device.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.Texture.SamplerState">
            <summary>
            Gets or sets the sampler state
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Texture.Unload">
            <summary>
            Unloads this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Texture.GetData">
            <summary>
            Gets the texture data.
            </summary>
            <returns>Buffer of the data</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Texture.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.Texture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.Texture"/> class
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.TextureType">
            <summary>
            Texture type.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureType.Texture2D">
            <summary>
            2D texture.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureType.TextureCube">
            <summary>
            Cubemap texture.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureType.TextureVideo">
            <summary>
            Video texture.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexBuffer">
            <summary>
            Represents a vertex buffer of a variable type.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexBuffer.bufferData">
            <summary>
            The buffer data
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBuffer.Data">
            <summary>
            Gets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBuffer.VertexBufferHandle">
            <summary>
            Gets or sets the vertex buffer handle.
            </summary>
            <value>
            The vertex buffer handle.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBuffer.VertexCount">
            <summary>
            Gets the vertex count.
            </summary>
            <value>
            The vertex count.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBuffer.DataSize">
            <summary>
            Gets the vertex buffer size in memory (in bytes).
            </summary>
            <value>
            The vertex buffer size in memory.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBuffer.Bound">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WaveEngine.Common.Graphics.VertexBuffer"/> is bound.
            </summary>
            <value>
              <c>true</c> if bound; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBuffer.BindGeneration">
            <summary>
            Gets or sets the bind generation.
            </summary>
            <value>The bind generation.</value>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBuffer.VertexBufferFormat">
            <summary>
            Gets the vertex buffer format.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.#ctor(WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexBuffer"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Common.Graphics.VertexBuffer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.SetData``1(``0[])">
            <summary>
            Sets the data.
            </summary>
            <typeparam name="T">Vertex type.</typeparam>
            <param name="data">The data.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.SetData``1(``0[],System.Int32)">
            <summary>
            Sets the data.
            </summary>
            <typeparam name="T">Vertex type.</typeparam>
            <param name="data">The data.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.SetData``1(``0[],System.Int32,System.Int32)">
            <summary>
            Sets the data.
            </summary>
            <typeparam name="T">Vertex type.</typeparam>
            <param name="data">The data.</param>
            <param name="count">The count.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.ApplyTransform(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Graphics.VertexElementUsage,System.Int32,System.Int32)">
            <summary>
            Transform all vertices of the vertex buffer
            </summary>
            <param name="transform">The transform.</param>
            <param name="attribute">The attribute to transform.</param>
            <param name="count">Number of vertex to transform.</param>
            <param name="startIndex">Vertex index to start the transform.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.HasVertexElementUsage(WaveEngine.Common.Graphics.VertexElementUsage)">
            <summary>
            Find a vertexElement into vertexFormat
            </summary>
            <param name="vertexElementUsage">Vertex element</param>
            <returns>if vertexElement is used or not</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.GetVertexElementByUsage(WaveEngine.Common.Graphics.VertexElementUsage,WaveEngine.Common.Graphics.VertexElementProperties@)">
            <summary>
            Find a vertexElement into vertexFormat
            </summary>
            <param name="vertexElementUsage">Vertex element</param>
            <param name="vertexProperties">The vertex properties</param>
            <returns>if vertexElement is used or not</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.GetVertexPropertyAccessor``1(WaveEngine.Common.Graphics.VertexElementUsage,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy vertex properties to an array
            </summary>
            <typeparam name="T">The property type</typeparam>
            <param name="attributeUsage">The vertex attribute usage</param>
            <param name="attributeUsageIndex">The vertex attribute usage index</param>
            <param name="count">The number of elements to copy</param>
            <param name="startIndex">The start vertex index to copy</param>
            <returns>The buffer accessor</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.AppendBuffer(WaveEngine.Common.Graphics.VertexBuffer,WaveEngine.Common.Math.Matrix,System.Int32)">
            <summary>
            Appends an existing buffer and apply a transform to each vertex
            </summary>
            <param name="vertexBuffer">The mesh vertex buffer.</param>
            <param name="transform">The transform.</param>
            <param name="startVertexIndex">The start vertex to append the buffer (-1 to append at the end of the buffer)</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove a range of vertex.
            </summary>
            <param name="startVertexIndex">First vertex index to remove.</param>
            <param name="vertexCount">The number of vertex to remove. If less than 0 remove the rest of the buffer</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.CopyData``1(``0[],System.Int32,System.Int32)">
            <summary>
            Copies the data.
            </summary>
            <typeparam name="T">Vertex type.</typeparam>
            <param name="data">The data.</param>
            <param name="count">The count.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBuffer.FreePointer">
            <summary>
            Frees the pointer.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexBufferFormat">
            <summary>
            Represents the format of a vertex buffer.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexBufferFormat.cachedHashCode">
            <summary>
            Cashed hash code of the format, to avoid the generation each frame.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBufferFormat.VertexElements">
            <summary>
            Gets the vertex elements.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexBufferFormat.Stride">
            <summary>
            Gets the stride.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.#ctor(WaveEngine.Common.Graphics.VertexElementProperties[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexBufferFormat"/> class.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.FindVertexElementIndexByUsage(WaveEngine.Common.Graphics.VertexElementUsage)">
            <summary>
            Find vertex element index by element usage
            </summary>
            <param name="usage">The vertex element usage.</param>
            <returns>vertex element index, or -1 if is not present.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.FindVertexElementIndexByUsage(WaveEngine.Common.Graphics.VertexElementUsage,System.Int32)">
            <summary>
            Find vertex element index by element usage
            </summary>
            <param name="usage">The vertex element usage.</param>
            <param name="usageIndex">The vertex element usage index.</param>
            <returns>vertex element index, or -1 if is not present.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.Equals(WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.op_Equality(WaveEngine.Common.Graphics.VertexBufferFormat,WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.op_Inequality(WaveEngine.Common.Graphics.VertexBufferFormat,WaveEngine.Common.Graphics.VertexBufferFormat)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexBufferFormat.GenerateHashCode">
            <summary>
            Generate a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexElementFormat">
            <summary>
            Vertex element format.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.Single">
            <summary>
            One float.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.Vector2">
            <summary>
            2-float vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.Vector3">
            <summary>
            3-float vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.Vector4">
            <summary>
            4-float vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.Color">
            <summary>
            32-bit color.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.Byte4">
            <summary>
            4-byte vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.Short2">
            <summary>
            2-short vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.Short4">
            <summary>
            4-short vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.NormalizedShort2">
            <summary>
            2-short vector, normalized.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.NormalizedShort4">
            <summary>
            4-short vector, normalized.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.HalfVector2">
            <summary>
            2 16-bit float vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementFormat.HalfVector4">
            <summary>
            4 16-bit float vector.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VertexElementProperties">
            <summary>
            Represents a vertex element.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementProperties.Offset">
            <summary>
            Property offset.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementProperties.Format">
            <summary>
            Property format.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementProperties.Usage">
            <summary>
            Property usage.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.VertexElementProperties.UsageIndex">
            <summary>
            Property usage index.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VertexElementProperties.Size">
            <summary>
            Gets the size.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexElementProperties.#ctor(System.Int32,WaveEngine.Common.Graphics.VertexElementFormat,WaveEngine.Common.Graphics.VertexElementUsage,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VertexElementProperties"/> struct.
            </summary>
            <param name="offset">The offset.</param>
            <param name="format">The format.</param>
            <param name="usage">The usage.</param>
            <param name="usageIndex">Index of the usage.</param>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexElementProperties.Equals(WaveEngine.Common.Graphics.VertexElementProperties)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexElementProperties.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexElementProperties.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexElementProperties.op_Equality(WaveEngine.Common.Graphics.VertexElementProperties,WaveEngine.Common.Graphics.VertexElementProperties)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VertexElementProperties.op_Inequality(WaveEngine.Common.Graphics.VertexElementProperties,WaveEngine.Common.Graphics.VertexElementProperties)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Graphics.TextureSlotUsage">
            <summary>
            Specifies the usage of the texture in shaders
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureSlotUsage.PixelShader">
            <summary>
            This texture will be used in pixel shader
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureSlotUsage.VertexShader">
            <summary>
            This texture will be used in vertex shader
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureSlotUsage.GeometryShader">
            <summary>
            This texture will be used in vertex shader
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Graphics.TextureSlotUsage.All">
            <summary>
            This texture will be used in pixel and vertex shader
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Graphics.VideoTexture">
            <summary>
            This class represents a video texture
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Graphics.VideoTexture.TextCoordTransform">
            <summary>
            Gets or sets texture coord transform (used in VideoPlayer and CameraCapture)
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VideoTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Graphics.VideoTexture"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VideoTexture.Unload">
            <summary>
            Unloads this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Graphics.VideoTexture.GetData">
            <summary>
            Gets the texture data.
            </summary>
            <returns>Buffer of the data</returns>
        </member>
        <member name="T:WaveEngine.Common.Shared.Graphics.SkinQuality">
            <summary>
            The quality of the skin.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.SkinQuality._1Joint">
            <summary>
            Only 1 joint is affected by the vertice.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.SkinQuality._2Joints">
            <summary>
            2 joints are affected by the vertice.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.SkinQuality._4Joints">
            <summary>
            4 joints are affected by the vertice.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Shared.Graphics.ModelType">
            <summary>
            The type of the model.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Custom">
            <summary>
            Custom model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Capsule">
            <summary>
            Capsule model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Cone">
            <summary>
            Cone model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Cube">
            <summary>
            Cube model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Cylinder">
            <summary>
            Cylinder model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Plane">
            <summary>
            Plane model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Pyramid">
            <summary>
            Pyramid model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Sphere">
            <summary>
            Sphere model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Teapot">
            <summary>
            Teapot model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Shared.Graphics.ModelType.Torus">
            <summary>
            Torus model
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Helpers.BufferAccessor">
            <summary>
            Buffer accessor
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.BufferAccessor.stride">
            <summary>
            The element stride
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.BufferAccessor.count">
            <summary>
            The number of elements
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.BufferAccessor.pointer">
            <summary>
            The start pointer
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.BufferAccessor.Stride">
            <summary>
            Gets the element stride
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.BufferAccessor.Count">
            <summary>
            Gets the number of elements
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.BufferAccessor.Pointer">
            <summary>
            Gets the pointer
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BufferAccessor.#ctor(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.BufferAccessor"/> class.
            </summary>
            <param name="pointer">The pointer</param>
            <param name="count">The count</param>
            <param name="stride">The stride</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BufferAccessor.GetFloat(System.Int32)">
            <summary>
            Gets a float
            </summary>
            <param name="index">The index</param>
            <returns>The vector2</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BufferAccessor.GetVector2(System.Int32)">
            <summary>
            Gets a Vector3
            </summary>
            <param name="index">The index</param>
            <returns>The vector2</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BufferAccessor.GetVector3(System.Int32)">
            <summary>
            Gets a Vector3
            </summary>
            <param name="index">The index</param>
            <returns>The vector3</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BufferAccessor.GetVector4(System.Int32)">
            <summary>
            Gets a Vector4
            </summary>
            <param name="index">The index</param>
            <returns>The vector4</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BufferAccessor.GetColor(System.Int32)">
            <summary>
            Gets a Color
            </summary>
            <param name="index">The index</param>
            <returns>The color</returns>
        </member>
        <member name="T:WaveEngine.Common.Helpers.BufferAccessorColor">
            <summary>
            Buffer accessor
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.BufferAccessorColor.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">Touch index.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BufferAccessorColor.#ctor(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.BufferAccessorColor"/> class.
            </summary>
            <param name="pointer">The pointer</param>
            <param name="count">The count</param>
            <param name="stride">The stride</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.BufferAccessorFloat">
            <summary>
            Buffer accessor
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.BufferAccessorFloat.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">Touch index.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BufferAccessorFloat.#ctor(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.BufferAccessorFloat"/> class.
            </summary>
            <param name="pointer">The pointer</param>
            <param name="count">The count</param>
            <param name="stride">The stride</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.BufferAccessorVector2">
            <summary>
            Buffer accessor
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.BufferAccessorVector2.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">Touch index.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BufferAccessorVector2.#ctor(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.BufferAccessorVector2"/> class.
            </summary>
            <param name="pointer">The pointer</param>
            <param name="count">The count</param>
            <param name="stride">The stride</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.BufferAccessorVector3">
            <summary>
            Buffer accessor
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.BufferAccessorVector3.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">Touch index.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BufferAccessorVector3.#ctor(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.BufferAccessorVector3"/> class.
            </summary>
            <param name="pointer">The pointer</param>
            <param name="count">The count</param>
            <param name="stride">The stride</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.BufferAccessorVector4">
            <summary>
            Buffer accessor
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.BufferAccessorVector4.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">Touch index.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BufferAccessorVector4.#ctor(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.BufferAccessorVector4"/> class.
            </summary>
            <param name="pointer">The pointer</param>
            <param name="count">The count</param>
            <param name="stride">The stride</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.BufferAccessor`1">
            <summary>
            Buffer accessor
            </summary>
            <typeparam name="T">The access type</typeparam>
        </member>
        <member name="P:WaveEngine.Common.Helpers.BufferAccessor`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">Touch index.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BufferAccessor`1.#ctor(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.BufferAccessor`1"/> class.
            </summary>
            <param name="pointer">The pointer</param>
            <param name="count">The count</param>
            <param name="stride">The stride</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.ExecutionState">
            <summary>
            The executon state
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.ExecutionState.NonInitialized">
            <summary>
            Non Initialized State
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.ExecutionState.Running">
            <summary>
            Running State
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.ExecutionState.Paused">
            <summary>
            Paused State
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Helpers.IPausable">
            <summary>
            Interface for pausable objects.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.IPausable.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The asset path.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Helpers.IPausable.Initialize">
            <summary>
            Initialize the object.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.IPausable.Pause">
            <summary>
            Pause the object
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.IPausable.Resume">
            <summary>
            Pause the object
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Helpers.PriorityQueue`1">
            <summary>
            An implementation of a min-Priority Queue using a heap.  Has O(1) .Contains()!
            See https://bitbucket.org/BlueRaja/high-speed-priority-queue-for-c/wiki/Getting%20Started for more information
            </summary>
            <typeparam name="T">The values in the queue.  Must implement the PriorityQueueNode interface</typeparam>
        </member>
        <member name="F:WaveEngine.Common.Helpers.PriorityQueue`1.numNodes">
            <summary>
            The num nodes
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.PriorityQueue`1.nodes">
            <summary>
            The nodes
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.PriorityQueue`1.numNodesEverEnqueued">
            <summary>
            The num nodes ever enqueued
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.PriorityQueue`1.Count">
            <summary>
            Gets the number of nodes.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Helpers.PriorityQueue`1.First">
            <summary>
            Gets the head of the queue, without removing it (use Dequeue() for that).  O(1)
            </summary>
            <value>
            Returns the head of the queue, without removing it (use Dequeue() for that).  O(1)
            </value>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.PriorityQueue`1"/> class.
            </summary>
            <param name="maxNodes">The max nodes ever allowed to be enqueued (going over this will cause an exception)</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.Enqueue(`0,System.Double)">
            <summary>
            Enqueues the specified node.
            </summary>
            <param name="node">The node.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.Dequeue">
            <summary>
            Removes the head of the queue (node with highest priority; ties are broken by order of insertion), and returns it.  O(log n)
            </summary>
            <returns>The dequeued node</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.Remove(`0)">
            <summary>
            Removes a node from the queue.  Note that the node does not need to be the head of the queue.  O(log n)
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.Contains(`0)">
            <summary>
            Determines whether [contains] [the specified node].
            </summary>
            <param name="node">The node.</param>
            <returns>True if contains the node, false in other case</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.Swap(`0,`0)">
            <summary>
            Swaps the specified node1.
            </summary>
            <param name="node1">The node1.</param>
            <param name="node2">The node2.</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.CascadeUp(`0)">
            <summary>
            Cascades up.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.CascadeDown(`0)">
            <summary>
            Cascades down.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.HasHigherPriority(`0,`0)">
            <summary>
            Returns true if 'higher' has higher priority than 'lower', false otherwise.
            Note that calling HasHigherPriority(node, node) (ie. both arguments the same node) will return false
            </summary>
            <param name="higher">The higher.</param>
            <param name="lower">The lower.</param>
            <returns>True if t has higher priority than lower</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PriorityQueue`1.OnNodeUpdated(`0)">
            <summary>
            Called when [node updated].
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.PriorityQueueNode">
            <summary>
            Priority Queue Node class
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.PriorityQueueNode.Priority">
            <summary>
            Gets or sets the Priority to insert this node at.  Must be set BEFORE adding a node to the queue.
            </summary>
            <value>
            The priority.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Helpers.PriorityQueueNode.InsertionIndex">
            <summary>
            Gets or sets the  order the node was inserted in
            <b>Used by the priority queue - do not edit this value.</b>
            </summary>
            <value>
            The index of the insertion.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Helpers.PriorityQueueNode.QueueIndex">
            <summary>
            Gets or sets the current position in the queue
            <b>Used by the priority queue - do not edit this value.</b>
            </summary>
            <value>
            The index of the queue.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Helpers.BoolEventArgs">
            <summary>
            Event arguments for a bool value.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.BoolEventArgs.Value">
            <summary>
            Gets a value indicating whether this <see cref="T:WaveEngine.Common.Helpers.BoolEventArgs"/> is value.
            </summary>
            <value>
              <c>true</c> if value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BoolEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.BoolEventArgs"/> class.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.CheckDictionary`2">
            <summary>
            Dictionary implementation to detect when the collection is modified
            </summary>
            <typeparam name="K">Key type</typeparam>
            <typeparam name="V">Value type</typeparam>
        </member>
        <member name="F:WaveEngine.Common.Helpers.CheckDictionary`2.internalDictionary">
            <summary>
            The internal dictionary
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.CheckDictionary`2.changed">
            <summary>
            Indicate if the collection is changed
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.CheckDictionary`2.Changed">
            <summary>
            Gets a value indicating whether this <see cref="T:WaveEngine.Common.Helpers.CheckDictionary`2" /> is changed.
            </summary>
            <value>
              <c>true</c> if changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.CheckDictionary`2" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:WaveEngine.Common.Helpers.CheckDictionary`2.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>
            The keys.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.Remove(`0)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>true if was suscessfully removed</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>true if value was retourned</returns>
        </member>
        <member name="P:WaveEngine.Common.Helpers.CheckDictionary`2.Values">
            <summary>
            Gets the values.
            </summary>
            <value>
            The values.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Helpers.CheckDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value>
            The value.
            </value>
            <param name="key">The key.</param>
            <returns>the value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:WaveEngine.Common.Helpers.CheckDictionary`2.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Helpers.CheckDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>was removed</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>the enumerator.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.CheckDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Helpers.GenericEventArgs`1">
            <summary>
            Event argument for a generic value.
            </summary>
            <typeparam name="T">Type of the argument.</typeparam>
        </member>
        <member name="P:WaveEngine.Common.Helpers.GenericEventArgs`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.GenericEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.GenericEventArgs`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.IntEventArgs">
            <summary>
            Event args for an integer value.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.IntEventArgs.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.IntEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.IntEventArgs"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.BasicCache`2">
            <summary>
            A simple cache implementation.
            </summary>
            <typeparam name="T">The item key type of the cache</typeparam>
            <typeparam name="K">The item value type of the cache</typeparam>
        </member>
        <member name="T:WaveEngine.Common.Helpers.BasicCache`2.NewItemInstanceDelegate">
            <summary>
            Delegate that crates a new instance by its key
            </summary>
            <param name="key">The key</param>
            <returns>The new item instance</returns>
        </member>
        <member name="T:WaveEngine.Common.Helpers.BasicCache`2.BasicCacheItem`1">
            <summary>
            A simple cache item
            </summary>
            <typeparam name="S">The type of the value</typeparam>
        </member>
        <member name="F:WaveEngine.Common.Helpers.BasicCache`2.BasicCacheItem`1.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.BasicCache`2.BasicCacheItem`1.Expiration">
            <summary>
            The expiration time
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.BasicCache`2.items">
            <summary>
            The items
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.BasicCache`2.itemsToRemove">
            <summary>
            The items to remove
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.BasicCache`2.ExpirationTime">
            <summary>
            Gets or sets the expiration time
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.BasicCache`2.NewInstanceHandle">
            <summary>
            A handle to build a new instance
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BasicCache`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.BasicCache`2" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BasicCache`2.GetItem(`0)">
            <summary>
            Gets an item
            </summary>
            <param name="key">The item key</param>
            <returns>The item</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BasicCache`2.AddItem(`0,`1)">
            <summary>
            Add an item to the cache
            </summary>
            <param name="key">The key</param>
            <param name="item">The item</param>
        </member>
        <member name="M:WaveEngine.Common.Helpers.BasicCache`2.Check">
            <summary>
            Check if the cache items has expired
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Helpers.PropertyInfoExtensions">
            <summary>
            Reflection extensions
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PropertyInfoExtensions.GetValueGetter(System.Reflection.PropertyInfo)">
            <summary>
            Get the expression of a value getter for a property. Compile the expression to execute or combine it with other expressions.
            </summary>
            <param name="propertyInfo">The property info</param>
            <returns>The value property getter</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.PropertyInfoExtensions.GetValueSetter(System.Reflection.PropertyInfo)">
            <summary>
            Get the expression of a value setter for a property. Compile the expression to execute or combine it with other expressions.
            </summary>
            <param name="propertyInfo">The property info</param>
            <returns>The value property setter</returns>
        </member>
        <member name="T:WaveEngine.Common.Helpers.ReflectionHelper">
            <summary>
            Helper methods for reflection
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Helpers.ReflectionHelper.castablePrimitiveTypes">
            <summary>
            List of castable primitive types by each primitive type
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.IsEnum(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type" /> is enum.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the <see cref="T:System.Type" /> is a enum type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.IsInterface(System.Type)">
            <summary>
            Determines whether the specified type is an interface.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the <see cref="T:System.Type"/> is a enum type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.IsValueType(System.Type)">
            <summary>
            Gets a value indicating whether the specified type is a value type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the <see cref="T:System.Type"/> is a value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.IsGenericType(System.Type)">
            <summary>
            Gets a value indicating whether the specified <see cref="T:System.Type" /> is a generic type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the <see cref="T:System.Type"/> is a generic type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.IsGenericTypeDefinition(System.Type)">
            <summary>
            Gets a value indicating whether the specified type is a generic type definition.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the <see cref="T:System.Type"/> is a generic type definition; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.IsPrimitive(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type" /> is one of the primitive types.
            </summary>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether an instance of the second specified type can be assigned to the first specified type instance.
            </summary>
            <param name="first">The first type.</param>
            <param name="second">The type to check.</param>
            <returns>
            <c>true</c> if the first specified type can be assigned from the second type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.IsCastableFrom(System.Type,System.Type)">
            <summary>
            Determines whether an instance of the second specified type can be casted to the first specified type instance.
            </summary>
            <param name="first">The first type.</param>
            <param name="second">The type to check.</param>
            <returns>
            <c>true</c> if the first specified type can be casted from the second type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.IsAttributeDefined``1(System.Type)">
            <summary>
            Indicates whether custom attributes of a specified type are applied to a specified type.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="type">The type.</param>
            <returns>
            <c>true</c> if an attribute of the specified type is applied to the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.GetMemberAssembly(System.Object)">
            <summary>
            Gets the <see cref="T:System.Reflection.Assembly" /> in which the member type is declared. For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.
            </summary>
            <param name="obj">The member.</param>
            <returns>
            The type assembly
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssembly(System.Type)">
            <summary>
            Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared. For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The type assembly
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeAssemblyName(System.Type)">
            <summary>
            Gets the <see cref="T:System.Reflection.Assembly"/> name in which the type is declared. For generic types, gets the <see cref="T:System.Reflection.Assembly"/> name in which the generic type is defined.
            </summary>
            <param name="type">The type.</param>
            <returns>
            A <see cref="T:System.String"/> containing the name of this member assembly.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.GetBaseType(System.Type)">
            <summary>
            Gets the type from which the current System.Type directly inherits.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The <see cref="T:System.Type"/> from which the current System.Type directly inherits, or null
            if the current <see cref="T:System.Type"/> represents the System.Object class or an interface.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.GetGenericTypeDefinition(System.Type)">
            <summary>
            Returns a <see cref="T:System.Type"/> object that represents a generic type definition from which the current generic type can be constructed.
            </summary>
            <param name="type">The type.</param>
            <returns>
            A <see cref="T:System.Type"/> object representing a generic type from which the current type can be constructed.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.GetInterfaces(System.Type)">
            <summary>
            Gets the interfaces.
            </summary>
            <param name="type">The type.</param>
            <returns>The interfaces.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.GetTypeName(System.Object)">
            <summary>
            Gets the name of the current member.
            </summary>
            <param name="obj">The object.</param>
            <returns>
            A <see cref="T:System.String"/> containing the name of this member type.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.GetSizeOf``1">
            <summary>
            Gets the size of the specified type
            </summary>
            <typeparam name="T">The type</typeparam>
            <returns>The size of the specified type</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.GetFullNameWithoutAssemblyInfo(System.Type)">
            <summary>
            Gets the full name of the name of the specified type without assembly full name.
            </summary>
            <param name="type">The type.</param>
            <returns>The full name of the name without assembly full name.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.ReflectionHelper.FindTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
            Find the types that match the corresponding predicate
            </summary>
            <param name="assembly">The target search assembly</param>
            <param name="predicate">The predicate to filter types</param>
            <returns>A collection of matching types</returns>
        </member>
        <member name="T:WaveEngine.Common.Helpers.SizeEventArgs">
            <summary>
            Event args for a size value.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.SizeEventArgs.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.SizeEventArgs.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.SizeEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.SizeEventArgs"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The heigth.</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.StringEventArgs">
            <summary>
            Event args for a string value.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Helpers.StringEventArgs.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.StringEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Helpers.StringEventArgs"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:WaveEngine.Common.Helpers.TimeSpanExtended">
            <summary>
            Extension methods for TimeSpan.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TimeSpanExtended.Divide(System.TimeSpan,System.Int32)">
            <summary>
            Divides the specified time.
            </summary>
            <param name="time">The time.</param>
            <param name="divider">The divider.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TimeSpanExtended.Divide(System.TimeSpan,System.TimeSpan)">
            <summary>
            Divides the specified time1.
            </summary>
            <param name="time1">The time1.</param>
            <param name="time2">The time2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TimeSpanExtended.Multiply(System.TimeSpan,System.Int32)">
            <summary>
            Multiplies the specified time.
            </summary>
            <param name="time">The time.</param>
            <param name="multipler">The multipler.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TimeSpanExtended.Multiply(System.TimeSpan,System.TimeSpan)">
            <summary>
            Multiplies the specified time1.
            </summary>
            <param name="time1">The time1.</param>
            <param name="time2">The time2.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions">
            <summary>
            Extensions for TypeInfo
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllConstructors(System.Reflection.TypeInfo)">
            <summary>
            Get contructors of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the contructors.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllEvents(System.Reflection.TypeInfo)">
            <summary>
            Get events of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the events.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllFields(System.Reflection.TypeInfo)">
            <summary>
            Get fields of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the fields.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMembers(System.Reflection.TypeInfo)">
            <summary>
            Get members of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the members.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllMethods(System.Reflection.TypeInfo)">
            <summary>
            Get methods of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the methods.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllNestedTypes(System.Reflection.TypeInfo)">
            <summary>
            Get nested types of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the nested types.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAllProperties(System.Reflection.TypeInfo)">
            <summary>
            Get properties of the type and its base types.
            </summary>
            <param name="typeInfo">The type info.</param>
            <returns>All the properties.</returns>
        </member>
        <member name="M:WaveEngine.Common.Helpers.TypeInfoAllMemberExtensions.GetAll``1(System.Reflection.TypeInfo,System.Func{System.Reflection.TypeInfo,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Helper method to iterate the type and its base types.
            </summary>
            <typeparam name="T">The returned member type.</typeparam>
            <param name="typeInfo">The type info.</param>
            <param name="accessor">The func to get the members of the type.</param>
            <returns>The members.</returns>
        </member>
        <member name="T:WaveEngine.Common.Guide.IGuide">
            <summary>
            Interface for guide.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Guide.IGuide.IsTrialMode">
            <summary>
            Gets a value indicating whether this instance is trial mode.
            </summary>
            <value>
                <c>true</c> if this instance is trial mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Guide.IGuide.IsVisible">
            <summary>
            Gets a value indicating whether this instance is visible.
            </summary>
            <value>
                <c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Guide.IGuide.SimulateTrialMode">
            <summary>
            Gets or sets a value indicating whether [simulate trial mode].
            </summary>
            <value>
                <c>true</c> if [simulate trial mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Guide.IGuide.ShowWebBrowser(System.Uri)">
            <summary>
            Shows the web browser.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:WaveEngine.Common.Guide.IGuide.BeginShowKeyboardInput(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the show keyboard input.
            </summary>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="defaultText">The default text.</param>
            <param name="callback">The callback.</param>
            <param name="state">The state.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IGuide.EndShowKeyboardInput(System.IAsyncResult)">
            <summary>
            Ends the show keyboard input.
            </summary>
            <param name="result">The result.</param>
            <returns>Resulting text.</returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IGuide.BeginShowMessageBox(System.String,System.String,System.AsyncCallback)">
            <summary>
            Begins the show message box.
            </summary>
            <param name="title">The title.</param>
            <param name="text">The text.</param>
            <param name="callback">The callback.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IGuide.EndShowMessageBox(System.IAsyncResult)">
            <summary>
            Ends the show message box.
            </summary>
            <param name="result">The result.</param>
            <returns>Result of the message box.</returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IGuide.ShowMessageBoxAsync(System.String,System.String)">
            <summary>
            Show an OK/Cancel message box asyncronously
            </summary>
            <param name="title">The messagebox title</param>
            <param name="description">The messagebox description</param>
            <returns>If the messagebox result is OK</returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IGuide.ShowTextDialogBoxAsync(System.String,System.String,System.String)">
            <summary>
            Show a text dialog box asynchronously
            </summary>
            <param name="title">The messagebox title</param>
            <param name="description">The messagebox description</param>
            <param name="defaultText">The default text in the text box</param>
            <returns>The text writed in the dialog. Null if the user cancel the dialog</returns>
        </member>
        <member name="T:WaveEngine.Common.Guide.IInAppPurchase">
            <summary>
            In App purchase service interface
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Guide.IInAppPurchase.Initialize(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initialize the store with the given properties
            </summary>
            <param name="properties">Store properties</param>
            <returns>
            <c>true</c> if the initialization has been done correctly; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IInAppPurchase.RequestProductsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Requests to store the products async.
            </summary>
            <param name="productIds">Enumerable of products to obtain the details</param>
            <returns>
            Detailed product list
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IInAppPurchase.RequestProductPurchaseAsync(System.String)">
            <summary>
            Requests to store the product purchase async.
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            <c>true</c> if the product purchase has been accepted by user; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IInAppPurchase.RequestReceiptAsync(System.String)">
            <summary>
            Requests to store the receipt of a product async.
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            The receipt
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Guide.IInAppPurchase.ReportConsumablePurchased(System.String)">
            <summary>
            Report to store after consumable product purchased
            </summary>
            <param name="productId">The product id.</param>
            <returns>
            <c>true</c> if the consumable product has been purchased; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Guide.Product">
            <summary>
            Represent a product available by In-App Purchase
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Guide.Product.ProductType">
            <summary>
            Diferents product types
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Guide.Product.ProductType.Undefined">
            <summary>
            The product type is not defined
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Guide.Product.ProductType.Durable">
            <summary>
            A product that is purchased, used (consumed), and can be purchased again.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Guide.Product.ProductType.Consumable">
            <summary>
            A product that is purchased and owned by the purchaser forever. It is not consumed.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Guide.Product.ID">
            <summary>
            Gets or sets the Product id.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Guide.Product.Name">
            <summary>
            Gets or sets the Product name
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Guide.Product.Description">
            <summary>
            Gets or sets the Product description
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Guide.Product.Type">
            <summary>
            Gets or sets the product type (Durable|Consumable)
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Guide.Product.FormattedPrice">
            <summary>
            Gets or sets the Formatted price
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Guide.Product.Purchased">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WaveEngine.Common.Guide.Product" /> is purchased.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Guide.Receipt">
            <summary>
            Receipt represent product bill
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Guide.Receipt.Content">
            <summary>
            Gets or sets the receipt content.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.IAdapter">
            <summary>
            Interface for adapters.
            </summary>
        </member>
        <member name="E:WaveEngine.Common.IAdapter.NativeAdVisibilityChanged">
            <summary>
            Occurs when [native ad visibility changed].
            </summary>
        </member>
        <member name="E:WaveEngine.Common.IAdapter.OnScreenSizeChanged">
            <summary>
            Occurs when screen size is changed.
            </summary>
        </member>
        <member name="E:WaveEngine.Common.IAdapter.OnDisplayOrientationChanged">
            <summary>
            Occurs when display orientation is changed.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.Platform">
            <summary>
            Gets the platform.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.OperatingSystem">
            <summary>
            Gets the operating system.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.DeviceUniqueID">
            <summary>
            Gets the device unique ID.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.AppVersion">
            <summary>
            Gets the app version.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.UserAgent">
            <summary>
            Gets the user agent.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.OSVersion">
            <summary>
            Gets the OS version.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.DeviceModel">
            <summary>
            Gets the device model.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.DeviceMake">
            <summary>
            Gets the device make.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.LocaleLanguage">
            <summary>
            Gets the locale language.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.PlatformFamily">
            <summary>
            Gets the Platform Family
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.Graphics">
            <summary>
            Gets the graphics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.System">
            <summary>
            Gets the system.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.IOManager">
            <summary>
            Gets the IO manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.MusicPlayer">
            <summary>
            Gets the music player.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.VideoPlayer">
            <summary>
            Gets the video player.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.SoundManager">
            <summary>
            Gets the sound manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.Microphone">
            <summary>
            Gets the microphone.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.CameraCapture">
            <summary>
            Gets the camera capture.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.InputManager">
            <summary>
            Gets the input manager.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.Guide">
            <summary>
            Gets the guide.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.Features">
            <summary>
            Gets the device features.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.InAppPurchase">
            <summary>
            Gets the in app purchases.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.FullScreen">
            <summary>
            Gets or sets a value indicating whether [full screen].
            </summary>
            <value>
              <c>true</c> if [full screen]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.AdapterType">
            <summary>
            Gets the type of the adapter.
            </summary>
            <value>
            The type of the adapter.
            </value>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.DisplayOrientation">
            <summary>
            Gets the current display orientation of the device.
            </summary>
            <value>
            The current display orientation of the device.
            </value>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.AdvertismentVisible">
            <summary>
            Sets a value indicating whether [advertisment visible].
            </summary>
            <value>
              <c>true</c> if [advertisment visible]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.IAdapter.ListenersFactory">
            <summary>
            Gets the listeners factory.
            </summary>
            <value>
            The listeners factory.
            </value>
        </member>
        <member name="T:WaveEngine.Common.IApplication">
            <summary>
            Interface that defines all variables and functions that an adapter's base application must implement.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IApplication.Adapter">
            <summary>
            Gets the parent adapter needed to initialize the application.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IApplication.WindowTitle">
            <summary>
            Gets the title of the application window, when available.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IApplication.Width">
            <summary>
            Gets the width, in pixels, of the window/backbuffer.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IApplication.FullScreen">
            <summary>
            Gets or sets a value indicating whether the window is in full screen.
            </summary>
            <value>
              <c>true</c> if in full screen; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.IApplication.Height">
            <summary>
            Gets the height, in pixels, of the window/backbuffer.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IApplication.IsEditor">
            <summary>
            Gets a value indicating whether this application is running in Visual Editor
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IApplication.ExecutionMode">
            <summary>
            Gets the execution mode of the application
            </summary>
        </member>
        <member name="M:WaveEngine.Common.IApplication.Initialize">
            <summary>
            Called just after creating the application.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.IApplication.Update(System.TimeSpan)">
            <summary>
            Called when updating the main loop.
            </summary>
            <param name="elapsedTime">Elapsed time from the last update.</param>
        </member>
        <member name="M:WaveEngine.Common.IApplication.Draw(System.TimeSpan)">
            <summary>
            Called when drawing the main loop.
            </summary>
            <param name="elapsedTime">Elapsed time from the last draw.</param>
        </member>
        <member name="M:WaveEngine.Common.IApplication.Exit">
            <summary>
            Exits this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.IGame">
            <summary>
            Interface that defines all methods need to create a new game instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IGame.HasExited">
            <summary>
            Gets a value indicating whether this instance has exited.
            </summary>
            <value>
            <c>true</c> if this instance has exited; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.IGame.Initialize(WaveEngine.Common.IApplication)">
            <summary>
            Initializes the game according to the passed application (thus adapter).
            The adapter implementation depends on the while-running platform.
            Such method acts as the bridge between the game and the final hardware.
            </summary>
            <param name="application">The application (adapter).</param>
        </member>
        <member name="M:WaveEngine.Common.IGame.UpdateFrame(System.TimeSpan)">
            <summary>
            Forces an update for the following game cycle.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Common.IGame.DrawFrame(System.TimeSpan)">
            <summary>
            Forces a draw for the following game cycle.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Common.IGame.OnActivated">
            <summary>
            Called when [activated].
            </summary>
        </member>
        <member name="M:WaveEngine.Common.IGame.OnDeactivated">
            <summary>
            Called when [deactivated].
            </summary>
        </member>
        <member name="T:WaveEngine.Common.ILoadable">
            <summary>
            Interface for loadable assets.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.ILoadable.AssetPath">
            <summary>
            Gets or sets the asset path.
            </summary>
            <value>
            The asset path.
            </value>
        </member>
        <member name="P:WaveEngine.Common.ILoadable.ReaderVersion">
            <summary>
            Gets the reader version.
            </summary>
            <value>
            The reader version.
            </value>
        </member>
        <member name="M:WaveEngine.Common.ILoadable.Unload">
            <summary>
            Unloads this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.ILoadable`1">
            <summary>
            Interface for loadable assets.
            </summary>
            <typeparam name="T">Object type.</typeparam>
        </member>
        <member name="M:WaveEngine.Common.ILoadable`1.Load(`0,System.IO.Stream)">
            <summary>
            Loads the specified graphicsDevice.
            </summary>
            <param name="graphicsDevice">The graphicsDevice.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:WaveEngine.Common.Input.AccelerometerState">
            <summary>
            Describes the accelerometer state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.AccelerometerState.RawAcceleration">
            <summary>
            Raw acceleration value in G-force.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.AccelerometerState.SmoothAcceleration">
            <summary>
            Smooth acceleration value in G-force.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.AccelerometerState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Input.Buttons">
            <summary>
            Represent all gamepad buttons
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.Up">
            <summary>
            Up button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.Right">
            <summary>
            Right button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.Down">
            <summary>
            Down button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.Left">
            <summary>
            Left button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.A">
            <summary>
            State of the A button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.B">
            <summary>
            State of the B button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.X">
            <summary>
            State of the X button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.Y">
            <summary>
            State of the Y button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.LeftStick">
            <summary>
            State of the left stick.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.RightStick">
            <summary>
            State of the right stick.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.LefShoulder">
            <summary>
            State of the left shoulder.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.RightShoulder">
            <summary>
            State of the right shoulder.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.Back">
            <summary>
            State of the back button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.Start">
            <summary>
            State of the start button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.LeftTrigger">
            <summary>
            Left trigger.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.RightTrigger">
            <summary>
            Right trigger.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.LeftThumbstickDown">
            <summary>
            The left thumbstick down
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.LeftThumbstickLeft">
            <summary>
            The left thumbstick left
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.LeftThumbstickRight">
            <summary>
            The left thumbstick right
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.LeftThumbstickUp">
            <summary>
            The left thumbstick up
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.RightThumbstickDown">
            <summary>
            The right thumbstick down
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.RightThumbstickLeft">
            <summary>
            The right thumbstick left
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.RightThumbstickRight">
            <summary>
            The right thumbstick right
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Buttons.RightThumbstickUp">
            <summary>
            The right thumbstick up
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.ButtonState">
            <summary>
            State of a button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.ButtonState.Released">
            <summary>
            Button released.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.ButtonState.Pressed">
            <summary>
            Button pressed.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.CompassChangedArgs">
            <summary>
            Event args for compass change.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.CompassChangedArgs.NewCompassState">
            <summary>
            Gets the new compass state.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.CompassChangedArgs.#ctor(WaveEngine.Common.Input.CompassState)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Input.CompassChangedArgs"/> class.
            </summary>
            <param name="compassState">The compass state.</param>
        </member>
        <member name="T:WaveEngine.Common.Input.CompassState">
            <summary>
            Define a compass state
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.CompassState.SmoothMagneticHeading">
            <summary>
            The heading, in rads per seconds, measured counterclockwise from the Earth’s magnetic north.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.CompassState.RawMagneticHeading">
            <summary>
            The raw magnetic heading of the device.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.CompassState.SmoothGeographicHeading">
            <summary>
            The heading, in rads per seconds, measured counter clockwise from the Earth’s geographic north.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.CompassState.RawGeographicHeading">
            <summary>
            The raw geographical heading of the device.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.CompassState.Accuracy">
            <summary>
            The accuracy of the measure, in rads per seconds.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.CompassState.TimeStamp">
            <summary>
            A timestamp indicating the time at which the compass reading was taken.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.CompassState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Input.DisplayOrientation">
            <summary>
            Specifies the display orientation.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.DisplayOrientation.Default">
            <summary>
            Default orientation.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.DisplayOrientation.LandscapeLeft">
            <summary>
            Landscape left.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.DisplayOrientation.LandscapeRight">
            <summary>
            Landscape right.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.DisplayOrientation.Portrait">
            <summary>
            Portrait up.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.DisplayOrientation.PortraitFlipped">
            <summary>
            Portrait down.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.GamePadButtons">
            <summary>
            Represents the buttons of a game pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.A">
            <summary>
            State of the A button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.B">
            <summary>
            State of the B button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.X">
            <summary>
            State of the X button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.Y">
            <summary>
            State of the Y button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.LeftStick">
            <summary>
            State of the left stick.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.RightStick">
            <summary>
            State of the right stick.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.LeftShoulder">
            <summary>
            State of the left shoulder.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.RightShoulder">
            <summary>
            State of the right shoulder.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.Back">
            <summary>
            State of the back button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadButtons.Start">
            <summary>
            State of the start button.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.GamePadDPad">
            <summary>
            Represents the state of the directional pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadDPad.Up">
            <summary>
            The D-Pad up button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadDPad.Right">
            <summary>
            The D-Pad right button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadDPad.Down">
            <summary>
            The D-Pad down button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadDPad.Left">
            <summary>
            The D-Pad left button.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.GamePadState">
            <summary>
            Represents the game pad state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadState.DPad">
            <summary>
            Direction buttons.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadState.ThumbSticks">
            <summary>
            Thumb sticks.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadState.Buttons">
            <summary>
            Gamepad buttons.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadState.Triggers">
            <summary>
            Gamepad triggers.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.GamePadState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Input.GamePadState.IsButtonPressed(WaveEngine.Common.Input.Buttons)">
            <summary>
            Determines whether [is button pressed] [the specified button].
            </summary>
            <param name="button">the specified button.</param>
            <returns>
              <c>true</c> if [is button pressed] [the specified button]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.GamePadState.IsButtonReleased(WaveEngine.Common.Input.Buttons)">
            <summary>
            Determines whether [is button released] [the specified button].
            </summary>
            <param name="button">the specified button.</param>
            <returns>
              <c>true</c> if [is button released] [the specified button]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Input.GamePadThumbSticks">
            <summary>
            Represents the game pad sticks.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadThumbSticks.Left">
            <summary>
            Left thumbstick axis values, in the range -1.0f to 1.0f.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadThumbSticks.Right">
            <summary>
            Right thumbstick axis values, in the range -1.0f to 1.0f.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.GamePadTriggers">
            <summary>
            Represents the game pad triggers.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadTriggers.Left">
            <summary>
            Left trigger value, in the range 0.0 to 1.0f.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GamePadTriggers.Right">
            <summary>
            Right trigger value, in the range 0.0 to 1.0f.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.IMotionSensorListener">
            <summary>
            Interface for Motion sensor
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IMotionSensorListener.GetState">
            <summary>
            Gets the motion state.
            </summary>
            <returns>Motion state</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.IMotionSensor">
            <summary>
            Interface for Motion sensor
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IMotionSensor.GetState">
            <summary>
            Gets the motion state.
            </summary>
            <returns>Motion state</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.MotionState">
            <summary>
            Describes the motion state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.MotionState.Orientation">
            <summary>
            Gets the global orientation of the device in Quaternion.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.MotionState.OrientationEuler">
            <summary>
            Gets the global orientation of the device in Euler Angles.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.MotionState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
            <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Input.GyroscopeState">
            <summary>
            Describes the gyroscope state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GyroscopeState.SmoothRotationRate">
            <summary>
            Gets the smothed rotational velocity around axis X, Y and Z of the device, in radians per second.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.GyroscopeState.RawRotationRate">
            <summary>
            Gets the raw rotational velocity around axis X, Y and Z of the device, in radians per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.GyroscopeState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
            <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Input.IAccelerometer">
            <summary>
            Interface for accelerometer sensor
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IAccelerometer.GetState">
            <summary>
            Gets the Accelerometer state.
            </summary>
            <returns>Accelerometer state</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.IAccelerometerListener">
            <summary>
            Accelerometer listener
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IAccelerometerListener.GetState">
            <summary>
            Gets the state.
            </summary>
            <returns>The state of the accelerometer</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.ICompass">
            <summary>
            Interface for compass sensor
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.ICompass.GetState">
            <summary>
            Gets the compass state.
            </summary>
            <returns>Compass state</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.ICompassListener">
            <summary>
            Compass Listener
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.ICompassListener.GetState">
            <summary>
            Gets the compass state.
            </summary>
            <returns>Compass state</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.IController">
            <summary>
            Interface for controllers.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.IController.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Input.IGyroscope">
            <summary>
            Interface for Gyroscope sensor
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IGyroscope.GetState">
            <summary>
            Gets the gyroscope state.
            </summary>
            <returns>Gyroscope state</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.IGyroscopeListener">
            <summary>
            Interface for Gyroscope sensor
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IGyroscopeListener.GetState">
            <summary>
            Gets the gyroscope state.
            </summary>
            <returns>Gyroscope state</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.IInput">
            <summary>
            Interface for input devices.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IInput.KeyboardGetState">
            <summary>
            Keyboards the state of the get.
            </summary>
            <returns>Keyboard state.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.IInput.MouseGetState">
            <summary>
            Mouses the state of the get.
            </summary>
            <returns>Mouse state.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.IInput.GamePadGetState(WaveEngine.Common.Input.PlayerIndex)">
            <summary>
            Get the current state of a gamepad indentify by index.
            </summary>
            <param name="playerIndex">Index of the player.</param>
            <returns>Game pad state.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.IInput.SetGamePadGetVibration(WaveEngine.Common.Input.PlayerIndex,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the speed of the gamepads available vibration motors.
            </summary>
            <param name="playerIndex">Index of the player.</param>
            <param name="leftMotor">The level of the left vibration motor.</param>
            <param name="leftTrigger">The level of the left trigger vibration motor.</param>
            <param name="rightMotor">The level of the right vibration motor.</param>
            <param name="rightTrigger">The level of the right trigger vibration motor.</param>
            <returns>True is everything Ok, false if doesn't exist the player index.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.IInput.TouchPanelGetState(WaveEngine.Common.Input.TouchPanelState@)">
            <summary>
            Touches the state of the panel get.
            </summary>
            <param name="state">Touch panel state.</param>
        </member>
        <member name="E:WaveEngine.Common.Input.IInput.OnInputChanged">
            <summary>
            Occurs when a new devices is detected.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.IListener">
            <summary>
            IListener Interface
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IListener.Exist">
            <summary>
            Exists this instance.
            </summary>
            <returns>
            True if sensor exist, false in other case
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.IListener.Register">
            <summary>
            Registers this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.IListener.Unregister">
            <summary>
            Unregisters this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.ISensor">
            <summary>
            Sensors interface
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.ISensor.Exist">
            <summary>
            Check if the sensor exist
            </summary>
            <returns>True if sensor exist, false in other case</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ISensor.Start">
            <summary>
            Starts the sensor.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.ISensor.Stop">
            <summary>
            Stops the sensor.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.ISensor.Started">
            <summary>
            Gets a value indicating whether Sensor is started.
            </summary>
            <value>
              <c>true</c> if sensor; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Input.ISensorFactory">
            <summary>
            Sensor Factory interface
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.ISensorFactory.GetAccelerometer">
            <summary>
            Gets the accelerometer.
            </summary>
            <returns>Accelerometer Sensor</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ISensorFactory.GetCompass">
            <summary>
            Gets the compass.
            </summary>
            <returns>Compass Sensor</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ISensorFactory.GetGyroscope">
            <summary>
            Gets the gyroscope.
            </summary>
            <returns>Gyroscope Sensor</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ISensorFactory.GetMotion">
            <summary>
            Gets the motion sensor.
            </summary>
            <returns>Motion Sensor</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.ITouchable">
            <summary>
            Interface for touchables.
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Input.ITouchable.TouchOrderChanged">
            <summary>
            Occurs when [touch order changed].
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.ITouchable.TouchOrder">
            <summary>
            Gets the touch order.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.ITouchable.IsActive">
            <summary>
            Gets a value indicating whether this instance is active.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Input.ITouchable.Contains(WaveEngine.Common.Math.Vector2)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <returns>
              <c>true</c> if [contains] [the specified point]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ITouchable.AddTouch(WaveEngine.Common.Input.TouchLocation,System.Boolean)">
            <summary>
            Adds the touch.
            </summary>
            <param name="touch">The touch.</param>
            <param name="isNew">if set to <c>true</c> [is new].</param>
        </member>
        <member name="M:WaveEngine.Common.Input.ITouchable.UpdateTouchOrder">
            <summary>
            Updates the touch order.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.ITouchable.ManualTouchOrder">
            <summary>
            Gets or sets a value indicating whether [manual touch order].
            </summary>
            <value>
              <c>true</c> if [manual touch order]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Common.Input.KeyboardState">
            <summary>
            Holds the state of the keyboard.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Cancel">
            <summary>
            The cancel key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Back">
            <summary>
            The virtual back key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Tab">
            <summary>
            The Tab key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Clear">
            <summary>
            The Clear key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Enter">
            <summary>
            The Enter key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Shift">
            <summary>
            The Shift key. This is the general Shift case, applicable to key layouts with
            only one Shift key or that do not need to differentiate between left Shift and
            right Shift keystrokes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Control">
            <summary>
            The Ctrl key. This is the general Ctrl case, applicable to key layouts with only
            one Ctrl key or that do not need to differentiate between left Ctrl and right
            Ctrl keystrokes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Menu">
            <summary>
            The menu key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Pause">
            <summary>
            The Pause key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.CapitalLock">
            <summary>
            The Caps Lock key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Kana">
            <summary>
            The Kana symbol key-shift button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Junja">
            <summary>
            The Junja symbol key-shift button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Final">
            <summary>
            The Final symbol key-shift button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Kanji">
            <summary>
            The Kanji symbol key-shift button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Escape">
            <summary>
            The Esc key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Convert">
            <summary>
            The convert button or key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NonConvert">
            <summary>
            The nonconvert button or key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Accept">
            <summary>
            The accept button or key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.ModeChange">
            <summary>
            The mode change key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Space">
            <summary>
            The Spacebar key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.PageUp">
            <summary>
            The Page Up key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.PageDown">
            <summary>
            The Page Down key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.End">
            <summary>
            The End key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Home">
            <summary>
            The Home key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Left">
            <summary>
            The Left Arrow key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Up">
            <summary>
            The Up Arrow key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Right">
            <summary>
            The Right Arrow key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Down">
            <summary>
            The Down Arrow key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Select">
            <summary>
            The Select key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Print">
            <summary>
            The Print key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Execute">
            <summary>
            The execute key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Snapshot">
            <summary>
            The snapshot key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Insert">
            <summary>
            The Insert key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Delete">
            <summary>
            The Delete key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Help">
            <summary>
            The Help key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number0">
            <summary>
            The number "0" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number1">
            <summary>
            The number "1" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number2">
            <summary>
            The number "2" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number3">
            <summary>
            The number "3" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number4">
            <summary>
            The number "4" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number5">
            <summary>
            The number "5" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number6">
            <summary>
            The number "6" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number7">
            <summary>
            The number "7" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number8">
            <summary>
            The number "8" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Number9">
            <summary>
            The number "9" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.A">
            <summary>
            The letter "A" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.B">
            <summary>
            The letter "B" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.C">
            <summary>
            The letter "C" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.D">
            <summary>
            The letter "D" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.E">
            <summary>
            The letter "E" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F">
            <summary>
            The letter "F" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.G">
            <summary>
            The letter "G" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.H">
            <summary>
            The letter "H" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.I">
            <summary>
            The letter "I" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.J">
            <summary>
            The letter "J" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.K">
            <summary>
            The letter "K" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.L">
            <summary>
            The letter "L" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.M">
            <summary>
            The letter "M" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.N">
            <summary>
            The letter "N" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.O">
            <summary>
            The letter "O" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.P">
            <summary>
            The letter "P" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Q">
            <summary>
            The letter "Q" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.R">
            <summary>
            The letter "R" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.S">
            <summary>
            The letter "S" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.T">
            <summary>
            The letter "T" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.U">
            <summary>
            The letter "U" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.V">
            <summary>
            The letter "V" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.W">
            <summary>
            The letter "W" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.X">
            <summary>
            The letter "X" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Y">
            <summary>
            The letter "Y" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Z">
            <summary>
            The letter "Z" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.LeftWindows">
            <summary>
            The left Windows key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.RightWindows">
            <summary>
            The right Windows key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Application">
            <summary>
            The application key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Sleep">
            <summary>
            The sleep key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad0">
            <summary>
            The number "0" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad1">
            <summary>
            The number "1" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad2">
            <summary>
            The number "2" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad3">
            <summary>
            The number "3" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad4">
            <summary>
            The number "4" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad5">
            <summary>
            The number "5" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad6">
            <summary>
            The number "6" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad7">
            <summary>
            The number "7" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad8">
            <summary>
            The number "8" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberPad9">
            <summary>
            The number "9" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Multiply">
            <summary>
            The multiply (*) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Add">
            <summary>
            The add (+) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Separator">
            <summary>
            The separator key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Subtract">
            <summary>
            The subtract (-) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Decimal">
            <summary>
            The decimal (.) key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Divide">
            <summary>
            The divide (/) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F1">
            <summary>
            The F1 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F2">
            <summary>
            The F2 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F3">
            <summary>
            The F3 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F4">
            <summary>
            The F4 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F5">
            <summary>
            The F5 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F6">
            <summary>
            The F6 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F7">
            <summary>
            The F7 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F8">
            <summary>
            The F8 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F9">
            <summary>
            The F9 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F10">
            <summary>
            The F10 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F11">
            <summary>
            The F11 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F12">
            <summary>
            The F12 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F13">
            <summary>
            The F13 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F14">
            <summary>
            The F14 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F15">
            <summary>
            The F15 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F16">
            <summary>
            The F16 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F17">
            <summary>
            The F17 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F18">
            <summary>
            The F18 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F19">
            <summary>
            The F19 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F20">
            <summary>
            The F20 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F21">
            <summary>
            The F21 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F22">
            <summary>
            The F22 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F23">
            <summary>
            The F23 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.F24">
            <summary>
            The F24 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NavigationView">
            <summary>
            The navigation up button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NavigationMenu">
            <summary>
            The navigation menu button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NavigationUp">
            <summary>
            The navigation up button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NavigationDown">
            <summary>
            The navigation down button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NavigationLeft">
            <summary>
            The navigation left button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NavigationRight">
            <summary>
            The navigation right button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NavigationAccept">
            <summary>
            The navigation accept button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NavigationCancel">
            <summary>
            The navigation cancel button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.NumberKeyLock">
            <summary>
            The Num Lock key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Scroll">
            <summary>
            The Scroll Lock (ScrLk) key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.LeftShift">
            <summary>
            The left Shift key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.RightShift">
            <summary>
            The right Shift key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.LeftControl">
            <summary>
            The left Ctrl key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Grave">
            <summary>
            The grave key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.RightControl">
            <summary>
            The right Ctrl key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.LeftAlt">
            <summary>
            The left Alt key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.RightAlt">
            <summary>
            The right Alt key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.LeftMenu">
            <summary>
            The left menu key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.RightMenu">
            <summary>
            The right menu key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.GoBack">
            <summary>
            The go back key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.GoForward">
            <summary>
            The go forward key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Refresh">
            <summary>
            The refresh key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Stop">
            <summary>
            The stop key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Search">
            <summary>
            The search key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Favorites">
            <summary>
            The favorites key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.GoHome">
            <summary>
            The go home key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Semicolon">
            <summary>
            The semicolon key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Apostrophe">
            <summary>
            The apostrophe key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Comma">
            <summary>
            The comma key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Period">
            <summary>
            The period key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Underline">
            <summary>
            The underline key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.Slash">
            <summary>
            The slash key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.KeyboardState.BackSlash">
            <summary>
            The backslash key.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.KeyboardState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Input.KeyboardState.IsKeyPressed(WaveEngine.Common.Input.Keys)">
            <summary>
            Determines whether [is key pressed] [the specified key].
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if [is key pressed] [the specified key]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.KeyboardState.IsKeyReleased(WaveEngine.Common.Input.Keys)">
            <summary>
            Determines whether [is key released] [the specified key].
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if [is key released] [the specified key]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.KeyboardState.GetChar(WaveEngine.Common.Input.Keys)">
            <summary>
            Get Char of a pressed key
            </summary>
            <param name="key">Pressed key.</param>
            <returns>Return the char.</returns>
        </member>
        <member name="T:WaveEngine.Common.Input.Keys">
            <summary>
            All keys
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Cancel">
            <summary>
            The cancel key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Back">
            <summary>
            The virtual back key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Tab">
            <summary>
            The Tab key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Clear">
            <summary>
            The Clear key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Enter">
            <summary>
            The Enter key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Shift">
            <summary>
            The Shift key. This is the general Shift case, applicable to key layouts with
            only one Shift key or that do not need to differentiate between left Shift and
            right Shift keystrokes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Control">
            <summary>
            The Ctrl key. This is the general Ctrl case, applicable to key layouts with only
            one Ctrl key or that do not need to differentiate between left Ctrl and right
            Ctrl keystrokes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Menu">
            <summary>
            The menu key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Pause">
            <summary>
            The Pause key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.CapitalLock">
            <summary>
            The Caps Lock key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Kana">
            <summary>
            The Kana symbol key-shift button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Junja">
            <summary>
            The Junja symbol key-shift button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Final">
            <summary>
            The Final symbol key-shift button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Kanji">
            <summary>
            The Kanji symbol key-shift button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Escape">
            <summary>
            The Esc key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Convert">
            <summary>
            The convert button or key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NonConvert">
            <summary>
            The nonconvert button or key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Accept">
            <summary>
            The accept button or key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.ModeChange">
            <summary>
            The mode change key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Space">
            <summary>
            The Spacebar key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Grave">
            <summary>
            The grave key or º.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.LeftAlt">
            <summary>
            The left alt button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.RightAlt">
            <summary>
            The right alt button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.PageUp">
            <summary>
            The Page Up key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.PageDown">
            <summary>
            The Page Down key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.End">
            <summary>
            The End key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Home">
            <summary>
            The Home key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Left">
            <summary>
            The Left Arrow key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Up">
            <summary>
            The Up Arrow key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Right">
            <summary>
            The Right Arrow key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Down">
            <summary>
            The Down Arrow key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Select">
            <summary>
            The Select key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Print">
            <summary>
            The Print key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Execute">
            <summary>
            The execute key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Snapshot">
            <summary>
            The snapshot key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Insert">
            <summary>
            The Insert key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Delete">
            <summary>
            The Delete key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Help">
            <summary>
            The Help key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number0">
            <summary>
            The number "0" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number1">
            <summary>
            The number "1" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number2">
            <summary>
            The number "2" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number3">
            <summary>
            The number "3" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number4">
            <summary>
            The number "4" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number5">
            <summary>
            The number "5" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number6">
            <summary>
            The number "6" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number7">
            <summary>
            The number "7" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number8">
            <summary>
            The number "8" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Number9">
            <summary>
            The number "9" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.A">
            <summary>
            The letter "A" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.B">
            <summary>
            The letter "B" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.C">
            <summary>
            The letter "C" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.D">
            <summary>
            The letter "D" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.E">
            <summary>
            The letter "E" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F">
            <summary>
            The letter "F" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.G">
            <summary>
            The letter "G" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.H">
            <summary>
            The letter "H" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.I">
            <summary>
            The letter "I" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.J">
            <summary>
            The letter "J" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.K">
            <summary>
            The letter "K" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.L">
            <summary>
            The letter "L" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.M">
            <summary>
            The letter "M" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.N">
            <summary>
            The letter "N" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.O">
            <summary>
            The letter "O" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.P">
            <summary>
            The letter "P" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Q">
            <summary>
            The letter "Q" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.R">
            <summary>
            The letter "R" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.S">
            <summary>
            The letter "S" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.T">
            <summary>
            The letter "T" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.U">
            <summary>
            The letter "U" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.V">
            <summary>
            The letter "V" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.W">
            <summary>
            The letter "W" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.X">
            <summary>
            The letter "X" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Y">
            <summary>
            The letter "Y" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Z">
            <summary>
            The letter "Z" key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.LeftWindows">
            <summary>
            The left Windows key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.RightWindows">
            <summary>
            The right Windows key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Application">
            <summary>
            The application key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Sleep">
            <summary>
            The sleep key or button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad0">
            <summary>
            The number "0" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad1">
            <summary>
            The number "1" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad2">
            <summary>
            The number "2" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad3">
            <summary>
            The number "3" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad4">
            <summary>
            The number "4" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad5">
            <summary>
            The number "5" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad6">
            <summary>
            The number "6" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad7">
            <summary>
            The number "7" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad8">
            <summary>
            The number "8" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberPad9">
            <summary>
            The number "9" key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Multiply">
            <summary>
            The multiply (*) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Add">
            <summary>
            The add (+) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Separator">
            <summary>
            The separator key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Subtract">
            <summary>
            The subtract (-) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Decimal">
            <summary>
            The decimal (.) key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Divide">
            <summary>
            The divide (/) operation key as located on a numeric pad.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F1">
            <summary>
            The F1 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F2">
            <summary>
            The F2 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F3">
            <summary>
            The F3 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F4">
            <summary>
            The F4 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F5">
            <summary>
            The F5 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F6">
            <summary>
            The F6 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F7">
            <summary>
            The F7 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F8">
            <summary>
            The F8 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F9">
            <summary>
            The F9 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F10">
            <summary>
            The F10 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F11">
            <summary>
            The F11 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F12">
            <summary>
            The F12 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F13">
            <summary>
            The F13 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F14">
            <summary>
            The F14 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F15">
            <summary>
            The F15 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F16">
            <summary>
            The F16 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F17">
            <summary>
            The F17 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F18">
            <summary>
            The F18 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F19">
            <summary>
            The F19 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F20">
            <summary>
            The F20 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F21">
            <summary>
            The F21 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F22">
            <summary>
            The F22 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F23">
            <summary>
            The F23 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.F24">
            <summary>
            The F24 function key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NavigationView">
            <summary>
            The navigation up button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NavigationMenu">
            <summary>
            The navigation menu button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NavigationUp">
            <summary>
            The navigation up button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NavigationDown">
            <summary>
            The navigation down button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NavigationLeft">
            <summary>
            The navigation left button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NavigationRight">
            <summary>
            The navigation right button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NavigationAccept">
            <summary>
            The navigation accept button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NavigationCancel">
            <summary>
            The navigation cancel button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.NumberKeyLock">
            <summary>
            The Num Lock key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Scroll">
            <summary>
            The Scroll Lock (ScrLk) key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.LeftShift">
            <summary>
            The left Shift key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.RightShift">
            <summary>
            The right Shift key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.LeftControl">
            <summary>
            The left Ctrl key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.RightControl">
            <summary>
            The right Ctrl key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.LeftMenu">
            <summary>
            The left menu key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.RightMenu">
            <summary>
            The right menu key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.GoBack">
            <summary>
            The go back key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.GoForward">
            <summary>
            The go forward key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Refresh">
            <summary>
            The refresh key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Stop">
            <summary>
            The stop key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Search">
            <summary>
            The search key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Favorites">
            <summary>
            The favorites key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.GoHome">
            <summary>
            The go home key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Semicolon">
            <summary>
            The semicolon key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Apostrophe">
            <summary>
            The apostrophe key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Comma">
            <summary>
            The comma key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Period">
            <summary>
            The period key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Underline">
            <summary>
            The underline key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.Slash">
            <summary>
            The slash key.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.Keys.BackSlash">
            <summary>
            The backslash key.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.ListenerFactory">
            <summary>
            Sensor Factory for IOS
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.ListenerFactory.accelerometerListener">
            <summary>
            The accelerometer
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.ListenerFactory.compassListener">
            <summary>
            The compass listener
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.ListenerFactory.giroscopeListener">
            <summary>
            The gyroscope listener
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.ListenerFactory.motionSensorListener">
            <summary>
            The motion sensor listener
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.ListenerFactory.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.ListenerFactory.GetAccelerometerListener">
            <summary>
            Gets the accelerometer.
            </summary>
            <returns>
            Accelerometer Sensor
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ListenerFactory.GetCompassListener">
            <summary>
            Gets the compass listener.
            </summary>
            <returns>
            Compass Listener
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ListenerFactory.GetGyroscopeListener">
            <summary>
            Gets the gyroscope listener.
            </summary>
            <returns>Gyroscope Listener</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ListenerFactory.GetMotionSensorListener">
            <summary>
            Gets the motion listener.
            </summary>
            <returns>Motion Listener</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.ListenerFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.ListenerFactory.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Common.Input.MouseState">
            <summary>
            Describes the mouse state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.MouseState.X">
            <summary>
            X position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.MouseState.Y">
            <summary>
            Y position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.MouseState.LeftButton">
            <summary>
            Left button state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.MouseState.RightButton">
            <summary>
            Right button state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.MouseState.MiddleButton">
            <summary>
            Middle button state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.MouseState.Wheel">
            <summary>
            Wheel value.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.MouseState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Input.MouseState.Position">
            <summary>
            Gets the current mouse position as vector2.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.OrientationChangedArgs">
            <summary>
            Represents the orientation of the compass.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.OrientationChangedArgs.NewOrientation">
            <summary>
            Gets the new orientation.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.OrientationChangedArgs.#ctor(WaveEngine.Common.Input.DisplayOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Input.OrientationChangedArgs"/> class.
            </summary>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="T:WaveEngine.Common.Input.PlayerIndex">
            <summary>
            Index of the player.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.PlayerIndex.One">
            <summary>
            First player.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.PlayerIndex.Two">
            <summary>
            Second player.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.PlayerIndex.Three">
            <summary>
            Third player.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.PlayerIndex.Four">
            <summary>
            Fourth player.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.SensorNotAvailableException">
            <summary>
            Exception for a sensor that it is not available.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.SensorNotAvailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Input.SensorNotAvailableException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:WaveEngine.Common.Input.TouchLocation">
            <summary>
            Represents a touch location.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchLocation.Id">
            <summary>
            Touch ID.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchLocation.State">
            <summary>
            Touch state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchLocation.Position">
            <summary>
            Touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchLocation.IsNew">
            <summary>
            If the point is new or it previously existing
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchLocation.#ctor(System.Int32,WaveEngine.Common.Input.TouchLocationState,System.Single,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Input.TouchLocation" /> struct.
            </summary>
            <param name="id">The id.</param>
            <param name="state">The state.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="isNew">if set to <c>true</c> [is new].</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchLocation.Equals(WaveEngine.Common.Input.TouchLocation)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchLocation.op_Equality(WaveEngine.Common.Input.TouchLocation,WaveEngine.Common.Input.TouchLocation)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchLocation.op_Inequality(WaveEngine.Common.Input.TouchLocation,WaveEngine.Common.Input.TouchLocation)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchLocation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchLocation.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Input.TouchLocationState">
            <summary>
            Status of the touch location.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchLocationState.Invalid">
            <summary>
            Invalid state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchLocationState.Release">
            <summary>
            Touch released.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchLocationState.Pressed">
            <summary>
            Touch pressed.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchLocationState.Moved">
            <summary>
            Touch moved.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.TouchPanelState">
            <summary>
            Represents the state of the touch panel.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch0">
            <summary>
            First touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch1">
            <summary>
            Second touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch2">
            <summary>
            Third touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch3">
            <summary>
            Fourth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch4">
            <summary>
            Fifth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch5">
            <summary>
            Sixth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch6">
            <summary>
            Seventh touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch7">
            <summary>
            Eighth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch8">
            <summary>
            Ninth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch9">
            <summary>
            Tenth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch10">
            <summary>
            Eleventh touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch11">
            <summary>
            Twelfth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch12">
            <summary>
            Thirteenth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch13">
            <summary>
            Fourteenth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch14">
            <summary>
            Fifteenth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touch15">
            <summary>
            Sixteenth touch position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.MaxTouches">
            <summary>
            Maximum number of touches.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.isConnected">
            <summary>
            Touch panel is connected.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.touchCount">
            <summary>
            Number of touches.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.TouchPanelState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Input.TouchPanelState.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.TouchPanelState.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
                <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Input.TouchPanelState.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:WaveEngine.Common.Input.TouchLocation"/> at the specified index.
            </summary>
            <param name="index">Touch index.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.#ctor(WaveEngine.Common.Input.TouchLocation[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Input.TouchPanelState"/> struct.
            </summary>
            <param name="touches">The touches.</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.AddTouchLocation(System.Int32,WaveEngine.Common.Input.TouchLocationState,System.Single,System.Single)">
            <summary>
            Adds the touch location.
            </summary>
            <param name="id">The id.</param>
            <param name="state">The touch state.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.AddTouchLocation(System.Int32,System.Single,System.Single)">
            <summary>
            Adds the touch location.
            </summary>
            <param name="id">The id.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.RemoveTouchLocation(System.Int32)">
            <summary>
            Adds the touch location.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.TryGetTouch(System.Int32,WaveEngine.Common.Input.TouchLocation@)">
            <summary>
            Tries the get touch.
            </summary>
            <param name="id">The id.</param>
            <param name="touchLocation">The touch location.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.ModifyTouch(System.Int32,WaveEngine.Common.Input.TouchLocationState,System.Single,System.Single)">
            <summary>
            Modifies the touch.
            </summary>
            <param name="id">The id.</param>
            <param name="newState">The new state.</param>
            <param name="newX">The new X.</param>
            <param name="newY">The new Y.</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.System#Collections#Generic#IEnumerable{WaveEngine#Common#Input#TouchLocation}#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.IndexOf(WaveEngine.Common.Input.TouchLocation)">
            <summary>
            Indexes the of.
            </summary>
            <param name="touch">The touch.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.Update">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.Contains(WaveEngine.Common.Input.TouchLocation)">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.Contains(System.Int32)">
            <summary>
            Determines whether [contains] [the specified id].
            </summary>
            <param name="id">The id.</param>
            <returns>
              <c>true</c> if [contains] [the specified id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.CopyTo(WaveEngine.Common.Input.TouchLocation[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.System#Collections#Generic#ICollection{WaveEngine#Common#Input#TouchLocation}#Add(WaveEngine.Common.Input.TouchLocation)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.System#Collections#Generic#ICollection{WaveEngine#Common#Input#TouchLocation}#Remove(WaveEngine.Common.Input.TouchLocation)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.System#Collections#Generic#IList{WaveEngine#Common#Input#TouchLocation}#Insert(System.Int32,WaveEngine.Common.Input.TouchLocation)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.System#Collections#Generic#IList{WaveEngine#Common#Input#TouchLocation}#RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="T:WaveEngine.Common.Input.TouchPanelState.Enumerator">
            <summary>
            Touch panel enumerator.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.Enumerator.collection">
            <summary>
            Collection of states.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.TouchPanelState.Enumerator.position">
            <summary>
            Position in the collection.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.TouchPanelState.Enumerator.Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Input.TouchPanelState.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.Enumerator.#ctor(WaveEngine.Common.Input.TouchPanelState)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Input.TouchPanelState.Enumerator"/> struct.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:WaveEngine.Common.Input.TouchPanelState.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Input.VRButtons">
            <summary>
            Represent all VR buttons
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.VRButtons.ThumbStick">
            <summary>
            State of the grip button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.VRButtons.Trigger">
            <summary>
            The trigger button
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.VRButtons.Menu">
            <summary>
            State of the menu button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.VRButtons.Grip">
            <summary>
            State of the grip button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.VRButtons.Button1">
            <summary>
            State of the first button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Input.VRButtons.Button2">
            <summary>
            State of the second button.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.IO.FileAccess">
            <summary>
            File access mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileAccess.Read">
            <summary>
            Read only.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileAccess.Write">
            <summary>
            Write only.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileAccess.ReadWrite">
            <summary>
            Read and write.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.IO.FileMode">
            <summary>
            File open mode.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileMode.CreateNew">
            <summary>
            Create new file.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileMode.Create">
            <summary>
            Create, overwrite if it exists.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileMode.Open">
            <summary>
            Open file.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileMode.OpenOrCreate">
            <summary>
            Open; if it doesn't exist, create.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileMode.Truncate">
            <summary>
            Open and truncate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.FileMode.Append">
            <summary>
            Open and append to the end.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.IO.IIOManager">
            <summary>
            Interface for I/O managers.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.IO.IIOManager.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.OpenContentFile(System.String)">
            <summary>
            Opens the content file.
            </summary>
            <param name="path">The path.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.ExistsContentFile(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The path.</param>
            <returns>true is file exists</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.ExistsStorageFile(System.String)">
            <summary>
            Existses the storage file.
            </summary>
            <param name="path">The path.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.CreateStorageFile(System.String)">
            <summary>
            Creates the storage file.
            </summary>
            <param name="path">The path.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.OpenStorageFile(System.String,WaveEngine.Common.IO.FileMode)">
            <summary>
            Opens the storage file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.OpenStorageFile(System.String,WaveEngine.Common.IO.FileMode,WaveEngine.Common.IO.FileAccess)">
            <summary>
            Opens the storage file.
            </summary>
            <param name="path">The path.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.DeleteStorageFile(System.String)">
            <summary>
            Deletes the storage file.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.MoveStorageFile(System.String,System.String)">
            <summary>
            Moves the storage file.
            </summary>
            <param name="oldPath">The old path.</param>
            <param name="newPath">The new path.</param>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.GetCreationTime(System.String)">
            <summary>
            Gets the creation time.
            </summary>
            <param name="path">The path.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.GetContentFileNames(System.String)">
            <summary>
            Gets the file names under this content path.
            </summary>
            <param name="path">The path.</param>
            <returns>A list of the existing files under this path.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.GetContentDirectories(System.String)">
            <summary>
            Gets the directory names under this content path.
            </summary>
            <param name="path">The path.</param>
            <returns>A list of the existing directories under this content path.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.GetFileNames(System.String)">
            <summary>
            Gets the file names.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.CreateDirectory(System.String)">
            <summary>
            Creates the directory.
            </summary>
            <param name="directoryName">Name of the directory.</param>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.DeleteDirectory(System.String)">
            <summary>
            Deletes the directory.
            </summary>
            <param name="directoryName">Name of the directory.</param>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.DirectoryExists(System.String)">
            <summary>
            Directories the exists.
            </summary>
            <param name="directoryName">Name of the directory.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.GetDirectoryNames(System.String)">
            <summary>
            Gets the directory names.
            </summary>
            <param name="searchPattern">The search pattern.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.GetRGBABytes(System.IO.Stream,System.Int32@,System.Int32@)">
            <summary>
            Gets the rgba bytes from an image stream.
            </summary>
            <param name="imageStream">The source image stream.</param>
            <param name="imageWidth">The width of the image in pixels</param>
            <param name="imageHeight">The height of the image in pixels</param>
            <returns>An array containing the premultiplied RGBA bytes of the raw image</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.SavePictureToLibrary(System.String)">
            <summary>
            Saves the picture to library.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:WaveEngine.Common.IO.IIOManager.SavePictureToLibrary(System.String,System.IO.Stream)">
            <summary>
            Saves the picture to library.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileStream">The file stream.</param>
        </member>
        <member name="T:WaveEngine.Common.IO.ISerializableObject">
            <summary>
            Interface for serializable objects.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.IO.ResourceLoader">
            <summary>
            Loads resources embedded in the assembly.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.IO.ResourceLoader.GetEmbeddedResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the embedded resource stream.
            </summary>
            <param name="targetAssembly">The assembly.</param>
            <param name="name">The name.</param>
            <returns>Resource stream.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.ResourceLoader.GetEmbeddedResourceData(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the embedded resource data.
            </summary>
            <param name="targetAssembly">The assembly.</param>
            <param name="name">The name.</param>
            <returns>Resource data.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.ResourceLoader.GetEmbeddedTextFile(System.Reflection.Assembly,System.String)">
            <summary>
            Gets the embedded text file.
            </summary>
            <param name="targetAssembly">The assembly.</param>
            <param name="name">The name.</param>
            <returns>Resource string.</returns>
        </member>
        <member name="M:WaveEngine.Common.IO.ResourceLoader.EmbeddedResourceExists(System.Reflection.Assembly,System.String)">
            <summary>
            Embeddeds the resource exists.
            </summary>
            <param name="targetAssembly">The target assembly.</param>
            <param name="name">The name.</param>
            <returns>
            returns System.Boolean
            </returns>
        </member>
        <member name="T:WaveEngine.Common.IO.SerializableMember">
            <summary>
            Marks the item as serializable by the infrastructure.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.IO.SerializableObject">
            <summary>
            Abstract class to extend for each class that we need to serialize
            </summary>
        </member>
        <member name="F:WaveEngine.Common.IO.SerializableObject.constructorInvoked">
            <summary>
            Flag that indicate if the constructor has been invoked
            </summary>
        </member>
        <member name="M:WaveEngine.Common.IO.SerializableObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.IO.SerializableObject" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.IO.SerializableObject.DefaultValues">
            <summary>
            This methods is used to set default values by the default constructor of our classes.
            This is called too when an entity is deserializing.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.IO.SerializableObject.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing process contructor
            </summary>
            <param name="context">Streaming Context</param>
        </member>
        <member name="T:WaveEngine.Common.Manager">
            <summary>
            This class is used as a base for different managers that are available in "WaveEngine.Framework.Scene".
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Manager.IsInitialized">
            <summary>
            Gets a value indicating whether this instance has been initialized.
            </summary>
            <value>
                <c>true</c> if this instance has been initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Manager.BaseInitialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Manager.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Math.BoundingBox">
            <summary>
            Represents a bounding box.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingBox.CornerCount">
            <summary>
            Number of corners.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingBox.Min">
            <summary>
            Bounding box minimum.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingBox.Max">
            <summary>
            Bounding box maximum.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingBox.Center">
            <summary>
            Gets the center of the bouding box
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingBox.HalfExtent">
            <summary>
            Gets the Bounding box half extents.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.BoundingBox"/> struct.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.CreateMerged(WaveEngine.Common.Math.BoundingBox,WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Creates the merged.
            </summary>
            <param name="original">The original.</param>
            <param name="additional">The additional.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.CreateMerged(WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Creates the merged.
            </summary>
            <param name="original">The original.</param>
            <param name="additional">The additional.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.CreateFromSphere(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Creates from sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.CreateFromSphere(WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Creates from sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.CreateFromPoints(System.Collections.Generic.IEnumerable{WaveEngine.Common.Math.Vector3})">
            <summary>
            Creates from points.
            </summary>
            <param name="points">The points.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Equals(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.GetCorners">
            <summary>
            Gets the corners.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.GetCorners(WaveEngine.Common.Math.Vector3[])">
            <summary>
            Gets the corners.
            </summary>
            <param name="corners">The corners.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.BoundingBox@,System.Boolean@)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Intersectses the specified frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.Plane)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.PlaneIntersectionType@)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.Ray)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.Ray@,System.Nullable{System.Single}@)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Intersects(WaveEngine.Common.Math.BoundingSphere@,System.Boolean@)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Contains(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Contains(WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Contains(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Determines whether [contains] [the specified frustum].
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Contains(WaveEngine.Common.Math.Vector3)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Contains(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Contains(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Contains(WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.SupportMapping(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Supports the mapping.
            </summary>
            <param name="v">The v.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Transform(WaveEngine.Common.Math.Matrix)">
            <summary>
            Transform a bounding box
            </summary>
            <param name="m">The transform</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Transform(WaveEngine.Common.Math.Matrix@)">
            <summary>
            Transform a bounding box
            </summary>
            <param name="m">The transform</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.Transform(WaveEngine.Common.Math.BoundingBox,WaveEngine.Common.Math.Matrix)">
            <summary>
            Transform a bounding box
            </summary>
            <param name="boundingBox">The bounding box</param>
            <param name="m">The transform</param>
            <returns>The transformed bounding box</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.op_Equality(WaveEngine.Common.Math.BoundingBox,WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">First bounding box.</param>
            <param name="b">Second bounding box.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingBox.op_Inequality(WaveEngine.Common.Math.BoundingBox,WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">First bounding box.</param>
            <param name="b">Second bounding box.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.BoundingFrustum">
            <summary>
            Represents a bounding frustum.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.CornerCount">
            <summary>
            Number of corners.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.LeftPlaneIndex">
            <summary>
            Left plane index.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.BottomPlaneIndex">
            <summary>
            Bottom plane index.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.NearPlaneIndex">
            <summary>
            Near plane index.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.NumPlanes">
            <summary>
            Number of planes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.FarPlaneIndex">
            <summary>
            Far plane index.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.RightPlaneIndex">
            <summary>
            Right plane index.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.TopPlaneIndex">
            <summary>
            Top plane index.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.CornerArray">
            <summary>
            Array of corners.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.gjk">
            <summary>
            Gilbert–Johnson–Keerthi distance.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.matrix">
            <summary>
            Transformation matrix.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingFrustum.planes">
            <summary>
            Array of planes.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingFrustum.Bottom">
            <summary>
            Gets the bottom.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingFrustum.Far">
            <summary>
            Gets the far.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingFrustum.Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingFrustum.Matrix">
            <summary>
            Gets or sets the matrix.
            </summary>
            <value>
            The matrix.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingFrustum.Near">
            <summary>
            Gets the near.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingFrustum.Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingFrustum.Top">
            <summary>
            Gets the top.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:WaveEngine.Common.Math.BoundingFrustum"/> class from being created.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.#ctor(WaveEngine.Common.Math.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.BoundingFrustum"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Contains(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Contains(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Determines whether [contains] [the specified frustum].
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Contains(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Contains(WaveEngine.Common.Math.Vector3)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Contains(WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Contains(WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Contains(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Equals(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.GetCorners">
            <summary>
            Gets the corners.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Intersectses the specified frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.Plane)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.Ray)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.BoundingBox@,System.Boolean@)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.BoundingSphere@,System.Boolean@)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.PlaneIntersectionType@)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.Intersects(WaveEngine.Common.Math.Ray@,System.Nullable{System.Single}@)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.SupportMapping(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Supports the mapping.
            </summary>
            <param name="v">The v.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.ComputeIntersection(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.Ray@)">
            <summary>
            Computes the intersection.
            </summary>
            <param name="plane">The plane.</param>
            <param name="ray">The ray.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.ComputeIntersectionLine(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.Plane@)">
            <summary>
            Computes the intersection line.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingFrustum.SetMatrix(WaveEngine.Common.Math.Matrix@)">
            <summary>
            Sets the matrix.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:WaveEngine.Common.Math.BoundingOrientedBox">
            <summary>
            Bounding volume using an oriented bounding box.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingOrientedBox.CornerCount">
            <summary>
            Corner count.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingOrientedBox.RayEpsilon">
            <summary>
            Epsilon value used in ray tests, where a ray might hit the box almost edge-on.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingOrientedBox.Center">
            <summary>
            Bounding box center.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingOrientedBox.HalfExtent">
            <summary>
            Bounding box half extents.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingOrientedBox.Orientation">
            <summary>
            Bounding box orientation.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingOrientedBox.Minimum">
            <summary>
            Gets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:WaveEngine.Common.Math.BoundingOrientedBox.Maximum">
            <summary>
            Gets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.BoundingOrientedBox"/> struct.
            </summary>
            <param name="center">The center.</param>
            <param name="halfExtents">The half extents.</param>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.CreateFromBoundingBox(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Create an oriented box from an axis-aligned box.
            </summary>
            <param name="box">The box.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Transform(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)">
            <summary>
            Transform the given bounding box by a rotation around the origin followed by a translation
            </summary>
            <param name="rotation">Rotation quaternion.</param>
            <param name="translation">Tranlation vector.</param>
            <returns>A new bounding box, transformed relative to this one</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Transform(System.Single,WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)">
            <summary>
            Transform the given bounding box by a uniform scale and rotation around the origin followed
            by a translation
            </summary>
            <param name="scale">The scale.</param>
            <param name="rotation">The rotation.</param>
            <param name="translation">The translation.</param>
            <returns>
            A new bounding box, transformed relative to this one
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Transform(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)">
            <summary>
            Transform the given bounding box by a uniform scale and rotation around the origin followed
            by a translation
            </summary>
            <param name="scale">The scale.</param>
            <param name="rotation">The rotation.</param>
            <param name="translation">The translation.</param>
            <returns>
            A new bounding box, transformed relative to this one
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Transform(WaveEngine.Common.Math.Matrix)">
            <summary>
            Transform this Bounding box
            </summary>
            <param name="world">The world matrix</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Equals(WaveEngine.Common.Math.BoundingOrientedBox)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.op_Equality(WaveEngine.Common.Math.BoundingOrientedBox,WaveEngine.Common.Math.BoundingOrientedBox)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.op_Inequality(WaveEngine.Common.Math.BoundingOrientedBox,WaveEngine.Common.Math.BoundingOrientedBox)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">First bounding box.</param>
            <param name="b">Second bounding box..</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Intersects(WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Determine if box A intersects box B.
            </summary>
            <param name="box">The box.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Contains(WaveEngine.Common.Math.BoundingBox@)">
            <summary>
            Determine if this box contains, intersects, or is disjoint from the given BoundingBox.
            </summary>
            <param name="box">The box.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Contains(WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Math.BoundingOrientedBox@)">
            <summary>
            Determine if box A contains, intersects, or is disjoint from box B.
            </summary>
            <param name="boxA">The box A.</param>
            <param name="oboxB">The obox B.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Intersects(WaveEngine.Common.Math.BoundingOrientedBox@)">
            <summary>
            Returns true if this box intersects the given other box.
            </summary>
            <param name="other">The other.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Contains(WaveEngine.Common.Math.BoundingOrientedBox@)">
            <summary>
            Determine whether this box contains, intersects, or is disjoint from
            the given other box.
            </summary>
            <param name="other">The other.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Contains(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Determine whether this box contains, intersects, or is disjoint from
            the given frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Intersects(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Returns true if this box intersects the given frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Intersects(WaveEngine.Common.Math.BoundingFrustum@,System.Boolean@)">
            <summary>
            Returns true if this box intersects the given frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Contains(WaveEngine.Common.Math.BoundingFrustum,WaveEngine.Common.Math.BoundingOrientedBox@)">
            <summary>
            Determine whether the given frustum contains, intersects, or is disjoint from
            the given oriented box.
            </summary>
            <param name="frustum">The frustum.</param>
            <param name="obox">The obox.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Contains(WaveEngine.Common.Math.BoundingSphere@)">
            <summary>
            Test whether this box contains, intersects, or is disjoint from the given sphere
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Intersects(WaveEngine.Common.Math.BoundingSphere@)">
            <summary>
            Test whether this box intersects the given sphere
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Contains(WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Math.BoundingOrientedBox@)">
            <summary>
            Test whether a BoundingSphere contains, intersects, or is disjoint from a BoundingOrientedBox
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="box">The box.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Contains(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Returns true if this box contains the given point.
            </summary>
            <param name="point">The point.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Intersects(WaveEngine.Common.Math.Ray@)">
            <summary>
            Determine whether the given ray intersects this box. If so, returns
            the parametric value of the point of first intersection; otherwise
            returns null.
            </summary>
            <param name="ray">The ray.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.Intersects(WaveEngine.Common.Math.Plane@)">
            <summary>
            Classify this bounding box as entirely in front of, in back of, or
            intersecting the given plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.GetCorners">
            <summary>
            Return the 8 corner positions of this bounding box.
            <para>
                ZMax    ZMin
               0----1  4----5
               |    |  |    |
               |    |  |    |
               3----2  7----6
            </para>
            The ordering of indices is a little strange to match what BoundingBox.GetCorners() does.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.GetCorners(WaveEngine.Common.Math.Vector3[],System.Int32)">
            <summary>
            Return the 8 corner positions of this bounding box.
            <para>
                ZMax    ZMin
               0----1  4----5
               |    |  |    |
               |    |  |    |
               3----2  7----6
            </para>
            The ordering of indices is a little strange to match what BoundingBox.GetCorners() does.
            </summary>
            <param name="corners">Array to fill with the eight corner positions</param>
            <param name="startIndex">Index within corners array to start writing positions</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.ContainsRelativeBox(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Determine whether the box described by half-extents hA, axis-aligned and centered at the origin, contains
            the box described by half-extents hB, whose position and orientation are given by the transform matrix mB.
            The matrix is assumed to contain only rigid motion; if it contains scaling or perpsective the result of
            this method will be incorrect.
            </summary>
            <param name="hA">Half-extents of first box</param>
            <param name="hB">Half-extents of second box</param>
            <param name="mB">Position and orientation of second box relative to first box</param>
            <returns>
            ContainmentType enum indicating whether the boxes are disjoin, intersecting, or
            whether box A contains box B.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingOrientedBox.ConvertToFrustum">
            <summary>
            Convert this BoundingOrientedBox to a BoundingFrustum describing the same volume.
            A BoundingFrustum is defined by the matrix that carries its volume to the
            box from (-1,-1,0) to (1,1,1), so we just need a matrix that carries our box there.
            </summary>
            <returns>
            The result.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.BoundingSphere">
            <summary>
            Represents a bounding sphere.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingSphere.Center">
            <summary>
            Sphere center.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.BoundingSphere.Radius">
            <summary>
            Sphere radius.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.#ctor(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.BoundingSphere"/> struct.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Equals(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Equals(WaveEngine.Common.Math.BoundingSphere@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.CreateMerged(WaveEngine.Common.Math.BoundingSphere,WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Creates the merged.
            </summary>
            <param name="original">The original.</param>
            <param name="additional">The additional.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.CreateMerged(WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Math.BoundingSphere@)">
            <summary>
            Creates the merged.
            </summary>
            <param name="original">The original.</param>
            <param name="additional">The additional.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.CreateFromBoundingBox(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Creates from bounding box.
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.CreateFromBoundingBox(WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Math.BoundingSphere@)">
            <summary>
            Creates from bounding box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.CreateFromPoints(System.Collections.Generic.IEnumerable{WaveEngine.Common.Math.Vector3})">
            <summary>
            Creates from points.
            </summary>
            <param name="points">The points.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.CreateFromFrustum(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Creates from frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.BoundingBox@,System.Boolean@)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Intersectses the specified frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.Plane)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.PlaneIntersectionType@)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.Ray)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.Ray@,System.Nullable{System.Single}@)">
            <summary>
            Intersectses the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Intersects(WaveEngine.Common.Math.BoundingSphere@,System.Boolean@)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Contains(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Contains(WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified box].
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Contains(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Determines whether [contains] [the specified frustum].
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Contains(WaveEngine.Common.Math.Vector3)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Contains(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Contains(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Contains(WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Math.ContainmentType@)">
            <summary>
            Determines whether [contains] [the specified sphere].
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.SupportMapping(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Supports the mapping.
            </summary>
            <param name="v">The v.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Transform(WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.Transform(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.BoundingSphere@)">
            <summary>
            Transforms the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.op_Equality(WaveEngine.Common.Math.BoundingSphere,WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">First bounding sphere.</param>
            <param name="b">Second bounding sphere.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.BoundingSphere.op_Inequality(WaveEngine.Common.Math.BoundingSphere,WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">First bounding sphere.</param>
            <param name="b">Second bounding sphere.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Byte4">
            <summary>
            Stores a vector of 4 bytes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Byte4.X">
            <summary>
            X value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Byte4.Y">
            <summary>
            Y value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Byte4.Z">
            <summary>
            Z value.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Byte4.W">
            <summary>
            W value.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Byte4.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Byte4"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="w">The w.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Byte4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Byte4.Equals(WaveEngine.Common.Math.Byte4)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Byte4.Equals(WaveEngine.Common.Math.Byte4@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Byte4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Byte4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.ContainmentType">
            <summary>
            Type of containment.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.ContainmentType.Disjoint">
            <summary>
            Disjoint containment.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.ContainmentType.Contains">
            <summary>
            Contained containment.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.ContainmentType.Intersects">
            <summary>
            Intersection containment.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Math.DoubleExtensions">
            <summary>
            Extension functions for double type.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.DoubleExtensions.DefaultError">
            <summary>
            Default error.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.DoubleExtensions.Equal(System.Double,System.Double,System.Single)">
            <summary>
            Equals the specified a.
            </summary>
            <param name="a">First double.</param>
            <param name="b">Second double.</param>
            <param name="maxRelativeError">The max relative error.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.DoubleExtensions.Distinct(System.Double,System.Double,System.Single)">
            <summary>
            Distincts the specified a.
            </summary>
            <param name="a">First double.</param>
            <param name="b">Second double.</param>
            <param name="maxRelativeError">The max relative error.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:WaveEngine.Common.Math.FloatExtensions">
            <summary>
            Extension methods for flaot type.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.FloatExtensions.DefaultError">
            <summary>
            Default error.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.FloatExtensions.Equal(System.Single,System.Single,System.Single)">
            <summary>
            Equals the specified a.
            </summary>
            <param name="a">First float.</param>
            <param name="b">Second float.</param>
            <param name="maxRelativeError">The max relative error.</param>
            <returns>true if they equal.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.FloatExtensions.Distinct(System.Single,System.Single,System.Single)">
            <summary>
            Distincts the specified a.
            </summary>
            <param name="a">First float.</param>
            <param name="b">Second float.</param>
            <param name="maxRelativeError">The max relative error.</param>
            <returns>true if they are distinct.</returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Gjk">
            <summary>
            Gilbert–Johnson–Keerthi distance algorithm.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.bitsToIndices">
            <summary>
            Bits to indices.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.closestPoint">
            <summary>
            Closest point.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.det">
            <summary>
            Gjk determinant.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.edgeLengthSq">
            <summary>
            Edge length squared.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.edges">
            <summary>
            Gjk edges.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.maxLengthSq">
            <summary>
            Max length squared.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.simplexBits">
            <summary>
            Simplex bits.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.y">
            <summary>
            Gjk Y.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Gjk.yLengthSq">
            <summary>
            Y length squared.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Gjk.ClosestPoint">
            <summary>
            Gets the closest point.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Gjk.FullSimplex">
            <summary>
            Gets a value indicating whether [full simplex].
            </summary>
            <value>
              <c>true</c> if [full simplex]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Gjk.MaxLengthSquared">
            <summary>
            Gets the max length squared.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Gjk.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Gjk"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Gjk.AddSupportPoint(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Adds the support point.
            </summary>
            <param name="newPoint">The new point.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Gjk.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Gjk.ComputeClosestPoint">
            <summary>
            Computes the closest point.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Gjk.Dot(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Dots the specified a.
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>Dot product.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Gjk.IsSatisfiesRule(System.Int32,System.Int32)">
            <summary>
            Determines whether [is satisfies rule] [the specified x bits].
            </summary>
            <param name="xBits">The x bits.</param>
            <param name="yBits">The y bits.</param>
            <returns>
              <c>true</c> if [is satisfies rule] [the specified x bits]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Gjk.UpdateDeterminant(System.Int32)">
            <summary>
            Updates the determinant.
            </summary>
            <param name="xmIdx">The xm idx.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Gjk.UpdateSimplex(System.Int32)">
            <summary>
            Updates the simplex.
            </summary>
            <param name="newIndex">The new index.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:WaveEngine.Common.Math.MathHelper">
            <summary>
            Math helper functions.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.MathHelper.E">
            <summary>
            Represents the mathematical constant e.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.MathHelper.Log10E">
            <summary>
            Represents the log base ten of e.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.MathHelper.Log2E">
            <summary>
            Represents the log base two of e.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.MathHelper.Pi">
            <summary>
            Represents the value of pi.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.MathHelper.PiOver2">
            <summary>
            Represents the value of pi divided by two.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.MathHelper.PiOver4">
            <summary>
            Represents the value of pi divided by four.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.MathHelper.TwoPi">
            <summary>
            Represents the value of pi times two.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.MathHelper.Epsilon">
            <summary>
            The epsilon
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates.
            </summary>
            <param name="value1">The coordinate on one axis of vertex 1 of the defining triangle.</param>
            <param name="value2">The coordinate on the same axis of vertex 2 of the defining triangle.</param>
            <param name="value3">The coordinate on the same axis of vertex 3 of the defining triangle.</param>
            <param name="amount1">The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in value2.</param>
            <param name="amount2">The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in value3.</param>
            <returns>Cartesian coordinate of the specified point with respect to the axis being used.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A position that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps a value between a minimum float and maximum float value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum value. If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. If value is greater than max, max will be returned.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps a value between a minimum float and maximum float value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The minimum value. If value is less than min, min will be returned.</param>
            <param name="max">The maximum value. If value is greater than max, max will be returned.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Distance(System.Single,System.Single)">
            <summary>
            Calculates the absolute value of the difference of two values.
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <returns>Distance between the two values.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">Source value1.</param>
            <param name="tangent1">Source tangent1</param>
            <param name="value2">Source value2.</param>
            <param name="tangent2">Source tangent2.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Area(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Linearly interpolates between value1 and value2 by amount.
            The parameter amount is not clamped and values outside the range [0, 1] will result in a return value outside the range [value1, value2].
            Returns a positive number if c is to the left of the line going from a to b.
            </summary>
            <param name="a">The first vector</param>
            <param name="b">The second vector</param>
            <param name="c">The third vector</param>
            <returns>Positive number if point is left, negative if point is right,
            and 0 if points are collinear.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <example>
            When amount = 0 returns value1.
            When amount = 1 return value2.
            When amount = 0.5 returns the midpoint of value1 and value2.
            </example>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <example>
            When amount = 0 returns value1.
            When amount = 1 return value2.
            When amount = 0.5 returns the midpoint of value1 and value2.
            </example>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.LerpClamped(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolates between value1 and value2 by amount.
            The parameter amount is clamped to the range [0, 1].
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2.</param>
            <example>
            When amount = 0 returns value1.
            When amount = 1 return value2.
            When amount = 0.5 returns the midpoint of value1 and value2.
            </example>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.InverseLerp(System.Single,System.Single,System.Single)">
            <summary>
            Calculates the linear parameter amount that produces the interpolant value within the range [value1, value2].
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <param name="value">Interpolant value.</param>
            <returns>The linear parameter amount</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Max(System.Single,System.Single)">
            <summary>
            Returns the greater of two values.
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <returns>The greater value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Min(System.Single,System.Single)">
            <summary>
            Returns the lesser of two or more values.
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <returns>The lesser value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Max(WaveEngine.Common.Math.Vector2@)">
            <summary>
            Returns the greater of two <see cref="T:WaveEngine.Common.Math.Vector2"/> components.
            </summary>
            <param name="value">Source value.</param>
            <returns>The greater value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Min(WaveEngine.Common.Math.Vector2@)">
            <summary>
            Returns the lesser of two <see cref="T:WaveEngine.Common.Math.Vector2"/> components.
            </summary>
            <param name="value">Source value.</param>
            <returns>The lesser value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Max(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Returns the greater of three <see cref="T:WaveEngine.Common.Math.Vector3"/> components.
            </summary>
            <param name="value">Source vector.</param>
            <returns>The greater value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.Min(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Returns the lesser of three <see cref="T:WaveEngine.Common.Math.Vector3"/> components.
            </summary>
            <param name="value">Source vector.</param>
            <returns>The lesser value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            Interpolates between two values using a cubic equation.
            </summary>
            <param name="value1">Source value1.</param>
            <param name="value2">Source value2.</param>
            <param name="amount">Weighting value.</param>
            <returns>Interpolated value.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.SmoothDamp(System.Single,System.Single,System.Single@,System.Single,System.Single)">
            <summary>
            Changes a float value towards a desired goal over time
            </summary>
            <param name="current">The current value</param>
            <param name="target">The target value</param>
            <param name="currentVelocity">The current velocity</param>
            <param name="smoothTime">The time it will take to reach the target.</param>
            <param name="gameTime">The current game time (time between last frame)</param>
            <returns>The smooth value</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.ToDegrees(System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.ToDegrees(System.Double)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.ToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.ToRadians(System.Double)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees..</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.WrapAngle(System.Single)">
            <summary>
            Reduces a given angle to a value between π and -π.
            </summary>
            <param name="angle">The angle to reduce, in radians.</param>
            <returns>The new angle, in radians.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.FloatEquals(System.Single,System.Single)">
            <summary>
            Checks if a floating point Value is equal to another,
            within a certain tolerance.
            </summary>
            <param name="value1">The first floating point Value.</param>
            <param name="value2">The second floating point Value.</param>
            <returns>True if the values are "equal", false otherwise.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.FloatEquals(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a floating point Value is equal to another,
            within a certain tolerance.
            </summary>
            <param name="value1">The first floating point Value.</param>
            <param name="value2">The second floating point Value.</param>
            <param name="delta">The floating point tolerance.</param>
            <returns>True if the values are "equal", false otherwise.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.MathHelper.FloatInRange(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a floating point Value is within a specified
            range of values (inclusive).
            </summary>
            <param name="value">The Value to check.</param>
            <param name="min">The minimum Value.</param>
            <param name="max">The maximum Value.</param>
            <returns>True if the Value is within the range specified,
            false otherwise.</returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Matrix">
            <summary>
            Represents a 4x4 matrix.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.identity">
            <summary>
            Identity matrix.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M11">
            <summary>
            First row, first column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M12">
            <summary>
            First row, second column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M13">
            <summary>
            First row, third column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M14">
            <summary>
            First row, fourth column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M21">
            <summary>
            Second row, first column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M22">
            <summary>
            Second row, second column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M23">
            <summary>
            Second row, third column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M24">
            <summary>
            Second row, fourth column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M31">
            <summary>
            Third row, first column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M32">
            <summary>
            Third row, second column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M33">
            <summary>
            Third row, third column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M34">
            <summary>
            Third row, fourth column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M41">
            <summary>
            Fourth row, first column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M42">
            <summary>
            Fourth row, second column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M43">
            <summary>
            Fourth row, third column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix.M44">
            <summary>
            Fourth row, fourth column.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Identity">
            <summary>
            Gets the identity.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Up">
            <summary>
            Gets or sets up.
            </summary>
            <value>
            Up vector.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Down">
            <summary>
            Gets or sets down.
            </summary>
            <value>
            Down vector.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>
            The right.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>
            The left.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Forward">
            <summary>
            Gets or sets the forward.
            </summary>
            <value>
            The forward.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Backward">
            <summary>
            Gets or sets the backward.
            </summary>
            <value>
            The backward.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Translation">
            <summary>
            Gets or sets the translation.
            </summary>
            <value>
            The translation.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Rotation">
            <summary>
            Gets the euler angles.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Orientation">
            <summary>
            Gets a quaternion from the Matrix.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Scale">
            <summary>
            Gets the scale vector from the matrix.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Basis">
            <summary>
            Gets or sets the basis matrix for the rotation.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Row1">
            <summary>
            Gets or sets the first row in the matrix; that is M11, M12, M13, and M14.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Row2">
            <summary>
            Gets or sets the second row in the matrix; that is M21, M22, M23, and M24.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Row3">
            <summary>
            Gets or sets the third row in the matrix; that is M31, M32, M33, and M34.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Row4">
            <summary>
            Gets or sets the fourth row in the matrix; that is M41, M42, M43, and M44.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Column1">
            <summary>
            Gets or sets the first column in the matrix; that is M11, M21, M31, and M41.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Column2">
            <summary>
            Gets or sets the second column in the matrix; that is M12, M22, M32, and M42.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Column3">
            <summary>
            Gets or sets the third column in the matrix; that is M13, M23, M33, and M43.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Column4">
            <summary>
            Gets or sets the fourth column in the matrix; that is M14, M24, M34, and M44.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Matrix"/> struct.
            </summary>
            <param name="m11">The M11.</param>
            <param name="m12">The M12.</param>
            <param name="m13">The M13.</param>
            <param name="m14">The M14.</param>
            <param name="m21">The M21.</param>
            <param name="m22">The M22.</param>
            <param name="m23">The M23.</param>
            <param name="m24">The M24.</param>
            <param name="m31">The M31.</param>
            <param name="m32">The M32.</param>
            <param name="m33">The M33.</param>
            <param name="m34">The M34.</param>
            <param name="m41">The M41.</param>
            <param name="m42">The M42.</param>
            <param name="m43">The M43.</param>
            <param name="m44">The M44.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Matrix"/> struct.
            </summary>
            <param name="values">The array values.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateBillboard(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Nullable{WaveEngine.Common.Math.Vector3})">
            <summary>
            Creates the billboard.
            </summary>
            <param name="objectPosition">The object position.</param>
            <param name="cameraPosition">The camera position.</param>
            <param name="cameraUpVector">The camera up vector.</param>
            <param name="cameraForwardVector">The camera forward vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateBillboard(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Nullable{WaveEngine.Common.Math.Vector3},WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the billboard.
            </summary>
            <param name="objectPosition">The object position.</param>
            <param name="cameraPosition">The camera position.</param>
            <param name="cameraUpVector">The camera up vector.</param>
            <param name="cameraForwardVector">The camera forward vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateConstrainedBillboard(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Nullable{WaveEngine.Common.Math.Vector3},System.Nullable{WaveEngine.Common.Math.Vector3})">
            <summary>
            Creates the constrained billboard.
            </summary>
            <param name="objectPosition">The object position.</param>
            <param name="cameraPosition">The camera position.</param>
            <param name="rotateAxis">The rotate axis.</param>
            <param name="cameraForwardVector">The camera forward vector.</param>
            <param name="objectForwardVector">The object forward vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateConstrainedBillboard(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Nullable{WaveEngine.Common.Math.Vector3},System.Nullable{WaveEngine.Common.Math.Vector3},WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the constrained billboard.
            </summary>
            <param name="objectPosition">The object position.</param>
            <param name="cameraPosition">The camera position.</param>
            <param name="rotateAxis">The rotate axis.</param>
            <param name="cameraForwardVector">The camera forward vector.</param>
            <param name="objectForwardVector">The object forward vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateTranslation(WaveEngine.Common.Math.Vector3)">
            <summary>
            Creates the translation.
            </summary>
            <param name="position">The position.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateTranslation(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the translation.
            </summary>
            <param name="position">The position.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateTranslation(System.Single,System.Single,System.Single)">
            <summary>
            Creates the translation.
            </summary>
            <param name="xPosition">The x position.</param>
            <param name="yPosition">The y position.</param>
            <param name="zPosition">The z position.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateTranslation(System.Single,System.Single,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the translation.
            </summary>
            <param name="xPosition">The x position.</param>
            <param name="yPosition">The y position.</param>
            <param name="zPosition">The z position.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateScale(System.Single,System.Single,System.Single)">
            <summary>
            Creates the scale.
            </summary>
            <param name="xScale">The x scale.</param>
            <param name="yScale">The y scale.</param>
            <param name="zScale">The z scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateScale(System.Single,System.Single,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="xScale">The x scale.</param>
            <param name="yScale">The y scale.</param>
            <param name="zScale">The z scale.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateScale(WaveEngine.Common.Math.Vector3)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scales">The scales.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateScale(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scales">The scales.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateScale(System.Single)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateScale(System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scale">The scale.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateRotationX(System.Single)">
            <summary>
            Creates the rotation X.
            </summary>
            <param name="radians">The radians.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateRotationX(System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the rotation X.
            </summary>
            <param name="radians">The radians.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateRotationY(System.Single)">
            <summary>
            Creates the rotation Y.
            </summary>
            <param name="radians">The radians.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateRotationY(System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the rotation Y.
            </summary>
            <param name="radians">The radians.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateRotationZ(System.Single)">
            <summary>
            Creates the rotation Z.
            </summary>
            <param name="radians">The radians.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateRotationZ(System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the rotation Z.
            </summary>
            <param name="radians">The radians.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromTRS(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Create a translation, rotation and scaling matrix.
            </summary>
            <param name="translate">Translate vector.</param>
            <param name="rotation">The euler angles (Pitch, Yaw, Roll).</param>
            <param name="scale">Scale vector.</param>
            <returns>The TRS matrix.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromTRS(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Create a translation, rotation and scaling matrix.
            </summary>
            <param name="translate">Translate vector.</param>
            <param name="rotation">The euler angles (Pitch, Yaw, Roll).</param>
            <param name="scale">Scale vector.</param>
            <param name="matrix">The TRS matrix.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromTRS(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)">
            <summary>
            Create a translation, rotation and scaling matrix.
            </summary>
            <param name="translate">Translate vector.</param>
            <param name="orientation">Orientation quaternion.</param>
            <param name="scale">Scale vector.</param>
            <returns>The TRS matrix.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromTRS(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Create a translation, rotation and scaling matrix.
            </summary>
            <param name="translate">Translate vector.</param>
            <param name="orientation">Orientation quaternion.</param>
            <param name="scale">Scale vector.</param>
            <param name="matrix">The TRS Matrix.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromAxisAngle(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Creates from axis angle.
            </summary>
            <param name="axis">The axis.</param>
            <param name="angle">The angle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromAxisAngle(WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates from axis angle.
            </summary>
            <param name="axis">The axis.</param>
            <param name="angle">The angle.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates the perspective field of view.
            </summary>
            <param name="fieldOfView">The field of view.</param>
            <param name="aspectRatio">The aspect ratio.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the perspective field of view.
            </summary>
            <param name="fieldOfView">The field of view.</param>
            <param name="aspectRatio">The aspect ratio.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates the perspective.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the perspective.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates the perspective off center.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the perspective off center.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
            <param name="nearPlaneDistance">The near plane distance.</param>
            <param name="farPlaneDistance">The far plane distance.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates the orthographic.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="zNearPlane">The z near plane.</param>
            <param name="zFarPlane">The z far plane.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the orthographic.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="zNearPlane">The z near plane.</param>
            <param name="zFarPlane">The z far plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates the orthographic off center.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
            <param name="zNearPlane">The z near plane.</param>
            <param name="zFarPlane">The z far plane.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the orthographic off center.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <param name="top">The top.</param>
            <param name="zNearPlane">The z near plane.</param>
            <param name="zFarPlane">The z far plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateLookAt(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Creates the look at.
            </summary>
            <param name="position">The init position.</param>
            <param name="target">The target.</param>
            <param name="upVector">The up vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateLookAt(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the look at.
            </summary>
            <param name="position">The init position.</param>
            <param name="target">The look target.</param>
            <param name="upVector">The up vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateWorld(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Creates the world.
            </summary>
            <param name="position">The position.</param>
            <param name="forward">The forward.</param>
            <param name="up">Up vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateWorld(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the world.
            </summary>
            <param name="position">The position.</param>
            <param name="forward">The forward.</param>
            <param name="up">Up vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromQuaternion(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Creates from quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromQuaternion(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates from quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates from yaw pitch roll.
            </summary>
            <param name="yaw">The yaw.</param>
            <param name="pitch">The pitch.</param>
            <param name="roll">The roll.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates from yaw pitch roll.
            </summary>
            <param name="yaw">The yaw.</param>
            <param name="pitch">The pitch.</param>
            <param name="roll">The roll.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateShadow(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Plane)">
            <summary>
            Creates the shadow.
            </summary>
            <param name="lightDirection">The light direction.</param>
            <param name="plane">The plane.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateShadow(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the shadow.
            </summary>
            <param name="lightDirection">The light direction.</param>
            <param name="plane">The plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateReflection(WaveEngine.Common.Math.Plane)">
            <summary>
            Creates the reflection.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.CreateReflection(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates the reflection.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Transform(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Transform(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Equals(WaveEngine.Common.Math.Matrix)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Equals(WaveEngine.Common.Math.Matrix@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Transpose(WaveEngine.Common.Math.Matrix)">
            <summary>
            Transposes the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Transpose(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Transposes the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Determinant">
            <summary>
            Determinants this instance.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Invert">
            <summary>
            Inverts the specified matrix.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Invert(WaveEngine.Common.Math.Matrix)">
            <summary>
            Inverts the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Invert(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Inverts the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Lerp(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix,System.Single)">
            <summary>
            Lerps the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Lerp(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Lerps the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Negate(WaveEngine.Common.Math.Matrix)">
            <summary>
            Negates the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Negate(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Negates the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Add(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Adds the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Add(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Adds the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Subtract(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Subtracts the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Subtract(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Subtracts the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Multiply(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Multiply(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Multiply(WaveEngine.Common.Math.Matrix,System.Single)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Multiply(WaveEngine.Common.Math.Matrix@,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Divide(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Divide(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Divide(WaveEngine.Common.Math.Matrix,System.Single)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="divider">The divider.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Divide(WaveEngine.Common.Math.Matrix@,System.Single,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="divider">The divider.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Abs(WaveEngine.Common.Math.Matrix)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The absolute matrix</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.Abs(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_UnaryNegation(WaveEngine.Common.Math.Matrix)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Equality(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Inequality(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Addition(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Subtraction(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Multiply(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Multiply(WaveEngine.Common.Math.Matrix,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Multiply(System.Single,WaveEngine.Common.Math.Matrix)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="scaleFactor">The scale factor.</param>
            <param name="matrix">The matrix.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Division(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.op_Division(WaveEngine.Common.Math.Matrix,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="divider">The divider.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix.ToEngineFlippedYMatrix(WaveEngine.Common.Math.Matrix@,System.Single[])">
            <summary>
            Convert to a Flipped Y WaveEngine matrix.
            </summary>
            <param name="m">reference to a Wave Engine matrix.</param>
            <param name="mat">OpenGL matrix.</param>
        </member>
        <member name="T:WaveEngine.Common.Math.Matrix3x3">
            <summary>
            Represents a 3x3 matrix.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.identity">
            <summary>
            Identity matrix.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M11">
            <summary>
            First row, first column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M12">
            <summary>
            First row, second column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M13">
            <summary>
            First row, third column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M21">
            <summary>
            Second row, first column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M22">
            <summary>
            Second row, second column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M23">
            <summary>
            Second row, third column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M31">
            <summary>
            Third row, first column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M32">
            <summary>
            Third row, second column.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Matrix3x3.M33">
            <summary>
            Third row, third column.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix3x3.Identity">
            <summary>
            Gets the identity.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix3x3.Up">
            <summary>
            Gets or sets up.
            </summary>
            <value>
            Up vector.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix3x3.Down">
            <summary>
            Gets or sets down.
            </summary>
            <value>
            Down vector.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix3x3.Right">
            <summary>
            Gets or sets the right.
            </summary>
            <value>
            The right.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix3x3.Left">
            <summary>
            Gets or sets the left.
            </summary>
            <value>
            The left.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix3x3.Translation">
            <summary>
            Gets or sets the translation.
            </summary>
            <value>
            The translation.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix3x3.Rotation">
            <summary>
            Gets the roll angle.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Matrix3x3.Scale">
            <summary>
            Gets the scale vector from the matrix.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Matrix3x3"/> struct.
            </summary>
            <param name="m11">The M11.</param>
            <param name="m12">The M12.</param>
            <param name="m13">The M13.</param>
            <param name="m21">The M21.</param>
            <param name="m22">The M22.</param>
            <param name="m23">The M23.</param>
            <param name="m31">The M31.</param>
            <param name="m32">The M32.</param>
            <param name="m33">The M33.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateTranslation(WaveEngine.Common.Math.Vector2)">
            <summary>
            Creates the translation.
            </summary>
            <param name="position">The position.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateTranslation(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Creates the translation.
            </summary>
            <param name="position">The position.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateTranslation(System.Single,System.Single)">
            <summary>
            Creates the translation.
            </summary>
            <param name="xPosition">The x position.</param>
            <param name="yPosition">The y position.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateTranslation(System.Single,System.Single,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Creates the translation.
            </summary>
            <param name="xPosition">The x position.</param>
            <param name="yPosition">The y position.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateRotation(System.Single)">
            <summary>
            Creates the rotation.
            </summary>
            <param name="angle">The angle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateRotation(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Creates the rotation.
            </summary>
            <param name="translate">The translate.</param>
            <param name="angle">The angle.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateScale(System.Single,System.Single)">
            <summary>
            Creates the scale.
            </summary>
            <param name="xScale">The x scale.</param>
            <param name="yScale">The y scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateScale(System.Single,System.Single,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="xScale">The x scale.</param>
            <param name="yScale">The y scale.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateScale(WaveEngine.Common.Math.Vector2)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scales">The scales.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateScale(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scales">The scales.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateScale(System.Single)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scale">The scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateScale(System.Single,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Creates the scale.
            </summary>
            <param name="scale">The scale.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateTransform(WaveEngine.Common.Math.Vector2,System.Single,WaveEngine.Common.Math.Vector2)">
            <summary>
            Creates a transform matrix.
            </summary>
            <param name="translate">2D translation.</param>
            <param name="angle">Rotation angle.</param>
            <param name="scale">Axis scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateTransform(WaveEngine.Common.Math.Vector2,System.Single,System.Single)">
            <summary>
            Creates a transform matrix.
            </summary>
            <param name="translate">2D translation.</param>
            <param name="angle">Rotation angle.</param>
            <param name="scale">Axis scale.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateFromQuaternion(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Creates from quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.CreateFromQuaternion(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Creates from quaternion.
            </summary>
            <param name="quaternion">The quaternion.</param>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Equals(WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Equals(WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Transpose(WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Transposes the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Transpose(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Transposes the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.SetSameDiagonal(System.Single)">
            <summary>
            Set the same diagonal values in the matrix
            </summary>
            <param name="d">The diagonal value.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Determinant">
            <summary>
            Determinants this instance.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Invert(WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Inverts the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Invert(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Inverts the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Lerp(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3,System.Single)">
            <summary>
            Lerps the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Lerp(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@,System.Single,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Lerps the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Negate(WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Negates the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Negate(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Negates the specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Add(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Adds the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Add(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Adds the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Subtract(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Subtracts the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Subtract(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Subtracts the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Multiply(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Multiply(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Multiply(WaveEngine.Common.Math.Matrix3x3,System.Single)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Multiply(WaveEngine.Common.Math.Matrix3x3@,System.Single,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Multiplies the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Divide(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Divide(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Divide(WaveEngine.Common.Math.Matrix3x3,System.Single)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="divider">The divider.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.Divide(WaveEngine.Common.Math.Matrix3x3@,System.Single,WaveEngine.Common.Math.Matrix3x3@)">
            <summary>
            Divides the specified matrix1.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="divider">The divider.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.ToMatrix4x4(WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Creates a 4x4 matrix from a 3x3 matrix.
            </summary>
            <param name="a">3x3 matrix.</param>
            <returns>Created 4x4 matrix.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.ToMatrix4x4(WaveEngine.Common.Math.Matrix3x3@,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Creates a 4x4 matrix from a 3x3 matrix.
            </summary>
            <param name="a">3x3 matrix.</param>
            <param name="b">Created 4x4 matrix.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_UnaryNegation(WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Equality(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Inequality(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Addition(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Subtraction(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Multiply(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Multiply(WaveEngine.Common.Math.Matrix3x3,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Multiply(System.Single,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="scaleFactor">The scale factor.</param>
            <param name="matrix">The matrix.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Division(WaveEngine.Common.Math.Matrix3x3,WaveEngine.Common.Math.Matrix3x3)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="matrix2">The matrix2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Matrix3x3.op_Division(WaveEngine.Common.Math.Matrix3x3,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="matrix1">The matrix1.</param>
            <param name="divider">The divider.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Plane">
            <summary>
            Represents a plane.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Plane.Normal">
            <summary>
            Plane normal.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Plane.D">
            <summary>
            Plane distance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Plane"/> struct.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.#ctor(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Plane"/> struct.
            </summary>
            <param name="normal">The normal.</param>
            <param name="d">The d.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.#ctor(WaveEngine.Common.Math.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Plane"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Plane"/> struct.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="point3">The point3.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Equals(WaveEngine.Common.Math.Plane)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Equals(WaveEngine.Common.Math.Plane@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Normalize(WaveEngine.Common.Math.Plane)">
            <summary>
            Normalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Normalize(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.Plane@)">
            <summary>
            Normalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Transform(WaveEngine.Common.Math.Plane,WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Transform(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Plane@)">
            <summary>
            Transforms the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Transform(WaveEngine.Common.Math.Plane,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Transforms the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="rotation">The rotation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Transform(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Plane@)">
            <summary>
            Transforms the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="rotation">The rotation.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Dot(WaveEngine.Common.Math.Vector4)">
            <summary>
            Dots the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Dot(WaveEngine.Common.Math.Vector4@,System.Single@)">
            <summary>
            Dots the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.DotCoordinate(WaveEngine.Common.Math.Vector3)">
            <summary>
            Dots the coordinate.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.DotCoordinate(WaveEngine.Common.Math.Vector3@,System.Single@)">
            <summary>
            Dots the coordinate.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.DotNormal(WaveEngine.Common.Math.Vector3)">
            <summary>
            Dots the normal.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.DotNormal(WaveEngine.Common.Math.Vector3@,System.Single@)">
            <summary>
            Dots the normal.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Intersects(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Intersects(WaveEngine.Common.Math.BoundingBox@,WaveEngine.Common.Math.PlaneIntersectionType@)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Intersects(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Intersectses the specified frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Intersects(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Intersects(WaveEngine.Common.Math.BoundingSphere@,WaveEngine.Common.Math.PlaneIntersectionType@)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Intersects(WaveEngine.Common.Math.Plane)">
            <summary>
            Computes the intersection line between two planes.
            </summary>
            <param name="p2">The p2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.Intersects(WaveEngine.Common.Math.Plane@,WaveEngine.Common.Math.Ray@)">
            <summary>
            Computes the intersection line between two planes.
            </summary>
            <param name="p2">The p2.</param>
            <param name="ray">The intersection line.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.op_Equality(WaveEngine.Common.Math.Plane,WaveEngine.Common.Math.Plane)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Plane.op_Inequality(WaveEngine.Common.Math.Plane,WaveEngine.Common.Math.Plane)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.PlaneIntersectionType">
            <summary>
            Type of plane intersection.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.PlaneIntersectionType.Front">
            <summary>
            Intersects in front.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.PlaneIntersectionType.Back">
            <summary>
            Intersects in back.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.PlaneIntersectionType.Intersecting">
            <summary>
            Plane intersects.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Math.Point">
            <summary>
            Represents a 2D point.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Point.zero">
            <summary>
            Point with zero values.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Point.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Point.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Point.Zero">
            <summary>
            Gets the zero.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Math.Point"/> struct.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Point"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.Equals(WaveEngine.Common.Math.Point)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.Equals(WaveEngine.Common.Math.Point@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.op_Equality(WaveEngine.Common.Math.Point,WaveEngine.Common.Math.Point)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Point.op_Inequality(WaveEngine.Common.Math.Point,WaveEngine.Common.Math.Point)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Quaternion">
            <summary>
            Quaternions are very useful used to represent rotations because they don't suffer from gimbal lock and can be easily interpolated.
            Wave Engine internally uses Quaternions to represent all rotations.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Quaternion.identity">
            <summary>
            Identity quaternion.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Quaternion.X">
            <summary>
            X component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Quaternion.Y">
            <summary>
            Y component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Quaternion.Z">
            <summary>
            Z component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Quaternion.W">
            <summary>
            W component.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Quaternion.Identity">
            <summary>
            Gets the identity quaternion.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Math.Quaternion"/> struct.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Quaternion"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="w">The w.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.#ctor(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Quaternion"/> struct.
            </summary>
            <param name="vectorPart">The vector part.</param>
            <param name="scalarPart">The scalar part.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Equals(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Returns a value that indicates whether the current instance is equal to another quaternion
            </summary>
            <param name="other">The quaternion to compare.</param>
            <returns>True if the current instance is equal to the given quaternion.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Equals(WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Returns a value that indicates whether the current instance is equal to another quaternion
            </summary>
            <param name="other">The quaternion to compare.</param>
            <returns>True if the current instance is equal to the given quaternion.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.LengthSquared">
            <summary>
            Returns the square of the current quaternion instance length
            </summary>
            <returns>The square of the current quaternion instance length.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Length">
            <summary>
            Returns the lenght of the current quaternion instance
            </summary>
            <returns>The lenght of the current quaternion instance.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Normalize">
            <summary>
            Normalizes this quaternion instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Normalize(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Normalizes the given quaternion.
            </summary>
            <param name="quaternion">The quaternion to be normalized.</param>
            <returns>The normalized quaternion.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Normalize(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Normalizes the given quaternion.
            </summary>
            <param name="quaternion">The quaternion to be normalized.</param>
            <param name="result">The normalized quaternion.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Conjugate">
            <summary>
            Conjugates this quaternion instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Conjugate(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Conjugates the given quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <returns>The conjugated quaternion.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Conjugate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Conjugates the given quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <param name="result">The conjugated quaternion.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Inverse(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Returns the inverse of the given quaternion.
            </summary>
            <param name="quaternion">The quaternion to inverse.</param>
            <returns>The inversed quaternion.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Inverse(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Returns the inverse of the given quaternion.
            </summary>
            <param name="quaternion">The quaternion to inverse.</param>
            <param name="result">The inversed quaternion.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Creates a quaternion which rotates angle radians around axis.
            </summary>
            <param name="axis">The axis.</param>
            <param name="angle">The angle (radians).</param>
            <returns>The quaternion created.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromAxisAngle(WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Creates a quaternion which rotates angle radians around axis.
            </summary>
            <param name="axis">The axis.</param>
            <param name="angle">The angle (radians).</param>
            <param name="result">The quaternion created.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a quaternion from yaw pitch roll.
            </summary>
            <param name="yaw">The yaw (radians).</param>
            <param name="pitch">The pitch (radians).</param>
            <param name="roll">The roll (radians).</param>
            <returns>The quaternion created.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Creates a quaternion from yaw pitch roll.
            </summary>
            <param name="yaw">The yaw (radians).</param>
            <param name="pitch">The pitch (radians).</param>
            <param name="roll">The roll (radians).</param>
            <param name="result">The quaternion created.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromEuler(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Creates a quaternion from euler angles.
            </summary>
            <param name="euler">The euler angles.</param>
            <param name="result">The quaternion created.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromEuler(WaveEngine.Common.Math.Vector3)">
            <summary>
            Creates a quaternion from euler angles.
            </summary>
            <param name="euler">The euler angles.</param>
            <returns>The quaternion created.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Creates a quaternion from the angle between two vectors.
            </summary>
            <param name="u">First vector.</param>
            <param name="v">Second vector.</param>
            <returns>The quaternion created.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromTwoVectors(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Creates a quaternion from the angle between the lookAt and Vector3.Up vectors.
            </summary>
            <param name="lookAt">The look at vector.</param>
            <param name="result">The quaternion created.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromLookAt(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Creates a quaternion from the lookAt and up vector.
            </summary>
            <param name="lookAt">The look at vector.</param>
            <param name="up">The Up vector</param>
            <param name="result">The quaternion created.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix(WaveEngine.Common.Math.Matrix)">
            <summary>
            Creates a quaternion from a rotation matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The quaternion created.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.CreateFromRotationMatrix(WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Creates a quaternion from a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="quaternion">The rotation created.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Dot(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            The Dot product between two quaternions.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Slerp(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,System.Single)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <param name="amount">A value that indicates how far to interpolate between the quaternions.</param>
            <returns>The interpolated quaternion.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Slerp(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion .</param>
            <param name="amount">A value that indicates how far to interpolate between the quaternions.</param>
            <param name="result">The interpolated quaternion.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Lerp(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,System.Single)">
            <summary>
            Interpolates between quaternion1 and quaternion2 by amount and normalizes the result afterwards..
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <param name="amount">Clamped to the range [0, 1].</param>
            <returns>The interpolated quaternion.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Lerp(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Interpolates between quaternion1 and quaternion2 by amount and normalizes the result afterwards..
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <param name="amount">Clamped to the range [0, 1].</param>
            <param name="result">The interpolated quaternion.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.SmoothDamp(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion@,System.Single,System.Single)">
            <summary>
            Changes a quaternion towards a desired goal over time
            </summary>
            <param name="current">Current quaternion</param>
            <param name="target">Target quaternion</param>
            <param name="deriv">Derivative quaternion</param>
            <param name="smoothTime">The smooth time.</param>
            <param name="gameTime">The elapsed time.</param>
            <returns>The smoothed quaternion</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Concatenate(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Concatenates the specified quaternions.
            </summary>
            <param name="value1">The first quaternion.</param>
            <param name="value2">The second quaternion.</param>
            <returns>The concatenated quaternion.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Concatenate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Concatenates the specified quaternions.
            </summary>
            <param name="value1">The first quaternion.</param>
            <param name="value2">The second quaternion.</param>
            <param name="result">The concatenated quaternion.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Negate(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Negates the given quaternion.
            </summary>
            <param name="quaternion">The quaternion to negate.</param>
            <returns>The negated quaternion.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Negate(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Negates the given quaternion.
            </summary>
            <param name="quaternion">The quaternion to negate.</param>
            <param name="result">The negated quaternion.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Add(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>The resulting quaternion.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Add(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <param name="result">The resulting quaternion.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Subtract(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <returns>The resulting quaternion.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Subtract(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="quaternion1">The quaternion1.</param>
            <param name="quaternion2">The quaternion2.</param>
            <param name="result">The resulting quaternion.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Combines two quaternions. Combining quaternions is the same as applying them in sequence but the order matters.
            </summary>
            <param name="quaternion1">The first quaternion to apply.</param>
            <param name="quaternion2">The second quaternion to apply.</param>
            <returns>The quaternion resulting of applying quaternion1 and then quaternion2.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Combines two quaternions. Combining quaternions is the same as applying them in sequence but the order matters.
            </summary>
            <param name="quaternion1">The first quaternion to apply.</param>
            <param name="quaternion2">The second quaternion to apply.</param>
            <param name="result">The quaternion resulting of applying quaternion1 and then quaternion2.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion,System.Single)">
            <summary>
            Applies a scale factor to a quaternion.
            </summary>
            <param name="quaternion1">The quaternion to scale.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>The quaternion resulting of applying the scale factor.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Multiply(WaveEngine.Common.Math.Quaternion@,System.Single,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Applies a scale factor to a quaternion.
            </summary>
            <param name="quaternion1">The quaternion to scale.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">The quaternion resulting of applying the scale factor.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Divide(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Divides a quaternion by another quaternion
            </summary>
            <param name="quaternion1">Source quaternion</param>
            <param name="quaternion2">The divisor.</param>
            <returns>The quaternion resulting of dividing two quaternions.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.Divide(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Quaternion@)">
            <summary>
            Divides a quaternion by another quaternion
            </summary>
            <param name="quaternion1">Source quaternion</param>
            <param name="quaternion2">The divisor.</param>
            <param name="result">The quaternion resulting of dividing two quaternions.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_UnaryNegation(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Implements the operator -.
            Subtracts a quaternion from another quaternion
            </summary>
            <param name="quaternion">A quaternion.</param>
            <returns>
            The result of the subtraction
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_Equality(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Implements the operator ==.
            Compares two quaternions
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <returns>
            <c>true</c> if the quaternions are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_Inequality(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Implements the operator !=.
            Compares two quaternions
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <returns>
            <c>true</c> if the quaternions are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_Addition(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Implements the operator +.
            Adds two quaternions.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <returns>
            The resulting quaternion.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_Subtraction(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Implements the operator -.
            Subtracts two quaternions.
            </summary>
            <param name="quaternion1">The first quaternion.</param>
            <param name="quaternion2">The second quaternion.</param>
            <returns>
            The resulting quaternion.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Implements the operator *.
            Combines two quaternions. Combining quaternions is the same as applying them in sequence but the order matters.
            </summary>
            <param name="quaternion1">The first quaternion to apply.</param>
            <param name="quaternion2">The second quaternion to apply.</param>
            <returns>
            The quaternion resulting of applying quaternion1 and then quaternion2.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_Multiply(WaveEngine.Common.Math.Quaternion,System.Single)">
            <summary>
            Implements the operator *.
            Applies a scale factor to a quaternion.
            </summary>
            <param name="quaternion1">The quaternion to scale.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>
            The quaternion resulting of applying the scale factor.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_Multiply(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator *
            </summary>
            <param name="rotation">The rotation quaternion.</param>
            <param name="point">The point as vector3.</param>
            <returns>Rotates the point with rotation.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.op_Division(WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Implements the operator /.
            Divides a quaternion by another quaternion
            </summary>
            <param name="quaternion1">Source quaternion.</param>
            <param name="quaternion2">The divisor.</param>
            <returns>
            The quaternion resulting of dividing two quaternions.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.ToEuler(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Converts a Quaternion to Euler angles (X = pitch, Y = yaw, Z = roll).
            </summary>
            <param name="orientation">The rotation.</param>
            <returns>The rotationaxes.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.ToEuler(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Converts a Quaternion to Euler angles (X = pitch, Y = yaw, Z = roll).
            </summary>
            <param name="orientation">The rotation.</param>
            <param name="rotationaxes">The rotationaxes.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.ToAngleAxis(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@,System.Single@)">
            <summary>
            Obtains the Angle and Axis of a Quaternion
            </summary>
            <param name="orientation">The quaternion.</param>
            <param name="axis">The axis of the quaternion.</param>
            <param name="angle">The angle of the quaternion.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.ArcTanAngle(System.Single,System.Single)">
            <summary>
            In a 2D grid, returns the angle to a specified point from the +X axis.
            </summary>
            <param name="x">The X.</param>
            <param name="y">The Y.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Quaternion.AngleTo(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Returns Euler angles that point from one point to another.
            </summary>
            <param name="from">From vector.</param>
            <param name="location">The location.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Ray">
            <summary>
            Represents a ray.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Ray.Position">
            <summary>
            Ray origin position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Ray.Direction">
            <summary>
            Ray direction.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Ray"/> struct.
            </summary>
            <param name="position">The position.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Equals(WaveEngine.Common.Math.Ray)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Equals(WaveEngine.Common.Math.Ray@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Intersects(WaveEngine.Common.Math.BoundingBox)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Intersects(WaveEngine.Common.Math.BoundingBox@,System.Nullable{System.Single}@)">
            <summary>
            Intersectses the specified box.
            </summary>
            <param name="box">The box.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Intersects(WaveEngine.Common.Math.BoundingFrustum)">
            <summary>
            Intersectses the specified frustum.
            </summary>
            <param name="frustum">The frustum.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Intersects(WaveEngine.Common.Math.Plane,System.Boolean)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="ignoreNegative">Ignore negative values</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Intersects(WaveEngine.Common.Math.Plane@,System.Nullable{System.Single}@)">
            <summary>
            Intersectses the specified plane.
            </summary>
            <param name="plane">The plane.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Intersects(WaveEngine.Common.Math.BoundingSphere)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Intersects(WaveEngine.Common.Math.BoundingSphere@,System.Nullable{System.Single}@)">
            <summary>
            Intersectses the specified sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.Intersects(WaveEngine.Common.Math.Ray@,System.Nullable{System.Single}@,System.Nullable{System.Single}@)">
            <summary>
            Calculate the closest points between two rays
            </summary>
            <param name="ray">The second ray</param>
            <param name="distanceA">The closest point distance in first ray to the second ray </param>
            <param name="distanceB">The closest point distance in second ray to the first ray</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.IntersectionXPlane(System.Single)">
            <summary>
            Gets the intersection point with the X plane at the specified X value
            </summary>
            <param name="xValue">The X plane value.</param>
            <returns>The intersection point with the ray</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.IntersectionXPlane(System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the intersection point with the X plane at the specified X value
            </summary>
            <param name="xValue">The X plane value.</param>
            <param name="point">The intersection point with the ray</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.IntersectionYPlane(System.Single)">
            <summary>
            Gets the intersection point with the Y plane at the specified Y value
            </summary>
            <param name="yValue">The Y plane value.</param>
            <returns>The intersection point with the ray</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.IntersectionYPlane(System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the intersection point with the Y plane at the specified Y value
            </summary>
            <param name="yValue">The Y plane value.</param>
            <param name="point">The intersection point with the ray</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.IntersectionZPlane(System.Single)">
            <summary>
            Gets the intersection point with the Z plane at the specified Z value
            </summary>
            <param name="zValue">The Z plane value.</param>
            <returns>The intersection point with the ray</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.IntersectionZPlane(System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets the intersection point with the Z plane at the specified Z value
            </summary>
            <param name="zValue">The Z plane value.</param>
            <param name="point">The intersection point with the ray</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.GetPoint(System.Single)">
            <summary>
            Gets a point at distance units along the ray
            </summary>
            <param name="distance">he distance</param>
            <returns>The point</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.GetPoint(System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Gets a point at distance units along the ray
            </summary>
            <param name="distance">he distance</param>
            <param name="result">The point</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.op_Equality(WaveEngine.Common.Math.Ray,WaveEngine.Common.Math.Ray)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Ray.op_Inequality(WaveEngine.Common.Math.Ray,WaveEngine.Common.Math.Ray)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="a">The a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.RayHit3D">
            <summary>
            Contains ray hit data.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.RayHit3D.Location">
            <summary>
            Location of the ray hit.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.RayHit3D.Normal">
            <summary>
            Normal of the ray hit.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.RayHit3D.T">
            <summary>
            T parameter of the ray hit.
            The ray hit location is equal to the ray origin added to the ray direction multiplied by T.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Math.Rectangle">
            <summary>
            Stores a set of four integers that represent the location and size of a rectangle.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Rectangle.empty">
            <summary>
            Represents an instance of the <see cref="T:WaveEngine.Common.Math.Rectangle"/> class with its members uninitialized.
            </summary>
            <remarks>
            The members of the new <see cref="T:WaveEngine.Common.Math.Rectangle"/> are left uninitialized.
            </remarks>
        </member>
        <member name="F:WaveEngine.Common.Math.Rectangle.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure. The default is 0.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Rectangle.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure. The default is 0.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Rectangle.Width">
            <summary>
            Gets or sets the width of this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure. The default is 0.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Rectangle.Height">
            <summary>
            Gets or sets the height of this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure. The default is 0.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Rectangle.Left">
            <summary>
            Gets the x-coordinate of the left edge of this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Rectangle.Right">
            <summary>
            Gets the x-coordinate that is the sum of <see cref="F:WaveEngine.Common.Math.Rectangle.X"/> and <see cref="F:WaveEngine.Common.Math.Rectangle.Width"/> of this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Rectangle.Top">
            <summary>
            Gets the y-coordinate of the top edge of this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Rectangle.Bottom">
            <summary>
            Gets the y-coordinate that is the sum of <see cref="F:WaveEngine.Common.Math.Rectangle.Y"/> and <see cref="F:WaveEngine.Common.Math.Rectangle.Height"/> of this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Rectangle.Location">
            <summary>
            Gets or sets the coordinates of the upper-left corner of this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure.
            </summary>
            <value>
            A <see cref="T:WaveEngine.Common.Math.Point"/> that represents the upper-left corner of this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Rectangle.Center">
            <summary>
            Gets the coordinates of the center of this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure.
            </summary>
            <value>
            A <see cref="T:WaveEngine.Common.Math.Point"/> that represents the center of this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.Rectangle.Empty">
            <summary>
            Gets an instance of the <see cref="T:WaveEngine.Common.Math.Rectangle"/> class with its members uninitialized.
            </summary>
            <remarks>
            The members of the new <see cref="T:WaveEngine.Common.Math.Rectangle"/> are left uninitialized.
            </remarks>
        </member>
        <member name="P:WaveEngine.Common.Math.Rectangle.IsEmpty">
            <summary>
            Gets a value indicating whether the <see cref="F:WaveEngine.Common.Math.Rectangle.Width"/> or <see cref="F:WaveEngine.Common.Math.Rectangle.Height"/> property of this <see cref="T:WaveEngine.Common.Math.Rectangle"/> has a value of zero.
            </summary>
            <value>.
              This property returns <c>true</c> if the <see cref="F:WaveEngine.Common.Math.Rectangle.Width"/> or <see cref="F:WaveEngine.Common.Math.Rectangle.Height"/> property of this
              <see cref="T:WaveEngine.Common.Math.Rectangle"/> has a value of zero; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Math.Rectangle"/> struct.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Rectangle"/> struct with the specified location and size.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Offset(WaveEngine.Common.Math.Point)">
            <summary>
            Adjusts the location of this rectangle by the specified <paramref name="amount"/>.
            </summary>
            <param name="amount">The amount to offset the location.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Offset(System.Int32,System.Int32)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="offsetX">The amount to offset the location horizontally.</param>
            <param name="offsetY">The amount to offset the location vertically.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Inflate(System.Int32,System.Int32)">
            <summary>
            Enlarges this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure by the specified amount.
            </summary>
            <param name="horizontalAmount">The amount to inflate this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure horizontally.</param>
            <param name="verticalAmount">The amount to inflate this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure vertically.</param>
            <remarks>
            This method enlarges this rectangle, not a copy of it. The rectangle is enlarged in both directions along an axis.
            For example, if a 50 by 50 rectangle is inflated by 50 in the x-axis, the resultant rectangle will be 150 units long
            (the original 50, the 50 in the minus direction, and the 50 in the plus direction) maintaining the rectangle's geometric center.
            If either x or y is negative, the <see cref="T:WaveEngine.Common.Math.Rectangle"/> is deflated in the corresponding direction.
            </remarks>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>
            Determines if the specified point is contained within this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure.
            </summary>
            <param name="x">The x-coordinate of the point to test.</param>
            <param name="y">The y-coordinate of the point to test.</param>
            <returns>
              This method returns <c>true</c> if the point defined by <paramref name="x"/> and <paramref name="y"/>
              is contained within this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Contains(WaveEngine.Common.Math.Point)">
            <summary>
            Determines if the specified point is contained within this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure.
            </summary>
            <param name="pt">The <see cref="T:WaveEngine.Common.Math.Point"/> to test.</param>
            <returns>
              This method returns <c>true</c> if the point represented by the <paramref name="pt"/> parameter is contained
              within this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Contains(WaveEngine.Common.Math.Point@,System.Boolean@)">
            <summary>
            Determines if the specified point is contained within this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure.
            </summary>
            <param name="pt">The <see cref="T:WaveEngine.Common.Math.Point"/> to test.</param>
            <param name="result">if set to <c>true</c> the point represented by the <paramref name="pt"/> parameter is contained
            within this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure; otherwise <c>false</c>.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Contains(WaveEngine.Common.Math.Rectangle)">
            <summary>
            Determines if the rectangular region represented by <paramref name="rect"/> is entirely contained
            within this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure.
            </summary>
            <param name="rect">The <see cref="T:WaveEngine.Common.Math.Rectangle"/> to test.</param>
            <returns>
              This method returns  <c>true</c> if the rectangular region represented by <paramref name="rect"/> is
              entirely contained within the rectangular region represented by this <see cref="T:WaveEngine.Common.Math.Rectangle"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Contains(WaveEngine.Common.Math.Rectangle@,System.Boolean@)">
            <summary>
            Determines if the rectangular region represented by <paramref name="rect"/> is entirely contained
            within this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure.
            </summary>
            <param name="rect">The <see cref="T:WaveEngine.Common.Math.Rectangle"/> to test.</param>
            <param name="result">if set to <c>true</c> the rectangular region represented by <paramref name="rect"/> is entirely
            contained within this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Intersects(WaveEngine.Common.Math.Rectangle)">
            <summary>
            Determines if this rectangle intersects with <paramref name="rect"/>.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <returns>This method returns <c>true</c> if there is any intersection.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Intersects(WaveEngine.Common.Math.Rectangle@,System.Boolean@)">
            <summary>
            Determines if this rectangle intersects with <paramref name="rect"/>.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <param name="result">if set to <c>true</c> there is any intersection.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.ToVector4">
            <summary>
            Converts the <see cref="F:WaveEngine.Common.Math.Rectangle.X"/>, <see cref="F:WaveEngine.Common.Math.Rectangle.Y"/>, <see cref="F:WaveEngine.Common.Math.Rectangle.Width"/> and <see cref="F:WaveEngine.Common.Math.Rectangle.Height"/> of this
            <see cref="T:WaveEngine.Common.Math.Rectangle"/> to a <see cref="T:WaveEngine.Common.Math.Vector4"/> structure.
            </summary>
            <returns>
            A <see cref="T:WaveEngine.Common.Math.Vector4"/> that contains the <see cref="F:WaveEngine.Common.Math.Rectangle.X"/>, <see cref="F:WaveEngine.Common.Math.Rectangle.Y"/>, <see cref="F:WaveEngine.Common.Math.Rectangle.Width"/>, <see cref="F:WaveEngine.Common.Math.Rectangle.Height"/>,
            of this <see cref="T:WaveEngine.Common.Math.Rectangle"/> to a <see cref="T:WaveEngine.Common.Math.Vector4"/> structure.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.ToVector4(WaveEngine.Common.Math.Vector4@)">
            <summary>
            Converts the <see cref="F:WaveEngine.Common.Math.Rectangle.X"/>, <see cref="F:WaveEngine.Common.Math.Rectangle.Y"/>, <see cref="F:WaveEngine.Common.Math.Rectangle.Width"/> and <see cref="F:WaveEngine.Common.Math.Rectangle.Height"/> of this
            <see cref="T:WaveEngine.Common.Math.Rectangle"/> to a <see cref="T:WaveEngine.Common.Math.Vector4"/> structure.
            </summary>
            <param name="vector"><see cref="T:WaveEngine.Common.Math.Vector4"/> reference to pass <see cref="T:WaveEngine.Common.Math.Rectangle"/> values</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Truncate(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Converts the specified <see cref="T:WaveEngine.Common.Math.RectangleF"/> to a <see cref="T:WaveEngine.Common.Math.Rectangle"/> by truncating the <see cref="T:WaveEngine.Common.Math.RectangleF"/> values.
            </summary>
            <param name="value">The <see cref="T:WaveEngine.Common.Math.RectangleF"/> to be converted.</param>
            <returns>The truncated value of the <see cref="T:WaveEngine.Common.Math.Rectangle"/>.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Round(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Converts the specified <see cref="T:WaveEngine.Common.Math.RectangleF"/> to a <see cref="T:WaveEngine.Common.Math.Rectangle"/> by rounding the <see cref="T:WaveEngine.Common.Math.RectangleF"/>
            values to the nearest integer values.
            </summary>
            <param name="value">The <see cref="T:WaveEngine.Common.Math.Rectangle"/> value.</param>
            <returns>The rounded interger value of the <see cref="T:WaveEngine.Common.Math.Rectangle"/>.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Intersect(WaveEngine.Common.Math.Rectangle,WaveEngine.Common.Math.Rectangle)">
            <summary>
            Returns a <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure that represents the intersection of two rectangles. If there is no
            intersection, and empty <see cref="T:WaveEngine.Common.Math.Rectangle"/> is returned.
            </summary>
            <param name="a">A rectangle to intersect.</param>
            <param name="b">The second rectangle to intersect.</param>
            <returns>A third <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure the size of which represents the overlapped area of the two
            specified rectangles.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Intersect(WaveEngine.Common.Math.Rectangle@,WaveEngine.Common.Math.Rectangle@,WaveEngine.Common.Math.Rectangle@)">
            <summary>
            Calculates a <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure that represents the intersection of two rectangles.
            If there is no intersection, and empty <see cref="T:WaveEngine.Common.Math.Rectangle"/> is returned.
            </summary>
            <param name="a">A rectangle to intersect.</param>
            <param name="b">The second rectangle to intersect.</param>
            <param name="result">A rectangle that represents the intersection of two rectangles.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Union(WaveEngine.Common.Math.Rectangle,WaveEngine.Common.Math.Rectangle)">
            <summary>
            Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.
            </summary>
            <param name="a">A rectangle to union.</param>
            <param name="b">The second rectangle to union.</param>
            <returns>
            A third <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure that contains both of the two rectangles that form the union.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Union(WaveEngine.Common.Math.Rectangle@,WaveEngine.Common.Math.Rectangle@,WaveEngine.Common.Math.Rectangle@)">
            <summary>
            Calculates the smallest possible third rectangle that can contain both of two rectangles that form a union.
            </summary>
            <param name="a">A rectangle to union.</param>
            <param name="b">The second rectangle to union.</param>
            <param name="result">The smallest possible third rectangle that can contain both of two rectangles that form a union.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Equals(WaveEngine.Common.Math.Rectangle)">
            <summary>
            Tests whether <paramref name="other"/> has the same location and size of this <see cref="T:WaveEngine.Common.Math.Rectangle"/>.
            </summary>
            <param name="other">The <see cref="T:WaveEngine.Common.Math.Rectangle"/> to test.</param>
            <returns>
            This method returns <c>true</c> if <paramref name="other"/> has its <see cref="F:WaveEngine.Common.Math.Rectangle.X"/>, <see cref="F:WaveEngine.Common.Math.Rectangle.Y"/>,
            <see cref="F:WaveEngine.Common.Math.Rectangle.Width"/>, and <see cref="F:WaveEngine.Common.Math.Rectangle.Height"/> properties equal to the corresponding properties of this
            <see cref="T:WaveEngine.Common.Math.Rectangle"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Equals(WaveEngine.Common.Math.Rectangle@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj"/> is a <see cref="T:WaveEngine.Common.Math.Rectangle"/> with the same location and size of this <see cref="T:WaveEngine.Common.Math.Rectangle"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>
              This method returns <c>true</c> if <paramref name="obj"/> is a <see cref="T:WaveEngine.Common.Math.Rectangle"/> and its <see cref="F:WaveEngine.Common.Math.Rectangle.X"/>,
              <see cref="F:WaveEngine.Common.Math.Rectangle.Y"/>, <see cref="F:WaveEngine.Common.Math.Rectangle.Width"/>, and <see cref="F:WaveEngine.Common.Math.Rectangle.Height"/> properties are equal to the corresponding properties
              of this <see cref="T:WaveEngine.Common.Math.Rectangle"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.ToString">
            <summary>
            Converts the <see cref="P:WaveEngine.Common.Math.Rectangle.Location"/> and Size of this <see cref="T:WaveEngine.Common.Math.Rectangle"/> to a human-readable string.
            </summary>
            <returns>
            A string that contains the position, width, and height of this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure. For example, "{X:20, Y:20, Width:100, Height:50}".
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure. For information about the use of hash codes, see <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.op_Equality(WaveEngine.Common.Math.Rectangle,WaveEngine.Common.Math.Rectangle)">
            <summary>
            Tests whether two <see cref="T:WaveEngine.Common.Math.Rectangle"/> structures have equal location and size.
            </summary>
            <param name="left">The <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure that is to the right of the inequality operator.</param>
            <returns>
            This operator returns <c>true</c> the two specified <see cref="T:WaveEngine.Common.Math.Rectangle"/> structures have equal
            <see cref="F:WaveEngine.Common.Math.Rectangle.X"/> , <see cref="F:WaveEngine.Common.Math.Rectangle.Y"/>, <see cref="F:WaveEngine.Common.Math.Rectangle.Width"/>, and <see cref="F:WaveEngine.Common.Math.Rectangle.Height"/> properties; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Rectangle.op_Inequality(WaveEngine.Common.Math.Rectangle,WaveEngine.Common.Math.Rectangle)">
            <summary>
            Tests whether two <see cref="T:WaveEngine.Common.Math.Rectangle"/> structures differ in location or size.
            </summary>
            <param name="left">The <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure that is to the right of the inequality operator.</param>
            <returns>
            This operator returns <c>true</c> if any of the <see cref="F:WaveEngine.Common.Math.Rectangle.X"/> , <see cref="F:WaveEngine.Common.Math.Rectangle.Y"/>, <see cref="F:WaveEngine.Common.Math.Rectangle.Width"/>, or <see cref="F:WaveEngine.Common.Math.Rectangle.Height"/>
            properties of the two <see cref="T:WaveEngine.Common.Math.Rectangle"/> structures are unequal; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.RectangleF">
            <summary>
            Stores a set of four floating-point numbers that represent the location and size of a rectangle.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.RectangleF.empty">
            <summary>
            Represents an instance of the <see cref="T:WaveEngine.Common.Math.RectangleF"/> class with its members uninitialized.
            </summary>
            <remarks>
            The members of the new <see cref="T:WaveEngine.Common.Math.RectangleF"/> are left uninitialized.
            </remarks>
        </member>
        <member name="F:WaveEngine.Common.Math.RectangleF.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure. The default is 0.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.RectangleF.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure. The default is 0.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.RectangleF.Width">
            <summary>
            Gets or sets the width of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure. The default is 0.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.RectangleF.Height">
            <summary>
            Gets or sets the height of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure. The default is 0.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.RectangleF.Left">
            <summary>
            Gets the x-coordinate of the left edge of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.RectangleF.Right">
            <summary>
            Gets the x-coordinate that is the sum of <see cref="F:WaveEngine.Common.Math.RectangleF.X"/> and <see cref="F:WaveEngine.Common.Math.RectangleF.Width"/> of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.RectangleF.Top">
            <summary>
            Gets the y-coordinate of the top edge of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.RectangleF.Bottom">
            <summary>
            Gets the y-coordinate that is the sum of <see cref="F:WaveEngine.Common.Math.RectangleF.Y"/> and <see cref="F:WaveEngine.Common.Math.RectangleF.Height"/> of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.RectangleF.Location">
            <summary>
            Gets or sets the coordinates of the upper-left corner of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure.
            </summary>
            <value>
            A <see cref="T:WaveEngine.Common.Math.Vector2"/> that represents the upper-left corner of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.RectangleF.Center">
            <summary>
            Gets the coordinates of the center of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure.
            </summary>
            <value>
            A <see cref="T:WaveEngine.Common.Math.Vector2"/> that represents the center of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Math.RectangleF.Empty">
            <summary>
            Gets an instance of the <see cref="T:WaveEngine.Common.Math.RectangleF"/> class with its members uninitialized.
            </summary>
            <remarks>
            The members of the new <see cref="T:WaveEngine.Common.Math.RectangleF"/> are left uninitialized.
            </remarks>
        </member>
        <member name="P:WaveEngine.Common.Math.RectangleF.IsEmpty">
            <summary>
            Gets a value indicating whether the <see cref="F:WaveEngine.Common.Math.RectangleF.Width"/> or <see cref="F:WaveEngine.Common.Math.RectangleF.Height"/> property of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> has a value of zero.
            </summary>
            <value>.
              This property returns <c>true</c> if the <see cref="F:WaveEngine.Common.Math.RectangleF.Width"/> or <see cref="F:WaveEngine.Common.Math.RectangleF.Height"/> property of this
              <see cref="T:WaveEngine.Common.Math.RectangleF"/> has a value of zero; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Math.RectangleF"/> struct.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.RectangleF"/> struct with the specified location and size.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Offset(WaveEngine.Common.Math.Vector2)">
            <summary>
            Adjusts the location of this rectangle by the specified <paramref name="amount"/>.
            </summary>
            <param name="amount">The amount to offset the location.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Offset(System.Single,System.Single)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="offsetX">The amount to offset the location horizontally.</param>
            <param name="offsetY">The amount to offset the location vertically.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Inflate(System.Single,System.Single)">
            <summary>
            Enlarges this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure by the specified amount.
            </summary>
            <param name="horizontalAmount">The amount to inflate this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure horizontally.</param>
            <param name="verticalAmount">The amount to inflate this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure vertically.</param>
            <remarks>
            This method enlarges this rectangle, not a copy of it. The rectangle is enlarged in both directions along an axis.
            For example, if a 50 by 50 rectangle is inflated by 50 in the x-axis, the resultant rectangle will be 150 units long
            (the original 50, the 50 in the minus direction, and the 50 in the plus direction) maintaining the rectangle's geometric center.
            If either x or y is negative, the <see cref="T:WaveEngine.Common.Math.RectangleF"/> is deflated in the corresponding direction.
            </remarks>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Contains(System.Single,System.Single)">
            <summary>
            Determines if the specified point is contained within this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure.
            </summary>
            <param name="x">The x-coordinate of the point to test.</param>
            <param name="y">The y-coordinate of the point to test.</param>
            <returns>
              This method returns <c>true</c> if the point defined by <paramref name="x"/> and <paramref name="y"/>
              is contained within this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Contains(WaveEngine.Common.Math.Vector2)">
            <summary>
            Determines if the specified point is contained within this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure.
            </summary>
            <param name="pt">The <see cref="T:WaveEngine.Common.Math.Vector2"/> to test.</param>
            <returns>
              This method returns <c>true</c> if the point represented by the <paramref name="pt"/> parameter is contained
              within this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Contains(WaveEngine.Common.Math.Vector2@,System.Boolean@)">
            <summary>
            Determines if the specified point is contained within this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure.
            </summary>
            <param name="pt">The <see cref="T:WaveEngine.Common.Math.Vector2"/> to test.</param>
            <param name="result">if set to <c>true</c> the point represented by the <paramref name="pt"/> parameter is contained within this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure; otherwise <c>false</c>.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Contains(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Determines if the rectangular region represented by <paramref name="rect"/> is entirely contained
            within this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure.
            </summary>
            <param name="rect">The <see cref="T:WaveEngine.Common.Math.RectangleF"/> to test.</param>
            <returns>
              This method returns  <c>true</c> if the rectangular region represented by <paramref name="rect"/> is
              entirely contained within the rectangular region represented by this <see cref="T:WaveEngine.Common.Math.RectangleF"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Contains(WaveEngine.Common.Math.RectangleF@,System.Boolean@)">
            <summary>
            Determines if the rectangular region represented by <paramref name="rect"/> is entirely contained
            within this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure.
            </summary>
            <param name="rect">The <see cref="T:WaveEngine.Common.Math.RectangleF"/> to test.</param>
            <param name="result">if set to <c>true</c> the rectangular region represented by <paramref name="rect"/> is entirely contained within this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Intersects(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Determines if this rectangle intersects with <paramref name="rect"/>.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <returns>This method returns <c>true</c> if there is any intersection.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Intersects(WaveEngine.Common.Math.RectangleF@,System.Boolean@)">
            <summary>
            Determines if this rectangle intersects with <paramref name="rect"/>.
            </summary>
            <param name="rect">The rectangle to test.</param>
            <param name="result">if set to <c>true</c> there is any intersection.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.GetPoints">
            <summary>
            Gets the corner points of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure.
            </summary>
            <returns>
            A <see cref="T:Vector2[]"/> that represents the corner points of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.ToVector4">
            <summary>
            Converts the <see cref="F:WaveEngine.Common.Math.RectangleF.X"/>, <see cref="F:WaveEngine.Common.Math.RectangleF.Y"/>, <see cref="F:WaveEngine.Common.Math.RectangleF.Width"/> and <see cref="F:WaveEngine.Common.Math.RectangleF.Height"/> of this
            <see cref="T:WaveEngine.Common.Math.RectangleF"/> to a <see cref="T:WaveEngine.Common.Math.Vector4"/> structure.
            </summary>
            <returns>
            A <see cref="T:WaveEngine.Common.Math.Vector4"/> that contains the <see cref="F:WaveEngine.Common.Math.RectangleF.X"/>, <see cref="F:WaveEngine.Common.Math.RectangleF.Y"/>, <see cref="F:WaveEngine.Common.Math.RectangleF.Width"/>, <see cref="F:WaveEngine.Common.Math.RectangleF.Height"/>,
            of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> to a <see cref="T:WaveEngine.Common.Math.Vector4"/> structure.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.ToVector4(WaveEngine.Common.Math.Vector4@)">
            <summary>
            Converts the <see cref="F:WaveEngine.Common.Math.RectangleF.X"/>, <see cref="F:WaveEngine.Common.Math.RectangleF.Y"/>, <see cref="F:WaveEngine.Common.Math.RectangleF.Width"/> and <see cref="F:WaveEngine.Common.Math.RectangleF.Height"/> of this
            <see cref="T:WaveEngine.Common.Math.RectangleF"/> to a <see cref="T:WaveEngine.Common.Math.Vector4"/> structure.
            </summary>
            <param name="vector"><see cref="T:WaveEngine.Common.Math.Vector4"/> reference to pass <see cref="T:WaveEngine.Common.Math.RectangleF"/> values</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Intersect(WaveEngine.Common.Math.RectangleF,WaveEngine.Common.Math.RectangleF)">
            <summary>
            Returns a <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure that represents the intersection of two rectangles. If there is no
            intersection, and empty <see cref="T:WaveEngine.Common.Math.RectangleF"/> is returned.
            </summary>
            <param name="a">A rectangle to intersect.</param>
            <param name="b">A second rectangle to intersect.</param>
            <returns>A third <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure the size of which represents the overlapped area of the two
            specified rectangles.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Intersect(WaveEngine.Common.Math.RectangleF@,WaveEngine.Common.Math.RectangleF@,WaveEngine.Common.Math.RectangleF@)">
            <summary>
            Calculates a <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure that represents the intersection of two rectangles. If there is no intersection, and empty <see cref="T:WaveEngine.Common.Math.RectangleF"/> is returned.
            </summary>
            <param name="a">A rectangle to intersect.</param>
            <param name="b">A second rectangle to intersect.</param>
            <param name="result">A rectangle that represents the intersection of two rectangles.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Union(WaveEngine.Common.Math.RectangleF,WaveEngine.Common.Math.RectangleF)">
            <summary>
            Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.
            </summary>
            <param name="a">A rectangle to union.</param>
            <param name="b">A second rectangle to union.</param>
            <returns>A third <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure that contains both of the two rectangles that form the union.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Union(WaveEngine.Common.Math.RectangleF@,WaveEngine.Common.Math.RectangleF@,WaveEngine.Common.Math.RectangleF@)">
            <summary>
            Calculates the smallest possible third rectangle that can contain both of two rectangles that form a union.
            </summary>
            <param name="a">A rectangle to union.</param>
            <param name="b">A second rectangle to union.</param>
            <param name="result">The smallest possible third rectangle that can contain both of two rectangles that form a union.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Equals(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Tests whether <paramref name="other"/> has the same location and size of this <see cref="T:WaveEngine.Common.Math.RectangleF"/>.
            </summary>
            <param name="other">The <see cref="T:WaveEngine.Common.Math.RectangleF"/> to test.</param>
            <returns>
            This method returns <c>true</c> if <paramref name="other"/> has its <see cref="F:WaveEngine.Common.Math.RectangleF.X"/>, <see cref="F:WaveEngine.Common.Math.RectangleF.Y"/>,
            <see cref="F:WaveEngine.Common.Math.RectangleF.Width"/>, and <see cref="F:WaveEngine.Common.Math.RectangleF.Height"/> properties equal to the corresponding properties of this
            <see cref="T:WaveEngine.Common.Math.RectangleF"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Equals(WaveEngine.Common.Math.RectangleF@)">
            <summary>
            Tests whether <paramref name="other"/> has the same location and size of this <see cref="T:WaveEngine.Common.Math.RectangleF"/>.
            </summary>
            <param name="other">The <see cref="T:WaveEngine.Common.Math.RectangleF"/> to test.</param>
            <returns>
            This method returns <c>true</c> if <paramref name="other"/> has its <see cref="F:WaveEngine.Common.Math.RectangleF.X"/>, <see cref="F:WaveEngine.Common.Math.RectangleF.Y"/>,
            <see cref="F:WaveEngine.Common.Math.RectangleF.Width"/>, and <see cref="F:WaveEngine.Common.Math.RectangleF.Height"/> properties equal to the corresponding properties of this
            <see cref="T:WaveEngine.Common.Math.RectangleF"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj"/> is a <see cref="T:WaveEngine.Common.Math.RectangleF"/> with the same location and size of this <see cref="T:WaveEngine.Common.Math.RectangleF"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>
              This method returns <c>true</c> if <paramref name="obj"/> is a <see cref="T:WaveEngine.Common.Math.RectangleF"/> and its <see cref="F:WaveEngine.Common.Math.RectangleF.X"/>,
              <see cref="F:WaveEngine.Common.Math.RectangleF.Y"/>, <see cref="F:WaveEngine.Common.Math.RectangleF.Width"/>, and <see cref="F:WaveEngine.Common.Math.RectangleF.Height"/> properties are equal to the corresponding properties
              of this <see cref="T:WaveEngine.Common.Math.RectangleF"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.ToString">
            <summary>
            Converts the <see cref="P:WaveEngine.Common.Math.RectangleF.Location"/> and Size of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> to a human-readable string.
            </summary>
            <returns>
            A string that contains the position, width, and height of this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure. For example, "{X:20, Y:20, Width:100, Height:50}".
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure. For information about the use of hash codes, see <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.op_Equality(WaveEngine.Common.Math.RectangleF,WaveEngine.Common.Math.RectangleF)">
            <summary>
            Tests whether two <see cref="T:WaveEngine.Common.Math.RectangleF"/> structures have equal location and size.
            </summary>
            <param name="left">The <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure that is to the right of the inequality operator.</param>
            <returns>
            This operator returns <c>true</c> the two specified <see cref="T:WaveEngine.Common.Math.RectangleF"/> structures have equal
            <see cref="F:WaveEngine.Common.Math.RectangleF.X"/> , <see cref="F:WaveEngine.Common.Math.RectangleF.Y"/>, <see cref="F:WaveEngine.Common.Math.RectangleF.Width"/>, and <see cref="F:WaveEngine.Common.Math.RectangleF.Height"/> properties; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.op_Inequality(WaveEngine.Common.Math.RectangleF,WaveEngine.Common.Math.RectangleF)">
            <summary>
            Tests whether two <see cref="T:WaveEngine.Common.Math.RectangleF"/> structures differ in location or size.
            </summary>
            <param name="left">The <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure that is to the right of the inequality operator.</param>
            <returns>
            This operator returns <c>true</c> if any of the <see cref="F:WaveEngine.Common.Math.RectangleF.X"/> , <see cref="F:WaveEngine.Common.Math.RectangleF.Y"/>, <see cref="F:WaveEngine.Common.Math.RectangleF.Width"/>, or <see cref="F:WaveEngine.Common.Math.RectangleF.Height"/>
            properties of the two <see cref="T:WaveEngine.Common.Math.RectangleF"/> structures are unequal; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.RectangleF.op_Implicit(WaveEngine.Common.Math.Rectangle)~WaveEngine.Common.Math.RectangleF">
            <summary>
            Converts the specified <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure to a <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure.
            </summary>
            <param name="r">The rectangle.</param>
            <returns>
            The <see cref="T:WaveEngine.Common.Math.RectangleF"/> structure that is converted from the specified <see cref="T:WaveEngine.Common.Math.Rectangle"/> structure.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Spline">
            <summary>
            Representes a spline.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Spline.a">
            <summary>
            Spline points.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Spline.b">
            <summary>
            Spline points.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Spline.c">
            <summary>
            Spline points.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Spline.d">
            <summary>
            Spline points.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Spline.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Spline"/> struct.
            </summary>
            <param name="a">A point.</param>
            <param name="b">B point.</param>
            <param name="c">C point.</param>
            <param name="d">D point.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Spline.GetPointOnSpline(System.Single)">
            <summary>
            Evaluate the point using a cubic equation
            </summary>
            <param name="s">A distance.</param>
            <returns>The point.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Spline.CalculateCubicSpline(System.Int32,WaveEngine.Common.Math.Vector3[])">
            <summary>
            Calculates the natural cubic spline of the control points.
            The segments are represented as: a + b*u + c*u^2 + d*u^3
            algorithm adopted from: http://www.cse.unsw.edu.au/~lambert/splines/
            </summary>
            <param name="n">the number of control points</param>
            <param name="v">the array of vectors</param>
            <returns>The spline.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Spline.CalculateCubicSpline(System.Int32@,WaveEngine.Common.Math.Vector3[]@,WaveEngine.Common.Math.Spline[]@)">
            <summary>
            Calculates the natural cubic spline of the control points.
            The segments are represented as: a + b*u + c*u^2 + d*u^3
            algorithm adopted from: http://www.cse.unsw.edu.au/~lambert/splines/
            </summary>
            <param name="n">the number of control points</param>
            <param name="v">the array of vectors</param>
            <param name="c">The c.</param>
        </member>
        <member name="T:WaveEngine.Common.Math.Vector2">
            <summary>
            Represents a 2D vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector2.zero">
            <summary>
            Vector with zero components.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector2.one">
            <summary>
            Vector with one components.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector2.unitX">
            <summary>
            Unitary X vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector2.unitY">
            <summary>
            Unitary Y vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector2.center">
            <summary>
            Center vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector2.X">
            <summary>
            X position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector2.Y">
            <summary>
            Y position.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector2.Zero">
            <summary>
            Gets the zero.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector2.One">
            <summary>
            Gets the one.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector2.UnitX">
            <summary>
            Gets the unit X.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector2.UnitY">
            <summary>
            Gets the unit Y.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector2.Center">
            <summary>
            Gets the vector (0.5f, 0.5f).
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Math.Vector2"/> struct.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector2"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector2"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Equals(WaveEngine.Common.Math.Vector2)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Equals(WaveEngine.Common.Math.Vector2@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Length">
            <summary>
            Lengthes this instance.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.LengthSquared">
            <summary>
            Lengthes the squared.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.ToVector3(System.Single)">
            <summary>
            Convert a Vector2 to Vector3.
            </summary>
            <param name="z">The Z value.</param>
            <returns>The vector3.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.ToVector3(System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Convert a Vector2 to Vector3.
            </summary>
            <param name="z">The Z value.</param>
            <param name="result">The vector3.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Distance(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Distances the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Distance(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single@)">
            <summary>
            Distances the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.DistanceSquared(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Distances the squared.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.DistanceSquared(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single@)">
            <summary>
            Distances the squared.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Dot(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Dots the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Dot(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single@)">
            <summary>
            Dots the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Cross(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Crosses the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Cross(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single@)">
            <summary>
            Crosses the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Cross(System.Single)">
            <summary>
            Crosses the float value
            </summary>
            <param name="s">The value</param>
            <returns>The result</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
            <returns>The previous vector length</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Normalize(WaveEngine.Common.Math.Vector2)">
            <summary>
            Normalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Normalize(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Normalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns>The previous vector length</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Reflect(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Reflects the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="normal">The normal.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Reflect(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Reflects the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="normal">The normal.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Rotate(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Rotate a vector
            </summary>
            <param name="vector">The vector</param>
            <param name="angle">The angle to rotate</param>
            <returns>The rotated vector</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Rotate(WaveEngine.Common.Math.Vector2@,System.Single,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Rotate a vector
            </summary>
            <param name="vector">The vector</param>
            <param name="angle">The angle to rotate</param>
            <param name="result">The rotated vector</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Min(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Mins the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Min(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Mins the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Max(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Maxes the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Max(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Maxes the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Abs(WaveEngine.Common.Math.Vector2)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the specified vector's elements.
            </summary>
            <param name="value">A vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Abs(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the specified vector's elements.
            </summary>
            <param name="value">A vector.</param>
            <param name="result">When this method returns, contains the absolute value vector.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Clamp(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Clamps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Clamp(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Clamps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Lerp(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Lerp(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Barycentric(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Single,System.Single)">
            <summary>
            Barycentrics the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="amount1">The amount1.</param>
            <param name="amount2">The amount2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Barycentric(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single,System.Single,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Barycentrics the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="amount1">The amount1.</param>
            <param name="amount2">The amount2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.SmoothStep(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Smoothes the step.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.SmoothStep(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Smoothes the step.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.SmoothDamp(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2@,System.Single,System.Single)">
            <summary>
            Changes a vector towards a desired goal over time
            </summary>
            <param name="current">The current position</param>
            <param name="target">The target position we are trying to reach</param>
            <param name="currentVelocity">The current velocity, modified by the function</param>
            <param name="smoothTime">The time it will take to reach the target.</param>
            <param name="gameTime">The current game time (time between last frame)</param>
            <returns>The smooth vector</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.SmoothDamp(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2@,System.Single,System.Single,System.Single)">
            <summary>
            Changes a vector towards a desired goal over time
            </summary>
            <param name="current">The current position</param>
            <param name="target">The target position we are trying to reach</param>
            <param name="currentVelocity">The current velocity, modified by the function</param>
            <param name="smoothTime">The time it will take to reach the target.</param>
            <param name="maxSpeed">The maximum speed</param>
            <param name="gameTime">The current game time (time between last frame)</param>
            <returns>The smooth vector</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.ClampMagnitude(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Returns a vector with its magnitude clamped to maxLength.
            </summary>
            <param name="vector">The vector</param>
            <param name="maxLength">The max length</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.CatmullRom(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Catmulls the rom.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="value4">The value4.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.CatmullRom(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Catmulls the rom.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="value4">The value4.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Hermite(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Hermites the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="tangent1">The tangent1.</param>
            <param name="value2">The value2.</param>
            <param name="tangent2">The tangent2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Hermite(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Hermites the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="tangent1">The tangent1.</param>
            <param name="value2">The value2.</param>
            <param name="tangent2">The tangent2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Transform(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Transform(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Transform(WaveEngine.Common.Math.Vector2[],WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector2[])">
            <summary>
            Transforms the specified source array.
            </summary>
            <param name="sourceArray">The source array.</param>
            <param name="matrix">The matrix.</param>
            <param name="destinationArray">The destination array.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Transform(WaveEngine.Common.Math.Vector2[],System.Int32,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector2[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified source array.
            </summary>
            <param name="sourceArray">The source array.</param>
            <param name="sourceIndex">Index of the source.</param>
            <param name="matrix">The matrix.</param>
            <param name="destinationArray">The destination array.</param>
            <param name="destinationIndex">Index of the destination.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.TransformNormal(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the normal.
            </summary>
            <param name="normal">The normal.</param>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.TransformNormal(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Transforms the normal.
            </summary>
            <param name="normal">The normal.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Transform(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Transform(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Negate(WaveEngine.Common.Math.Vector2)">
            <summary>
            Negates the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Negate(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Negates the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Add(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Adds the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Add(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Adds the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Subtract(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Subtracts the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Subtract(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Subtracts the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Multiply(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Multiply(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Multiply(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Multiply(WaveEngine.Common.Math.Vector2@,System.Single,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Divide(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Divide(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Divide(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="divider">The divider.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Divide(WaveEngine.Common.Math.Vector2@,System.Single,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="divider">The divider.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Angle(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Return the angle in radians between from and to.
            </summary>
            <param name="from">From vector.</param>
            <param name="to">To vector</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Collinear(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Determines if three vertices are collinear (ie. on a straight line)
            </summary>
            <param name="a">First vertex</param>
            <param name="b">Second vertex</param>
            <param name="c">Third vertex</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Collinear(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single)">
            <summary>
            Determines if three vertices are collinear (ie. on a straight line)
            </summary>
            <param name="a">First vertex</param>
            <param name="b">Second vertex</param>
            <param name="c">Third vertex</param>
            <param name="tolerance">The tolerance</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.Angle(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Return the angle in radians between from and to.
            </summary>
            <param name="from">From vector.</param>
            <param name="to">To vector</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_UnaryNegation(WaveEngine.Common.Math.Vector2)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Equality(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Inequality(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Addition(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Subtraction(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Multiply(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Multiply(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="value">The value.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Multiply(System.Single,WaveEngine.Common.Math.Vector2)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="scaleFactor">The scale factor.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Division(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector2.op_Division(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="value1">The value1.</param>
            <param name="divider">The divider.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Vector3">
            <summary>
            Represents a 3D vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.zero">
            <summary>
            Vector with zero components.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.one">
            <summary>
            Vector with one components.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.unitX">
            <summary>
            Unitary X vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.unitY">
            <summary>
            Unitary Y vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.unitZ">
            <summary>
            Unitary Z vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.up">
            <summary>
            Up vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.down">
            <summary>
            Down vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.right">
            <summary>
            Right vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.left">
            <summary>
            Left vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.forward">
            <summary>
            Forward vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.backward">
            <summary>
            Backward vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.X">
            <summary>
            X component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.Y">
            <summary>
            Y component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector3.Z">
            <summary>
            Z component.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.Zero">
            <summary>
            Gets the zero.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.One">
            <summary>
            Gets the one.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.UnitX">
            <summary>
            Gets the unit X.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.UnitY">
            <summary>
            Gets the unit Y.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.UnitZ">
            <summary>
            Gets the unit Z.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.Up">
            <summary>
            Gets up.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.Down">
            <summary>
            Gets down.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.Right">
            <summary>
            Gets the right.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.Left">
            <summary>
            Gets the left.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.Forward">
            <summary>
            Gets the forward.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.Backward">
            <summary>
            Gets the backward.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Math.Vector3"/> struct.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector3"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector3"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.#ctor(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector3"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Equals(WaveEngine.Common.Math.Vector3)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Equals(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Length">
            <summary>
            Lengthes this instance.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.LengthSquared">
            <summary>
            Lengthes the squared.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.ToVector2">
            <summary>
            Convert the Vector3 into a Vector2
            </summary>
            <returns>Return a Vector2 with the X and Y components</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.ToVector2(WaveEngine.Common.Math.Vector2@)">
            <summary>
            Convert a Vector3 into a Vector2
            </summary>
            <param name="result">The converted vector</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Distance(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Distances the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.FromQuaternion(WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Froms the quaternion.
            </summary>
            <param name="q">The q.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Distance(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single@)">
            <summary>
            Distances the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.DistanceSquared(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Distances the squared.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.DistanceSquared(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single@)">
            <summary>
            Distances the squared.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Dot(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Dots the specified vector1.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Dot(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Dots the specified vector1.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Dot(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single@)">
            <summary>
            Dots the specified vector1.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Dot(WaveEngine.Common.Math.Vector3)">
            <summary>
            Dot product with a vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Dot(WaveEngine.Common.Math.Vector3@,System.Single@)">
            <summary>
            Dot product with a vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
            <returns>The previous vector length</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Normalize(WaveEngine.Common.Math.Vector3)">
            <summary>
            Normalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Normalize(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Normalizes the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns>The previous vector length</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Cross(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Crosses the specified vector1.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Cross(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Crosses the specified vector1.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Cross(WaveEngine.Common.Math.Vector3)">
            <summary>
            Cross product.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Cross(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Crosses the specified vector1.
            </summary>
            <param name="vector">The vector.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Reflect(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Reflects the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="normal">The normal.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Reflect(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Reflects the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="normal">The normal.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Reflect(WaveEngine.Common.Math.Vector3)">
            <summary>
            Reflects the specified vector.
            </summary>
            <param name="normal">The normal.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Reflect(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Reflects the specified vector.
            </summary>
            <param name="normal">The normal.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Min(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Mins the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Min(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Mins the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Max(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Maxes the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Max(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Maxes the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Abs(WaveEngine.Common.Math.Vector3)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the specified vector's elements.
            </summary>
            <param name="value">A vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Abs(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the specified vector's elements.
            </summary>
            <param name="value">A vector.</param>
            <param name="result">When this method returns, contains the absolute value vector.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Clamp(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Clamps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Clamp(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Clamps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Lerp(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Lerp(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Barycentric(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single,System.Single)">
            <summary>
            Barycentrics the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="amount1">The amount1.</param>
            <param name="amount2">The amount2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Barycentric(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Barycentrics the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="amount1">The amount1.</param>
            <param name="amount2">The amount2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.SmoothStep(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Smoothes the step.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.SmoothStep(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Smoothes the step.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.SmoothDamp(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3@,System.Single,System.Single)">
            <summary>
            Changes a vector towards a desired goal over time
            </summary>
            <param name="current">The current position</param>
            <param name="target">The target position we are trying to reach</param>
            <param name="currentVelocity">The current velocity, modified by the function</param>
            <param name="smoothTime">The time it will take to reach the target.</param>
            <param name="gameTime">The current game time (time between last frame)</param>
            <returns>The smooth vector</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.SmoothDamp(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3@,System.Single,System.Single,System.Single)">
            <summary>
            Changes a vector towards a desired goal over time
            </summary>
            <param name="current">The current position</param>
            <param name="target">The target position we are trying to reach</param>
            <param name="currentVelocity">The current velocity, modified by the function</param>
            <param name="smoothTime">The time it will take to reach the target.</param>
            <param name="maxSpeed">The maximum speed</param>
            <param name="gameTime">The current game time (time between last frame)</param>
            <returns>The smooth vector</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.ClampMagnitude(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Returns a vector with its magnitude clamped to maxLength.
            </summary>
            <param name="vector">The vector</param>
            <param name="maxLength">The max length</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.CatmullRom(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Catmulls the rom.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="value4">The value4.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.CatmullRom(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Catmulls the rom.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="value4">The value4.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Hermite(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Hermites the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="tangent1">The tangent1.</param>
            <param name="value2">The value2.</param>
            <param name="tangent2">The tangent2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Hermite(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Hermites the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="tangent1">The tangent1.</param>
            <param name="value2">The value2.</param>
            <param name="tangent2">The tangent2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Transform(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Transform(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Transform(WaveEngine.Common.Math.Vector3*,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector3*)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Transform(WaveEngine.Common.Math.Vector3[],WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector3[])">
            <summary>
            Transforms the specified positions.
            </summary>
            <param name="positions">The positions.</param>
            <param name="matrix">The matrix.</param>
            <param name="results">The results.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.TransformNormal(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the normal.
            </summary>
            <param name="normal">The normal.</param>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.TransformNormal(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Transforms the normal.
            </summary>
            <param name="normal">The normal.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.TransformNormal(WaveEngine.Common.Math.Vector3*,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector3*)">
            <summary>
            Transforms the normal.
            </summary>
            <param name="normal">The normal.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Transform(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Transform(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.TransformCoordinate(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:WaveEngine.Common.Math.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:WaveEngine.Common.Math.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.TransformCoordinate(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Matrix)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:WaveEngine.Common.Math.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:WaveEngine.Common.Math.Matrix"/>.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Negate(WaveEngine.Common.Math.Vector3)">
            <summary>
            Negates the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Negate(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Negates the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Add(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Adds the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Add(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Adds the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Add(WaveEngine.Common.Math.Vector3*,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3*)">
            <summary>
            Adds the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Subtract(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Subtracts the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Subtract(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Subtracts the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Multiply(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Multiply(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Multiply(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Multiply(WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Multiply(WaveEngine.Common.Math.Vector3*,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Divide(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Divide(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Divide(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Divide(WaveEngine.Common.Math.Vector3@,System.Single,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Angle(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Return the angle in radians between from and to.
            </summary>
            <param name="from">The angle extends round from this vector.</param>
            <param name="to">The angle extends round to this vector.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.Angle(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Return the angle in radians between from and to.
            </summary>
            <param name="from">The angle extends round from this vector.</param>
            <param name="to">The angle extends round to this vector.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.RotateAround(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Apply a rotation to a point using a pivot as origin.
            </summary>
            <param name="point">The point to rotate.</param>
            <param name="pivot">The pivot used as origin.</param>
            <param name="rotation">The angle as quaternion.</param>
            <returns>The point vector rotated.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.RotateAround(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Apply a rotation to a point using a pivot as origin.
            </summary>
            <param name="point">The point to rotate.</param>
            <param name="pivot">The pivot used as origin.</param>
            <param name="rotation">The angle as quaternion.</param>
            <param name="rotatePoint">The point vector rotated.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_UnaryNegation(WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Equality(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Inequality(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Addition(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Subtraction(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Multiply(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Multiply(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="value">The value.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Multiply(System.Single,WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="scaleFactor">The scale factor.</param>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Division(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector3.op_Division(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="value">The value.</param>
            <param name="divider">The divider.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for the Z component.</param>
            <returns>The value of the component at the specified index.</returns>
        </member>
        <member name="T:WaveEngine.Common.Math.Vector4">
            <summary>
            Represents a 4D vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.zero">
            <summary>
            Vector with zero components.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.one">
            <summary>
            Vector with one components.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.unitX">
            <summary>
            Unitary X vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.unitY">
            <summary>
            Unitary Y vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.unitZ">
            <summary>
            Unitary Z vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.unitW">
            <summary>
            Unitary W vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.X">
            <summary>
            X component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.Y">
            <summary>
            Y component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.Z">
            <summary>
            Z component.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Math.Vector4.W">
            <summary>
            W component.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector4.Zero">
            <summary>
            Gets the zero.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector4.One">
            <summary>
            Gets the one.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector4.UnitX">
            <summary>
            Gets the unit X.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector4.UnitY">
            <summary>
            Gets the unit Y.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector4.UnitZ">
            <summary>
            Gets the unit Z.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector4.UnitW">
            <summary>
            Gets the unit W.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Math.Vector4"/> struct.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector4"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <param name="w">The w.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.#ctor(WaveEngine.Common.Math.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector4"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="z">The z.</param>
            <param name="w">The w.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.#ctor(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector4"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="w">The w.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Math.Vector4"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Equals(WaveEngine.Common.Math.Vector4)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Equals(WaveEngine.Common.Math.Vector4@)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Length">
            <summary>
            Lengthes this instance.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.LengthSquared">
            <summary>
            Lengthes the squared.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Distance(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Distances the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Distance(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,System.Single@)">
            <summary>
            Distances the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.DistanceSquared(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Distances the squared.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.DistanceSquared(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,System.Single@)">
            <summary>
            Distances the squared.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Dot(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Dots the specified vector1.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Dot(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,System.Single@)">
            <summary>
            Dots the specified vector1.
            </summary>
            <param name="vector1">The vector1.</param>
            <param name="vector2">The vector2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
            <returns>The previous vector length</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Normalize(WaveEngine.Common.Math.Vector4)">
            <summary>
            Normalizes the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Normalize(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Normalizes the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="result">The result.</param>
            <returns>The previous vector length</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Min(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Mins the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Min(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Mins the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Max(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Maxes the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Max(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Maxes the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Abs(WaveEngine.Common.Math.Vector4)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the specified vector's elements.
            </summary>
            <param name="value">A vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Abs(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the specified vector's elements.
            </summary>
            <param name="value">A vector.</param>
            <param name="result">When this method returns, contains the absolute value vector.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Clamp(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Clamps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Clamp(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Clamps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Lerp(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,System.Single)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Lerp(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,System.Single,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Lerps the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Barycentric(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,System.Single,System.Single)">
            <summary>
            Barycentrics the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="amount1">The amount1.</param>
            <param name="amount2">The amount2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Barycentric(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,System.Single,System.Single,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Barycentrics the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="amount1">The amount1.</param>
            <param name="amount2">The amount2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.SmoothStep(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,System.Single)">
            <summary>
            Smoothes the step.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.SmoothStep(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,System.Single,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Smoothes the step.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.CatmullRom(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,System.Single)">
            <summary>
            Catmulls the rom.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="value4">The value4.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.CatmullRom(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,System.Single,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Catmulls the rom.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="value3">The value3.</param>
            <param name="value4">The value4.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Hermite(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4,System.Single)">
            <summary>
            Hermites the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="tangent1">The tangent1.</param>
            <param name="value2">The value2.</param>
            <param name="tangent2">The tangent2.</param>
            <param name="amount">The amount.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Hermite(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,System.Single,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Hermites the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="tangent1">The tangent1.</param>
            <param name="value2">The value2.</param>
            <param name="tangent2">The tangent2.</param>
            <param name="amount">The amount.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Transforms the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Matrix)">
            <summary>
            Transforms the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="matrix">The matrix.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Transforms the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector4*,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Math.Vector4*)">
            <summary>
            Transforms the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="matrix">The matrix.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Quaternion)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Transform(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Quaternion@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Transforms the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="rotation">The rotation.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Negate(WaveEngine.Common.Math.Vector4)">
            <summary>
            Negates the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Negate(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Negates the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Add(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Adds the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Add(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Adds the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Subtract(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Subtracts the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Subtract(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Subtracts the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Multiply(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Multiply(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Multiply(WaveEngine.Common.Math.Vector4,System.Single)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Multiply(WaveEngine.Common.Math.Vector4@,System.Single,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Multiplies the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Divide(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Divide(WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Divide(WaveEngine.Common.Math.Vector4,System.Single)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="divider">The divider.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.Divide(WaveEngine.Common.Math.Vector4@,System.Single,WaveEngine.Common.Math.Vector4@)">
            <summary>
            Divides the specified value1.
            </summary>
            <param name="value1">The value1.</param>
            <param name="divider">The divider.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.ToVector3">
            <summary>
            Convert the Vector4 into a Vector3
            </summary>
            <returns>Return a Vector3 with the X, Y and Z components</returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.ToVector3(WaveEngine.Common.Math.Vector3@)">
            <summary>
            Convert a Vector3 into a Vector3
            </summary>
            <param name="result">The converted vector</param>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_UnaryNegation(WaveEngine.Common.Math.Vector4)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Equality(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Inequality(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Addition(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Subtraction(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Multiply(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Multiply(WaveEngine.Common.Math.Vector4,System.Single)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="value1">The value1.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Multiply(System.Single,WaveEngine.Common.Math.Vector4)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="scaleFactor">The scale factor.</param>
            <param name="value1">The value1.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Division(WaveEngine.Common.Math.Vector4,WaveEngine.Common.Math.Vector4)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Math.Vector4.op_Division(WaveEngine.Common.Math.Vector4,System.Single)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="value1">The value1.</param>
            <param name="divider">The divider.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="P:WaveEngine.Common.Math.Vector4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
        </member>
        <member name="T:WaveEngine.Common.Media.CameraCaptureState">
            <summary>
            Specifies the Video state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.CameraCaptureState.Preview">
            <summary>
            Camera capture is started.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.CameraCaptureState.Recording">
            <summary>
            Camera is recording.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.CameraCaptureState.Stopped">
            <summary>
            Camera capture is stopped.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.CameraCaptureType">
            <summary>
            Camera capture type enumeration
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.CameraCaptureType.Back">
            <summary>
            Back camera
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.CameraCaptureType.Front">
            <summary>
            Front camera
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.ICameraCapture">
            <summary>
            Camera capture support
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.ICameraCapture.PreviewTexture">
            <summary>
            Gets the camera previewtexture
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.ICameraCapture.State">
            <summary>
            Gets a value indicating the camera capture state
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.ICameraCapture.IsConnected">
            <summary>
            Gets a value indicating whether there is a camera available.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.ICameraCapture.Start(WaveEngine.Common.Media.CameraCaptureType)">
            <summary>
            Starts the camera capture.
            </summary>
            <param name="cameraType">camera type</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ICameraCapture.Stop">
            <summary>
            Stops the camera capture.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.ICameraCapture.StartRecording(System.String)">
            <summary>
            Start Video recording.
            </summary>
            <param name="videoFilePath">file path where the video was recorded.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ICameraCapture.StopRecording">
            <summary>
            Stop video recording
            </summary>
            <returns>stored video path</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.ICameraCapture.Update(System.TimeSpan)">
            <summary>
            Update camera capture
            </summary>
            <param name="gameTime">game time interval.</param>
        </member>
        <member name="T:WaveEngine.Common.Media.IMicrophone">
            <summary>
            Microphone support
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Media.IMicrophone.DataAvailable">
            <summary>
            Event launched when there is data available.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IMicrophone.IsRecording">
            <summary>
            Gets a value indicating whether the microphone is recording now
            </summary>
            <value>
                <c>true</c> if this instance is recording; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.IMicrophone.RecordSoundPath">
            <summary>
            Gets the current record file path
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IMicrophone.IsConnected">
            <summary>
            Gets a value indicating whether there is a microphone available.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IMicrophone.CurrentSoundHandle">
            <summary>
            Gets the current sound handle id
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IMicrophone.Start">
            <summary>
            Starts the record
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IMicrophone.Start(System.String)">
            <summary>
            Starts the record in a custom file
            </summary>
            <param name="filePath">Path of the recorded file.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.IMicrophone.Stop">
            <summary>
            Stops the record.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IMicrophone.GetRecordedSound">
            <summary>
            Get a soundbase object
            </summary>
            <returns>The recorded sound.</returns>
        </member>
        <member name="T:WaveEngine.Common.Media.IMusicPlayer">
            <summary>
            Interface for music player.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IMusicPlayer.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IMusicPlayer.IsMuted">
            <summary>
            Gets or sets a value indicating whether this instance is muted.
            </summary>
            <value>
              <c>true</c> if this instance is muted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.IMusicPlayer.IsRepeat">
            <summary>
            Gets or sets a value indicating whether this instance is repeat.
            </summary>
            <value>
              <c>true</c> if this instance is repeat; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.IMusicPlayer.Volume">
            <summary>
            Gets or sets the volume.
            </summary>
            <value>
            The volume.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.IMusicPlayer.MusicEnabled">
            <summary>
            Gets or sets a value indicating whether [music enabled].
            </summary>
            <value>
              <c>true</c> if [music enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Media.IMusicPlayer.Play(WaveEngine.Common.Media.MusicInfo)">
            <summary>
            Plays the specified music.
            </summary>
            <param name="music">The music.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.IMusicPlayer.Resume">
            <summary>
            Resumes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IMusicPlayer.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IMusicPlayer.Pause">
            <summary>
            Pauses this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IMusicPlayer.OnActivated">
            <summary>
            Called when service activated.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IMusicPlayer.OnDeactivated">
            <summary>
            Called when service deactivated.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.ISoundManager">
            <summary>
            Interface for sound managers.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.UploadSound(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Uploads the sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.UploadSound(WaveEngine.Common.Media.SoundBase,System.IO.Stream,System.Int32,System.UInt32@)">
            <summary>
            Uploads the sound by a stream.
            </summary>
            <param name="sound">The sound</param>
            <param name="stream">The stream</param>
            <param name="sampleRate">The sample rate.</param>
            <param name="soundHandle">The sound handle.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.DestroySound(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Destroys the sound.
            </summary>
            <param name="sound">The sound.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.CreateInstance(WaveEngine.Common.Media.SoundBase)">
            <summary>
            Creates the instance.
            </summary>
            <param name="sound">The sound.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.DestroyInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Destroys the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.PlayInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Plays the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.PauseInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Pauses the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.StopInstance(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Stops the instance.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.InstanceState(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Instances the state.
            </summary>
            <param name="instance">The instance.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.UpdateInstanceSettings(WaveEngine.Common.Media.SoundInstance)">
            <summary>
            Updates the instance settings.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.ISoundManager.Apply3D(WaveEngine.Common.Media.SoundInstance,WaveEngine.Common.Media.SoundEmitter,WaveEngine.Common.Media.SoundListener)">
            <summary>
            Apply 3D effects to the specified sound effect instance
            </summary>
            <param name="instance">The sound instance</param>
            <param name="emitter">The sound emitter</param>
            <param name="listener">The sound listener</param>
        </member>
        <member name="T:WaveEngine.Common.Media.IVideoInfo">
            <summary>
            Interface for video info.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoInfo.Duration">
            <summary>
            Gets the duration of the video.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoInfo.Width">
            <summary>
            Gets the width of this video, in pixels.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoInfo.Height">
            <summary>
            Gets the height of this video, in pixels.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoInfo.Path">
            <summary>
            Gets the path of this video.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.IVideoPlayer">
            <summary>
            Interface for video player.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoPlayer.IsLooped">
            <summary>
            Gets or sets a value indicating whether the player is playing a video in a loop.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoPlayer.IsMuted">
            <summary>
            Gets or sets a value indicating whether the muted setting for the video player.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoPlayer.Volume">
            <summary>
            Gets or sets a value indicating the video player volume.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoPlayer.PlayPosition">
            <summary>
            Gets or sets a value indicating whether the play position within the currently playing video.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoPlayer.Video">
            <summary>
            Gets the video that is currently playing.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoPlayer.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoPlayer.VideoTexture">
            <summary>
            Gets a Texture containing the frame of video being played;
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.IVideoPlayer.IsVideoSupported">
            <summary>
            Gets a value indicating whether if Video texture is supported on this device
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Media.IVideoPlayer.OnComplete">
            <summary>
            Event fired when the video play is completed
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Media.IVideoPlayer.OnError">
            <summary>
            Event fired when the video play has an error
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Media.IVideoPlayer.OnVideoTexture">
            <summary>
            Event fired when the video texture is updated
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IVideoPlayer.Play(WaveEngine.Common.Media.IVideoInfo)">
            <summary>
            Plays the video.
            </summary>
            <param name="video">video info instance.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.IVideoPlayer.Pause">
            <summary>
            Pauses the currently playing video.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IVideoPlayer.Resume">
            <summary>
            Resumes a paused video.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IVideoPlayer.Stop">
            <summary>
            Stops playing a video
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.IVideoPlayer.VideoInfoFromPath(System.String)">
            <summary>
            Get video info from path
            </summary>
            <param name="path">video path</param>
            <returns>platform specific video info</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.IVideoPlayer.Update(System.TimeSpan)">
            <summary>
            Update video player
            </summary>
            <param name="gameTime">game time</param>
        </member>
        <member name="T:WaveEngine.Common.Media.MicrophoneDataEventArgs">
            <summary>
            Microphone Data Event args
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.MicrophoneDataEventArgs.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.MicrophoneDataEventArgs"/> class.
            </summary>
            <param name="buffer">buffer data</param>
            <param name="bytes">bytes recorded.</param>
        </member>
        <member name="P:WaveEngine.Common.Media.MicrophoneDataEventArgs.Buffer">
            <summary>
            Gets the audio byte buffer.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.MicrophoneDataEventArgs.BytesRecorded">
            <summary>
            Gets the amount of bytes recorded
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.MusicInfo">
            <summary>
            Represents info about a music track.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.MusicInfo.NumMusic">
            <summary>
            Loaded song count.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.MusicInfo.MusicId">
            <summary>
            Unique ID of the track.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.MusicInfo.Path">
            <summary>
            Path of the song.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.MusicInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.MusicInfo"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="T:WaveEngine.Common.Media.MusicState">
            <summary>
            Specifies the music state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.MusicState.Paused">
            <summary>
            Music is paused.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.MusicState.Playing">
            <summary>
            Music is playing.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.MusicState.Stopped">
            <summary>
            Music is stopped.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.SoundBase">
            <summary>
            Sound basic class.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundBase.SoundHandle">
            <summary>
            Sound handle.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundBase.IsValidSound">
            <summary>
            Gets a value indicating whether this instance is valid sound.
            </summary>
            <value>
                <c>true</c> if this instance is valid sound; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundBase.Path">
            <summary>
            Gets or sets the path of the sound asset.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundBase.SampleRate">
            <summary>
            Gets or sets the sample rate.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundBase.BitsPerSample">
            <summary>
            Gets or sets the bits per sample.
            </summary>
            <value>
            The bits per sample.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundBase.Channels">
            <summary>
            Gets or sets the channels.
            </summary>
            <value>
            The channels.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundBase.PCMData">
            <summary>
            Gets or sets the PCM data.
            </summary>
            <value>
            The PCM data.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Media.SoundBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.SoundBase"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.SoundEmitter">
            <summary>
            Represent a Sound Emitter, used in 3D audio effects
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundEmitter.WorldTransform">
            <summary>
            The world transform of the sound emitter
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundEmitter.Velocity">
            <summary>
            The sound emitter velocity
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundEmitter.DopplerScale">
            <summary>
            The sound emitter doppler scale, default value is 1.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundEmitter.DistanceScale">
            <summary>
            The sound emitter distance scale, default value is 1.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.SoundEmitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.SoundEmitter" /> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.SoundInstance">
            <summary>
            Instance of a playing sound.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundInstance.pan">
            <summary>
            Sound pan.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundInstance.pitch">
            <summary>
            Sound pitch.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundInstance.volume">
            <summary>
            Sound volume.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundInstance.loop">
            <summary>
            Sound loop.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundInstance.InstanceHandle">
            <summary>
            Handle of the sound instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundInstance.Parent">
            <summary>
            Parent ISoundManager.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundInstance.BankId">
            <summary>
            Gets or sets the bank id.
            </summary>
            <value>
            The bank id.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundInstance.Pan">
            <summary>
            Gets or sets the pan.
            </summary>
            <value>
            The pan.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundInstance.Pitch">
            <summary>
            Gets or sets the pitch.
            </summary>
            <value>
            The pitch.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundInstance.Volume">
            <summary>
            Gets or sets the volume.
            </summary>
            <value>
            The volume.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundInstance.Loop">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WaveEngine.Common.Media.SoundInstance"/> is loop.
            </summary>
            <value>
              <c>true</c> if loop; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundInstance.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.SoundInstance.IsValidInstance">
            <summary>
            Gets a value indicating whether this instance is valid instance.
            </summary>
            <value>
                <c>true</c> if this instance is valid instance; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.Media.SoundInstance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.SoundInstance"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.SoundInstance.Play">
            <summary>
            Plays this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.SoundInstance.Pause">
            <summary>
            Pauses this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.SoundInstance.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.SoundInstance.Apply3D(WaveEngine.Common.Media.SoundEmitter,WaveEngine.Common.Media.SoundListener)">
            <summary>
            Apply 3D effects to the current sound instance
            </summary>
            <param name="emitter">The sound emitter</param>
            <param name="listener">The sound listener</param>
        </member>
        <member name="M:WaveEngine.Common.Media.SoundInstance.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.SoundListener">
            <summary>
            Represent a Sound Listener, used in 3D audio effects
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundListener.WorldTransform">
            <summary>
            The world transform of the sound listener
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundListener.Velocity">
            <summary>
            The sound listener velocity
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.SoundState">
            <summary>
            Specifies the sound state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundState.Playing">
            <summary>
            Sound is playing.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundState.Paused">
            <summary>
            Sound is paused.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.SoundState.Stopped">
            <summary>
            Sound is stopped.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.VideoInfo">
            <summary>
            Represents info about a video.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.VideoInfo.internalVideoInfo">
            <summary>
            The specific <see cref="T:WaveEngine.Common.Media.IVideoInfo"/> for the platform where the application is running.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.VideoInfo.disposed">
            <summary>
            If Video Info is disposed.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.VideoInfo.InternalVideoInfo">
            <summary>
            Gets the specific <see cref="T:WaveEngine.Common.Media.IVideoInfo"/> for the platform where the application is running.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.VideoInfo.Duration">
            <summary>
            Gets the duration of the video.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.VideoInfo.Width">
            <summary>
            Gets the width of this video, in pixels.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.VideoInfo.Height">
            <summary>
            Gets the height of this video, in pixels.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.VideoInfo.Path">
            <summary>
            Gets the path of the video.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.VideoInfo.#ctor(WaveEngine.Common.Media.IVideoInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.VideoInfo"/> class.
            </summary>
            <param name="internalVideoInfo">platform video info.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.VideoInfo.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:WaveEngine.Common.Media.VideoInfo"/> object.
            </summary>
            <remarks>Call <see cref="M:WaveEngine.Common.Media.VideoInfo.Dispose"/> when you are finished using the <see cref="T:WaveEngine.Common.Media.VideoInfo"/>. The
            <see cref="M:WaveEngine.Common.Media.VideoInfo.Dispose"/> method leaves the <see cref="T:WaveEngine.Common.Media.VideoInfo"/> in an unusable state.
            After calling <see cref="M:WaveEngine.Common.Media.VideoInfo.Dispose"/>, you must release all references to the
            <see cref="T:WaveEngine.Common.Media.VideoInfo"/> so the garbage collector can reclaim the memory that the
            <see cref="T:WaveEngine.Common.Media.VideoInfo"/> was occupying.</remarks>
        </member>
        <member name="T:WaveEngine.Common.Media.VideoState">
            <summary>
            Specifies the Video state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.VideoState.Paused">
            <summary>
            Video is paused.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.VideoState.Playing">
            <summary>
            Video is playing.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.VideoState.Stopped">
            <summary>
            Video is stopped.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.WavFileWriter">
            <summary>
            This class writes WAV data to a .wav file on disk
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.EXPORTTYPE">
            <summary>
            Export type of the file.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.EXPORTVERSION">
            <summary>
            Export version of the file.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.outStream">
            <summary>
            Output stream.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.writer">
            <summary>
            Binary writer.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.dataSizePos">
            <summary>
            Data size position.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.dataChunkSize">
            <summary>
            Data chunk size.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.format">
            <summary>
            Format of the wave.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.wpkHeaderSize">
            <summary>
            Size of the WPK header.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.#ctor(System.IO.Stream,WaveEngine.Common.Media.WavFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.WavFileWriter"/> class that actually writes to a stream
            </summary>
            <param name="outStream">Stream to be written to</param>
            <param name="format">Wave format to use</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.#ctor(System.IO.Stream,WaveEngine.Common.Media.WavFormat,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.WavFileWriter"/> class that actually writes to a stream
            </summary>
            <param name="outStream">Stream to be written to</param>
            <param name="format">Wave format to use</param>
            <param name="writeWPKHeader">If writes wpk header.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.WriteWPKHeader">
            <summary>
            Writes the WPK headers of the file.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.WriteHeaderChunk">
            <summary>
            Writes the WAV header chunk
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.WriteFormatChunk">
            <summary>
            Writes the formatChunk
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.WriteDataChunkHeader">
            <summary>
            Writes the data chunk header
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFileWriter.Length">
            <summary>
            Gets the Number of bytes of audio in the data chunk
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFileWriter.WaveFormat">
            <summary>
            Gets the WaveFormat of this wave file
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFileWriter.CanRead">
            <summary>
            Gets a value indicating whether can read (Returns false: Cannot read from a WaveFileWriter)
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFileWriter.CanWrite">
            <summary>
            Gets a value indicating whether can write (Returns true: Can write to a WaveFileWriter)
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFileWriter.CanSeek">
            <summary>
            Gets a value indicating whether returns false: Cannot seek within a WaveFileWriter
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read is not supported for a WaveFileWriter
            </summary>
            <param name="buffer">Byte read buffer</param>
            <param name="offset">Offset of the read in the buffer.</param>
            <param name="count">Count of elements of the read operation.</param>
            <returns>Bytes readed.</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek is not supported for a WaveFileWriter
            </summary>
            <param name="offset">Offset to seek.</param>
            <param name="origin">Origin of the seek.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.SetLength(System.Int64)">
            <summary>
            SetLength is not supported for WaveFileWriter
            </summary>
            <param name="value">New length.</param>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFileWriter.Position">
            <summary>
            Gets or sets gets the Position in the WaveFile (i.e. number of bytes written so far)
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends bytes to the WaveFile (assumes they are already in the correct format)
            </summary>
            <param name="data">the buffer containing the wave data</param>
            <param name="offset">the offset from which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFileWriter.value24">
            <summary>
            Value of 24 bits.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.WriteSample(System.Single)">
            <summary>
            Writes a single sample to the Wave file
            </summary>
            <param name="sample">the sample to write (assumed floating point with 1.0f as max value)</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.WriteSamples(System.Single[],System.Int32,System.Int32)">
            <summary>
            Writes 32 bit floating point samples to the Wave file
            They will be converted to the appropriate bit depth depending on the WaveFormat of the WAV file
            </summary>
            <param name="samples">The buffer containing the floating point samples</param>
            <param name="offset">The offset from which to start writing</param>
            <param name="count">The number of floating point samples to write</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.WriteData(System.Int16[],System.Int32,System.Int32)">
            <summary>
            Writes 16 bit samples to the Wave file
            </summary>
            <param name="samples">The buffer containing the 16 bit samples</param>
            <param name="offset">The offset from which to start writing</param>
            <param name="count">The number of 16 bit samples to write</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.WriteSamples(System.Int16[],System.Int32,System.Int32)">
            <summary>
            Writes 16 bit samples to the Wave file
            </summary>
            <param name="samples">The buffer containing the 16 bit samples</param>
            <param name="offset">The offset from which to start writing</param>
            <param name="count">The number of 16 bit samples to write</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.Flush">
            <summary>
            Ensures data is written to disk
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.Dispose(System.Boolean)">
            <summary>
            Actually performs the close,making sure the header contains the correct data
            </summary>
            <param name="disposing">True if called from <see>Dispose</see></param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.UpdateHeader(System.IO.BinaryWriter)">
            <summary>
            Updates the header with file size information
            </summary>
            <param name="writer">Binary writer.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.UpdateDataChunk(System.IO.BinaryWriter)">
            <summary>
            Updates the data chunk.
            </summary>
            <param name="writer">Binary writer</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.UpdateRiffChunk(System.IO.BinaryWriter)">
            <summary>
            Updates the riff chunk.
            </summary>
            <param name="writer">Binary writer.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFileWriter.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Common.Media.WavFileWriter"/> class. Should only be called if the user forgot to close this WaveFileWriter
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Media.WavFormat">
            <summary>
            Represents a Wave file format
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFormat.channels">
            <summary>number of channels</summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFormat.sampleRate">
            <summary>sample rate</summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFormat.averageBytesPerSecond">
            <summary>for buffer estimation</summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFormat.blockAlign">
            <summary>block size of data</summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFormat.bitsPerSample">
            <summary>number of bits per sample of mono data</summary>
        </member>
        <member name="F:WaveEngine.Common.Media.WavFormat.extraSize">
            <summary>number of following bytes</summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.WavFormat"/> class, a new PCM 44.1Khz stereo 16 bit format
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.WavFormat"/> class, a new 16 bit wave format with the specified sample
            rate and channel count
            </summary>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of channels</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFormat.ConvertLatencyToByteSize(System.Int32)">
            <summary>
            Gets the size of a wave buffer equivalent to the latency in milliseconds.
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <returns>Size of the wave buffer equivaelent to the latency in milliseconds</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Media.WavFormat"/> class, a new PCM format with the specified sample rate, bit depth and channels
            </summary>
            <param name="rate">Sample rate.</param>
            <param name="bits">Audio bits.</param>
            <param name="channels">Audio channels.</param>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFormat.ToString">
            <summary>
            Reports this WaveFormat as a string
            </summary>
            <returns>String describing the wave format</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFormat.Equals(System.Object)">
            <summary>
            Compares with another WaveFormat object
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>True if the objects are the same</returns>
        </member>
        <member name="M:WaveEngine.Common.Media.WavFormat.GetHashCode">
            <summary>
            Provides a Hashcode for this WaveFormat
            </summary>
            <returns>A hashcode</returns>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFormat.Channels">
            <summary>
            Gets the number of channels (1=mono,2=stereo etc)
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFormat.SampleRate">
            <summary>
            Gets the sample rate (samples per second)
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFormat.AverageBytesPerSecond">
            <summary>
            Gets the average number of bytes used per second
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFormat.BlockAlign">
            <summary>
            Gets the block alignment
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFormat.BitsPerSample">
            <summary>
            Gets the number of bits per sample (usually 16 or 32, sometimes 24 or 8)
            Can be 0 for some codecs
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Media.WavFormat.ExtraSize">
            <summary>
            Gets the number of extra bytes used by this waveformat. Often 0,
            except for compressed formats which store extra data after the WAVEFORMATEX header
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.RigidBodyMassData2D">
            <summary>
            This holds the mass data computed for a shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyMassData2D.Mass">
            <summary>
            The position of the shape's centroid relative to the shape's origin.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyMassData2D.Center">
            <summary>
            The position of the shape's centroid relative to the shape's origin.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyMassData2D.I">
            <summary>
            The rotational inertia of the shape about the local origin.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IEdgeColliderShape2D">
            <summary>
            Interface for a Edge Shape of 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IEdgeColliderShape2D.Vertices">
            <summary>
            Gets the edge vertices
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IEdgeColliderShape2D.Normals">
            <summary>
            Gets the Edge normals
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IEdgeColliderShape2D.SetShapeFromVertices(WaveEngine.Common.Math.Vector2[])">
            <summary>
            Copy vertices.
            </summary>
            <param name="vertices">The edge vertices</param>>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IEdgeColliderShape2D.SetShapeFromVertices(WaveEngine.Common.Math.Vector2[],WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Copy vertices.
            </summary>
            <param name="vertices">The edge vertices</param>
            <param name="scale">The scale of the shape</param>
            <param name="center">The box center</param>
            <param name="angle">The box angle</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.AngleLimitsDef">
            <summary>
            Angle limit properties
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.AngleLimitsDef.EnableLimits">
            <summary>
            A flag to enable the joint limits.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.AngleLimitsDef.LowerAngle">
            <summary>
            The lower angle for the joint limit (radians).
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.AngleLimitsDef.UpperAngle">
            <summary>
            The upper angle for the joint limit (radians).
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IWheelJoint2D">
            <summary>
            Interface for a Wheel Joint 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWheelJoint2D.EnableMotor">
            <summary>
            Gets or sets a value indicating whether the motor is enabled.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWheelJoint2D.MotorSpeed">
            <summary>
            Gets or sets the desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWheelJoint2D.MaxMotorTorque">
            <summary>
            Gets or sets the maximum motor torque used to achieve the desired motor speed. Usually in N-m.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWheelJoint2D.SpringFrequencyHz">
            <summary>
            Gets or sets the frequency in Hz
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWheelJoint2D.SpringDampingRatio">
            <summary>
            Gets or sets the damping ratio.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWheelJoint2D.JointTranslation">
            <summary>
            Gets the current joint translation, usually in meters.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWheelJoint2D.JointTranslationSpeed">
            <summary>
            Gets the current joint translation speed, usually in meters per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWheelJoint2D.MotorTorque">
            <summary>
            Gets the current motor torque given the inverse time step, usually in N-m.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.WheelJointDef2D">
            <summary>
            Definition of a 2D Wheel Joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.WheelJointDef2D.FrequencyHz">
            <summary>
            Suspension frequency, zero indicates no suspension
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.WheelJointDef2D.DampingRatio">
            <summary>
            Suspension damping ratio, one indicates critical damping
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.WheelJointDef2D.AxisAngle">
            <summary>
            The local translation axis (radians).
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.WheelJointDef2D.MotorDef">
            <summary>
            Motor properties
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.RopeJointDef2D">
            <summary>
            Definition of a 2D Rope Joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RopeJointDef2D.MaxLength">
            <summary>
            The maximum length of the rope
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IRopeJoint2D">
            <summary>
            Interface for a Rope Joint 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRopeJoint2D.MaxLength">
            <summary>
            Gets or sets the maximum length of the rope.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IMouseJoint2D">
            <summary>
            Interface for a Mouse Joint 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IMouseJoint2D.Target">
            <summary>
            Gets or sets the initial world target point. This is assumed
            to coincide with the body anchor initially.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IMouseJoint2D.MaxForce">
            <summary>
            Gets or sets the maximum constraint force that can be exerted
            to move the candidate body. Usually you will express
            as some multiple of the weight (multiplier * mass * gravity).
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IMouseJoint2D.FrequencyHz">
            <summary>
            Gets or sets the frequency in Hz
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IMouseJoint2D.DampingRatio">
            <summary>
            Gets or sets the damping ratio.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.MouseJointDef2D">
            <summary>
            Definition of a 2D Distance Joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.MouseJointDef2D.Target">
            <summary>
            The initial world target point. This is assumed
            to coincide with the body anchor initially.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.MouseJointDef2D.MaxForce">
            <summary>
            The maximum constraint force that can be exerted
            to move the candidate body. Usually you will express
            as some multiple of the weight (multiplier * mass * gravity).
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.MouseJointDef2D.FrequencyHz">
            <summary>
            The response speed.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.MouseJointDef2D.DampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IPrismaticJoint2D">
            <summary>
            Interface for a Prismatic Joint 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.ReferenceAngle">
            <summary>
            Gets the reference angle
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.EnableMotor">
            <summary>
            Gets or sets a value indicating whether the motor is enabled.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.MotorSpeed">
            <summary>
            Gets or sets the desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.MaxMotorForce">
            <summary>
            Gets or sets the maximum motor torque used to achieve the desired motor speed. Usually in N-m.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.EnableLimits">
            <summary>
            Gets or sets a value indicating whether the joint limits are enabled.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.LowerLimit">
            <summary>
            Gets the lower angle for the joint limit (radians).
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.UpperLimit">
            <summary>
            Gets the upper angle for the joint limit (radians).
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.JointTranslation">
            <summary>
            Gets the current joint translation, usually in meters.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.JointTranslationSpeed">
            <summary>
            Gets the current joint translation speed, usually in meters per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPrismaticJoint2D.MotorForce">
            <summary>
            Gets the current motor force given the inverse time step, usually in N.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IPrismaticJoint2D.SetLimits(System.Single,System.Single)">
            <summary>
            Sets the joint limits
            </summary>
            <param name="lower">The lower limit</param>
            <param name="upper">The upper limit</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.PrismaticJointDef2D">
            <summary>
            Definition of a 2D Prismatic Joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.PrismaticJointDef2D.ReferenceAngle">
            <summary>
            The bodyB angle minus bodyA angle in the reference state (radians).
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.PrismaticJointDef2D.AxisAngle">
            <summary>
            The local translation axis (radians).
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.PrismaticJointDef2D.MotorDef">
            <summary>
            Motor properties
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.PrismaticJointDef2D.TranslationLimitsDef">
            <summary>
            Translation limits
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.WeldJointDef2D">
            <summary>
            Definition of a 2D Weld Joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.WeldJointDef2D.ReferenceAngle">
            <summary>
            The bodyB angle minus bodyA angle in the reference state (radians).
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.WeldJointDef2D.FrequencyHz">
            <summary>
            The mass-spring-damper frequency in Hertz. A value of 0 disables softness.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.WeldJointDef2D.DampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IWeldJoint2D">
            <summary>
            Interface for a Distance Joint 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWeldJoint2D.ReferenceAngle">
            <summary>
            Gets the reference angle
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWeldJoint2D.FrequencyHz">
            <summary>
            Gets or sets the frequency in Hz
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IWeldJoint2D.DampingRatio">
            <summary>
            Gets or sets the damping ratio.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.MotorDef">
            <summary>
            Motor properties definition
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.MotorDef.EnableMotor">
            <summary>
            A flag to enable the joint motor.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.MotorDef.MotorSpeed">
            <summary>
            The desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.MotorDef.MaxMotorTorque">
            <summary>
            The maximum motor torque used to achieve the desired motor speed. Usually in N-m.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.LimitsDef">
            <summary>
            Motor properties definition
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.LimitsDef.EnableLimits">
            <summary>
            A flag to enable the joint limits.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.LimitsDef.LowerLimit">
            <summary>
            The lower translation limit
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.LimitsDef.UpperLimit">
            <summary>
            The upper translation limit
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.JointType2D">
            <summary>
            Joint types
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.UnknownJoint">
            <summary>
            Unknown joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.RevoluteJoint">
            <summary>
            Revolute joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.PrismaticJoint">
            <summary>
            Prismatic joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.DistanceJoint">
            <summary>
            Distance joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.PulleyJoint">
            <summary>
            Pulley joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.MouseJoint">
            <summary>
            Mouse joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.GearJoint">
            <summary>
            Gear joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.WheelJoint">
            <summary>
            Wheel joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.WeldJoint">
            <summary>
            Weld joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.FrictionJoint">
            <summary>
            Friction joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.RopeJoint">
            <summary>
            Rope joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointType2D.MotorJoint">
            <summary>
            Motor joint
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IDistanceJoint2D">
            <summary>
            Interface for a Distance Joint 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IDistanceJoint2D.Distance">
            <summary>
            Gets or sets the natural length.
            Manipulating the length can lead to non-physical behavior when the frequency is zero.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IDistanceJoint2D.FrequencyHz">
            <summary>
            Gets or sets the frequency in Hz
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IDistanceJoint2D.DampingRatio">
            <summary>
            Gets or sets the damping ratio.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IRevoluteJoint2D">
            <summary>
            Interface for a Revolute Joint 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.ReferenceAngle">
            <summary>
            Gets the reference angle
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.EnableMotor">
            <summary>
            Gets or sets a value indicating whether the motor is enabled.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.MotorSpeed">
            <summary>
            Gets or sets the desired motor speed. Usually in radians per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.MaxMotorTorque">
            <summary>
            Gets or sets the maximum motor torque used to achieve the desired motor speed. Usually in N-m.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.EnableLimits">
            <summary>
            Gets or sets a value indicating whether the joint limits are enabled.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.LowerAngle">
            <summary>
            Gets the lower angle for the joint limit (radians).
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.UpperAngle">
            <summary>
            Gets the upper angle for the joint limit (radians).
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.JointAngle">
            <summary>
            Gets the current joint angle in radians
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.JointAngleSpeed">
            <summary>
            Gets the current joint angle speed in radians per second.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRevoluteJoint2D.MotorTorque">
            <summary>
            Gets the current motor torque given the inverse time step.
            Unit is N*m
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRevoluteJoint2D.SetLimits(System.Single,System.Single)">
            <summary>
            Sets the joint limits
            </summary>
            <param name="lower">The lower limit</param>
            <param name="upper">The upper limit</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.DistanceJointDef2D">
            <summary>
            Definition of a 2D Distance Joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.DistanceJointDef2D.Lenght">
            <summary>
            /// The natural length between the anchor points
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.DistanceJointDef2D.FrequencyHz">
            <summary>
            The mass-spring-damper frequency in Hertz. A value of 0 disables softness.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.DistanceJointDef2D.DampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.JointDef2D`1">
            <summary>
            Definition of a 2D Joint
            </summary>
            <typeparam name="T">The type of the joint that define</typeparam>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.RevoluteJointDef2D">
            <summary>
            Definition of a 2D Revolute Joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RevoluteJointDef2D.ReferenceAngle">
            <summary>
            The bodyB angle minus bodyA angle in the reference state (radians).
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RevoluteJointDef2D.MotorDef">
            <summary>
            Motor properties
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RevoluteJointDef2D.AngleLimitDef">
            <summary>
            Angle limits
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IRigidBody2D">
            <summary>
            Interface for RigidBody of 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.Position">
            <summary>
            Gets the world position of the body.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.Angle">
            <summary>
            Gets the world angle of the body in radians.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.LinearVelocity">
            <summary>
            Gets or sets the linear velocity of the body's origin in world co-ordinates.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.AngularVelocity">
            <summary>
            Gets or sets the angular velocity of the body.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.LinearDamping">
            <summary>
            Gets or sets the Linear damping is use to reduce the linear velocity.
            <remarks>The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large.</remarks>
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.AngularDamping">
            <summary>
            Gets or sets the Angular damping is use to reduce the angular velocity.
            <remarks>The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large.</remarks>
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.AllowSleep">
            <summary>
            Gets or sets a value indicating whether this flag to false if this body should never fall asleep. Note that this increases CPU usage.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.Awake">
            <summary>
            Gets or sets a value indicating whether this is this body initially awake or sleeping?
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.FixedRotation">
            <summary>
            Gets or sets a value indicating whether this body be prevented from rotating? Useful for characters.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.Bullet">
            <summary>
            Gets or sets a value indicating whether this is a fast moving body that should be prevented from tunneling through other moving bodies?
            <remarks>
            Note that all bodies are prevented from tunneling through kinematic and static bodies.
            This setting is only considered on dynamic bodies.
            </remarks>
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.Active">
            <summary>
            Gets or sets a value indicating whether this body start out active?
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.UserData">
            <summary>
            Gets or sets the application specific body data.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.GravityScale">
            <summary>
            Gets or sets the gravity scale applied to this body.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.Type">
            <summary>
            Gets or sets the rigid body 2D type
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.WorldCenter">
            <summary>
            Gets the world position of the center of mass.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.LocalCenter">
            <summary>
            Gets the local position of the center of the mass.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.ColliderList">
            <summary>
            Gets the collider list
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.Mass">
            <summary>
            Gets the total mass of the body, usually in kg-m^2.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.Inertia">
            <summary>
            Gets the rotational inertia of the body about the local origin, usually in kg-m^2.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IRigidBody2D.MassData">
            <summary>
            Gets or sets the mass data of the body.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.SetTransform(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Set the position of the body's origin and rotation. This breaks any contacts and wakes the other bodies. Manipulating a body's transform may cause non-physical behavior.
            </summary>
            <param name="worldPosition">the world position of the body's local origin.</param>
            <param name="angle">the world rotation in radians.</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.ApplyForce(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Boolean)">
            <summary>
            Apply a force at a world point. If the force is not applied at the center of mass, it will generate a torque and affect the angular velocity. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="point">The world position of the point of application.</param>
            <param name="wake">Also wake up the body</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.ApplyForceToCenter(WaveEngine.Common.Math.Vector2,System.Boolean)">
            <summary>
            Apply a force to the center of mass. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="wake">Also wake up the body</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.ApplyLinearImpulse(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Boolean)">
            <summary>
            pply an impulse at a point. This immediately modifies the velocity. It also modifies the angular velocity if the point of application is not at the center of mass. This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
            <param name="point">The world position of the point of application.</param>
            <param name="wake">Also wake up the body</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.ApplyTorque(System.Single,System.Boolean)">
            <summary>
            Apply a torque. This affects the angular velocity without affecting the linear velocity of the center of mass. This wakes up the body.
            </summary>
            <param name="torque">About the z-axis (out of the screen), usually in N-m.</param>
            <param name="wake">Also wake up the body</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.CreateCollider(WaveEngine.Common.Physics2D.ColliderDef2D)">
            <summary>
            Creates a collider with the specified definition
            </summary>
            <param name="def">The collider 2D definition</param>
            <returns>The collider 2D</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.DestroyCollider(WaveEngine.Common.Physics2D.ICollider2D)">
            <summary>
            Destroy a fixture. This removes the fixture from the broad-phase and destroys all contacts associated with this fixture.
            This will automatically adjust the mass of the body if the body is dynamic and the fixture has positive density.
            All fixtures attached to a body are implicitly destroyed when the body is destroyed.
            </summary>
            <param name="collider">The collider 2D to be removed</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.GetLinearVelocityFromLocalPoint(WaveEngine.Common.Math.Vector2)">
            <summary>
            Get the world velocity of a local point.
            </summary>
            <param name="localPoint">Point in local coordinates</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.GetLinearVelocityFromWorldPoint(WaveEngine.Common.Math.Vector2)">
            <summary>
            Get the world linear velocity of a world point attached to this body..
            </summary>
            <param name="localPoint">Point in world coordinates</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.GetLocalPoint(WaveEngine.Common.Math.Vector2)">
            <summary>
            Gets a local point relative to the body's origin given a world point
            </summary>
            <param name="worldPoint">Point in world coordinates</param>
            <returns>The corresponding local point relative to the body's origin.</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.GetLocalVector(WaveEngine.Common.Math.Vector2)">
            <summary>
            Gets a local vector given a world vector.
            </summary>
            <param name="worldVector">Vector in world coordinates.</param>
            <returns>The corresponding local vector</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.GetWorldPoint(WaveEngine.Common.Math.Vector2)">
            <summary>
            Get the world coordinates of a point given the local coordinates.
            </summary>
            <param name="localPoint">A point on the body measured relative the the body's origin.</param>
            <returns>The same point expressed in world coordinates.</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.GetWorldVector(WaveEngine.Common.Math.Vector2)">
            <summary>
            Get the world coordinates of a vector given the local coordinates.
            </summary>
            <param name="localVector">A vector fixed in the body.</param>
            <returns>The same vector expressed in world coordinates</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IRigidBody2D.ResetMassData">
            <summary>
            This resets the mass properties to the sum of the mass properties of the fixtures.
            </summary>
            <remarks>
            This normally does not need to be called unless you called SetMassData to override the mass and you later want to reset the mass.
            </remarks>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.RigidBodyDef2D">
            <summary>
            Definition of a Rigid Body 2D.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.Position">
            <summary>
            The world position of the body. Avoid creating bodies at the origin since this can lead to many overlapping shapes.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.Angle">
            <summary>
            The world angle of the body in radians.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.LinearVelocity">
            <summary>
            The linear velocity of the body's origin in world co-ordinates.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.AngularVelocity">
            <summary>
            The angular velocity of the body.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.LinearDamping">
            <summary>
            Linear damping is use to reduce the linear velocity.
            <remarks>The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large.</remarks>
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.AngularDamping">
            <summary>
            Angular damping is use to reduce the angular velocity.
            <remarks>The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large.</remarks>
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.AllowSleep">
            <summary>
            Set this flag to false if this body should never fall asleep. Note that this increases CPU usage.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.Awake">
            <summary>
            Is this body initially awake or sleeping?
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.FixedRotation">
            <summary>
            Should this body be prevented from rotating? Useful for characters.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.Bullet">
            <summary>
            Is this a fast moving body that should be prevented from tunneling through other moving bodies?
            <remarks>
            Note that all bodies are prevented from tunneling through kinematic and static bodies.
            This setting is only considered on dynamic bodies.
            </remarks>
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.Active">
            <summary>
            Does this body start out active?
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.UserData">
            <summary>
            Use this to store application specific body data.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.GravityScale">
            <summary>
            Scale the gravity applied to this body.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyDef2D.Type">
            <summary>
            The rigid body 2D type
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.RigidBodyType2D">
            <summary>
            Rigid body type 2D
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyType2D.Static">
            <summary>
            Zero mass, zero velocity, may be manually moved.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyType2D.Kinematic">
            <summary>
            Zero mass, non-zero velocity set by user, moved by solver.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.RigidBodyType2D.Dynamic">
            <summary>
            Zero mass, non-zero velocity set by user, moved by solver.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ColliderDef2D">
            <summary>
            Definition of a 2D Collision Shape
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderDef2D.Density">
            <summary>
            The density, usually in kg/m^2.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderDef2D.Friction">
            <summary>
            The friction coefficient, usually in the range [0,1].
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderDef2D.IsSensor">
            <summary>
            A sensor shape collects contact information but never generates a collision response.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderDef2D.Restitution">
            <summary>
            The restitution (elasticity) usually in the range [0,1].
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderDef2D.Shape">
            <summary>
            The Collider shape
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderDef2D.UserData">
            <summary>
            Use this to store application specific body data.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ColliderShapeType2D">
            <summary>
            Shape types
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderShapeType2D.Circle">
            <summary>
            Circle shape
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderShapeType2D.Box">
            <summary>
            Box shape
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderShapeType2D.Edge">
            <summary>
            Edge type shape
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderShapeType2D.Polygon">
            <summary>
            Polygon shape
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderShapeType2D.Chain">
            <summary>
            Chain shape
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderShapeType2D.TypeCount">
            <summary>
            Shape type count
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ICircleColliderShape2D">
            <summary>
            Interface for a Circle Shape of 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICircleColliderShape2D.Position">
            <summary>
            Gets or sets the circle position
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ICircleColliderShape2D.SetShape(System.Single,WaveEngine.Common.Math.Vector2)">
            <summary>
            Set the shape of the circle collider
            </summary>
            <param name="radius">The radius of the circle.</param>
            <param name="position">The position offset of the circle respect the rigid body</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ContactDelegate">
            <summary>
            Contact delegate using in BeginContact and EndContact
            </summary>
            <param name="contact">The contact instance</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ICollider2D">
            <summary>
            Interface for a Collider Shape of 2D physics.
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Physics2D.ICollider2D.BeginCollision">
            <summary>
            Called when two fixtures begin to touch.
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Physics2D.ICollider2D.EndCollision">
            <summary>
            Called when two fixtures cease to touch.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.Density">
            <summary>
            Gets or sets the density, usually in kg/m^2.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.Friction">
            <summary>
            Gets or sets the friction coefficient, usually in the range [0,1].
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.IsSensor">
            <summary>
            Gets or sets a value indicating whether this sensor shape collects contact information but never generates a collision response.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.Restitution">
            <summary>
            Gets or sets the restitution (elasticity) usually in the range [0,1].
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.Shape">
            <summary>
            Gets the Collider shape
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.RigidBody">
            <summary>
            Gets the parent body of this collider
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.UserData">
            <summary>
            Gets or sets the object user data
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.InternalCollider">
            <summary>
            Gets the internal Box2D fixture instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.GroupIndex">
            <summary>
            Gets or sets the collision groups allow a certain group of objects to never collide (negative) or always collide (positive).
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.CollisionCategories">
            <summary>
            Gets or sets the collision category bits.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollider2D.MaskBits">
            <summary>
            Gets or sets the collision mask bits.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ICollider2D.ComputeDistance(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single,System.Single@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Compute the distance from the current shape to the specified point. This only works for convex shapes.
            </summary>
            <param name="point">a point in world coordinates</param>
            <param name="shapePosition">the shape world position</param>
            <param name="shapeAngle">the shape world angle</param>
            <param name="distance">the distance from the current shape</param>
            <param name="normal">the direction in which the distance increases</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IColliderShape2D">
            <summary>
            Interface for a Collider Shape of 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IColliderShape2D.Radius">
            <summary>
            Gets or sets
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IColliderShape2D.Type">
            <summary>
            Gets the collider type
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IColliderShape2D.ChildCount">
            <summary>
            Gets the number of child primitives
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IColliderShape2D.InternalShape">
            <summary>
            Gets the internal shape
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IColliderShape2D.TestPoint(WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@,System.Single)">
            <summary>
            Test a point for containment in this shape.
            </summary>
            <param name="point">a point in world coordinates</param>
            <param name="shapePosition">the shape world position</param>
            <param name="shapeAngle">the shape world angle</param>
            <returns>True if the point is contained in the shape</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IColliderShape2D.TestRectangle(WaveEngine.Common.Math.RectangleF@,WaveEngine.Common.Math.Vector2@,System.Single)">
            <summary>
            Test a rectangle for containment in this shape.
            </summary>
            <param name="rectangle">a rectangle in world coordinates</param>
            <param name="shapePosition">the shape world position</param>
            <param name="shapeAngle">the shape world angle</param>
            <returns>True if the point is contained in the shape</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IColliderShape2D.TestShape(WaveEngine.Common.Math.Vector2,System.Single,WaveEngine.Common.Physics2D.IColliderShape2D,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Test another shape for containment in this shape.
            </summary>
            <param name="positionA">The position of A shape</param>
            <param name="angleA">The angle of A shape</param>
            <param name="shapeB">The second shape</param>
            <param name="positionB">The position of B shape</param>
            <param name="angleB">The angle of B shape</param>
            <returns>If the two shapes collides</returns>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IBoxColliderShape2D">
            <summary>
            Interface for a Box collider Shape of 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IBoxColliderShape2D.Width">
            <summary>
            Gets or sets the width of the Box collider.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IBoxColliderShape2D.Height">
            <summary>
            Gets or sets the height of the Box collider.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IBoxColliderShape2D.Center">
            <summary>
            Gets or sets the center of the Box collider shape.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IBoxColliderShape2D.Angle">
            <summary>
            Gets or sets the angle of the box shape.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IBoxColliderShape2D.SetShape(System.Single,System.Single)">
            <summary>
            Setup the box collider shape
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IBoxColliderShape2D.SetShape(System.Single,System.Single,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Build the shape to represent an oriented box.
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="center">The box center</param>
            <param name="angle">The box angle</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IPolygonColliderShape2D">
            <summary>
            Interface for a Polygon Shape of 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPolygonColliderShape2D.Vertices">
            <summary>
            Gets the polygon shapes
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPolygonColliderShape2D.Data">
            <summary>
            Gets the data
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IPolygonColliderShape2D.Normals">
            <summary>
            Gets the polygon normals
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IPolygonColliderShape2D.SetShapeFromVertices(WaveEngine.Common.Math.Vector2[])">
            <summary>
            Copy vertices. This assumes the vertices define a convex polygon. It is assumed that the exterior is the the right of each edge.
            </summary>
            <param name="vertices">The polygon vertices</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IPolygonColliderShape2D.SetShapeFromVertices(WaveEngine.Common.Math.Vector2[],System.Single,System.Single,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Copy vertices. This assumes the vertices define a convex polygon. It is assumed that the exterior is the the right of each edge.
            </summary>
            <param name="vertices">The polygon vertices</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="scale">The scale of the shape</param>
            <param name="center">The box center</param>
            <param name="angle">The box angle</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IPolygonColliderShape2D.SetShapeFromData(WaveEngine.Common.Math.Vector2[],System.Collections.Generic.List{System.Collections.Generic.List{WaveEngine.Common.Math.Vector2}},System.Single,System.Single,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Shape generated from the implementation data
            </summary>
            <param name="vertices">The polygon vertices</param>
            <param name="data">The internal data</param>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="scale">The scale of the shape</param>
            <param name="center">The box center</param>
            <param name="angle">The box angle</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.IPolygonColliderShape2D.SetShapeFromTexture(WaveEngine.Common.Graphics.Texture,WaveEngine.Common.Math.RectangleF,System.Single,System.Boolean,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Build the polygon shape from a texture.
            </summary>
            <param name="texture">The texture</param>
            <param name="rectangle">The source rectangle</param>
            <param name="alphaThreshold">The alpha threshold</param>
            <param name="holeDetection">Hole detection in the image</param>
            <param name="scale">The scale of the shape</param>
            <param name="center">The box center</param>
            <param name="angle">The box angle</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ColliderCategory2D">
            <summary>
            Physic 2d Collision categories
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat1">
            <summary>
            Cat1 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat2">
            <summary>
            Cat2 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat3">
            <summary>
            Cat3 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat4">
            <summary>
            Cat4 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat5">
            <summary>
            Cat5 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat6">
            <summary>
            Cat6 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat7">
            <summary>
            Cat7 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat8">
            <summary>
            Cat8 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat9">
            <summary>
            Cat9 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat10">
            <summary>
            Cat10 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat11">
            <summary>
            Cat11 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat12">
            <summary>
            Cat12 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat13">
            <summary>
            Cat13 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat14">
            <summary>
            Cat14 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat15">
            <summary>
            Cat15 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.Cat16">
            <summary>
            Cat16 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.None">
            <summary>
            None Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.ColliderCategory2D.All">
            <summary>
            All Categories
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ICollisionInfo2D">
            <summary>
            Interface for a Collider Shape of 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this contact is enabled. You can disable the contact in contact listener methods
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.IsTouching">
            <summary>
            Gets a value indicating whether the two colliders is touching
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.Friction">
            <summary>
            Gets or sets the friction coefficient, usually in the range [0,1].
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.Restitution">
            <summary>
            Gets or sets the restitution (elasticity) usually in the range [0,1].
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.TangentSpeed">
            <summary>
            Gets or sets the tangent speed
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.ColliderA">
            <summary>
            Gets collider A in this contact.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.ColliderB">
            <summary>
            Gets collider B in this contact.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.Points">
            <summary>
            Gets the collision points
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ICollisionInfo2D.Normal">
            <summary>
            Gets the collision normals
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ICollisionInfo2D.FlagForFiltering">
            <summary>
            Flag this contact for filtering. Filtering will occur the next time step.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ICollisionInfo2D.ResetFriction">
            <summary>
            Reset the friction mixture to the default value.
            </summary>
            <remarks>
            You can modify contact properties in PreSolve/PostSolve methods in ContactListener
            </remarks>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ICollisionInfo2D.ResetRestitution">
            <summary>
            Reset the restitution to the default contact value.
            </summary>
            <remarks>
            You can modify contact properties in PreSolve/PostSolve methods in ContactListener
            </remarks>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.DebugDrawFlags">
            <summary>
            Debug draw flags
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.DebugDrawFlags.ShapeBit">
            <summary>
            Draw the shape
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.DebugDrawFlags.JointBit">
            <summary>
            Draw joints
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.DebugDrawFlags.AabbBit">
            <summary>
            Draw AABB (Axis Aligned Bounding Box)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.DebugDrawFlags.PairBit">
            <summary>
            Draw pairs
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.DebugDrawFlags.CenterOfMassBit">
            <summary>
            Draw center of mass
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ISimulationDebugDraw2D">
            <summary>
            Interface for drawing debug information of Simulation 2D.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulationDebugDraw2D.DrawCircle(WaveEngine.Common.Math.Vector2,System.Single,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draw a circle
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulationDebugDraw2D.DrawPolygon(WaveEngine.Common.Math.Vector2[],WaveEngine.Common.Graphics.Color)">
            <summary>
            Draw a polygon
            </summary>
            <param name="vertices">The vertices</param>
            <param name="color">The color</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulationDebugDraw2D.DrawSegment(WaveEngine.Common.Math.Vector2,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draw a segment
            </summary>
            <param name="p1">The first point of the segment</param>
            <param name="p2">The second point of the segment</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulationDebugDraw2D.DrawSolidCircle(WaveEngine.Common.Math.Vector2,System.Single,WaveEngine.Common.Math.Vector2,WaveEngine.Common.Graphics.Color)">
            <summary>
            Draw a solid circle
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="axis">The axis.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulationDebugDraw2D.DrawSolidPolygon(WaveEngine.Common.Math.Vector2[],WaveEngine.Common.Graphics.Color)">
            <summary>
            Draw a solid polygon
            </summary>
            <param name="vertices">The vertices</param>
            <param name="color">The color</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulationDebugDraw2D.DrawTransform(WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Draw a transform
            </summary>
            <param name="position">The Draw</param>
            <param name="angle">The Angle</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.ISimulation2D">
            <summary>
            Interface for Simulation2D.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.IsLocked">
            <summary>
            Gets a value indicating whether the world is locked (in the middle of a time step).
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.Gravity">
            <summary>
            Gets or sets the global gravity vector
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.AllowSleeping">
            <summary>
            Gets or sets a value indicating whether allow sleeping
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.WorldScale">
            <summary>
            Gets or sets the world scale
            <remarks>
            By default, the scale of the world is 1unit = 1meter.
            </remarks>
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.VelocityIterations">
            <summary>
            Gets or sets the velocity iterations.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.PositionIterations">
            <summary>
            Gets or sets the position iterations.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.InternWorld">
            <summary>
            Gets the internal native world instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.DrawFlags">
            <summary>
            Gets or sets the debug draw flags
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Physics2D.ISimulation2D.BeginCollision">
            <summary>
            Called when two fixtures begin to touch.
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Physics2D.ISimulation2D.EndCollision">
            <summary>
            Called when two fixtures cease to touch.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.CollisionList">
            <summary>
            Gets the colllision list
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.ISimulation2D.WorldStaticBody">
            <summary>
            Gets the world static body
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Physics2D.ISimulation2D.OnPhysicStep">
            <summary>
            Event fired when the physics will do an step
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulation2D.CreateRigidBody(WaveEngine.Common.Physics2D.RigidBodyDef2D)">
            <summary>
            Creates a RigidBody 2D
            </summary>
            <param name="bodyDef"> Body definition</param>
            <returns>The rigid body instance</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulation2D.RemoveRigidBody(WaveEngine.Common.Physics2D.IRigidBody2D)">
            <summary>
            Removes a RigidBody 2D from the world
            </summary>
            <param name="body"> The body to remove</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulation2D.CreateColliderShape``1">
            <summary>
            Instantiate a new Collider shape
            </summary>
            <typeparam name="T">The ColliderShape type</typeparam>
            <returns>The new collider shape</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulation2D.CreateJoint``2(``1)">
            <summary>
            Creates a Joint
            </summary>
            <typeparam name="T">The Joint type</typeparam>
            <typeparam name="J">The Joint definition type</typeparam>
            <param name="jointDef">The joint definition instance</param>
            <returns>The new joint instance</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulation2D.RemoveJoint(WaveEngine.Common.Physics2D.IJoint2D)">
            <summary>
            Remove the joint from the physic world
            </summary>
            <param name="joint">The joint to remove</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulation2D.Step(System.TimeSpan)">
            <summary>
            Take a time step. This performs collision detection, integration, and constraint solution.
            </summary>
            <param name="gameTime">the amount of time to simulate, this should not vary</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulation2D.SetDebugDraw(WaveEngine.Common.Physics2D.ISimulationDebugDraw2D)">
            <summary>
            Sets the debug draw of Simulation 2D
            </summary>
            <param name="debugDraw">The deubg draw instance</param>
        </member>
        <member name="M:WaveEngine.Common.Physics2D.ISimulation2D.DebugDraw">
            <summary>
            Draw the debug information
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.OnBrokeEventHandler">
            <summary>
            Event broke delegate
            </summary>
            <param name="sender">Sender Object.</param>
            <param name="jointError">The force that the joint has received to be broke.</param>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.IJoint2D">
            <summary>
            Interface for a Joint 2D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.InternalJoint">
            <summary>
            Gets the Box2D internal joint
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.BodyA">
            <summary>
            Gets the first body attached to this joint
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.BodyB">
            <summary>
            Gets the second body attached to this joint
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.LocalAnchorA">
            <summary>
            Gets the local anchor point relative to bodyA's origin.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.LocalAnchorB">
            <summary>
            Gets the local anchor point relative to bodyB's origin.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.ReactionForce">
            <summary>
            Gets the reaction force on bodyB at the joint anchor in Newtons.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.ReactionTorque">
            <summary>
            Gets the reaction torque on bodyB in N*m.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.IsActive">
            <summary>
            Gets or sets a value indicating whether this joint is active
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics2D.IJoint2D.BreakPoint">
            <summary>
            Gets or sets the amount offorce that a joint can take before break.
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Physics2D.IJoint2D.OnBroke">
            <summary>
            Event fired when the joint is broken
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics2D.JointDef2D">
            <summary>
            Definition of a 2D Joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointDef2D.BodyA">
            <summary>
            The first attached body
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointDef2D.BodyB">
            <summary>
            The second attached body
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointDef2D.LocalAnchorA">
            <summary>
            The local anchor point relative to bodyA's origin
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointDef2D.LocalAnchorB">
            <summary>
            The local anchor point relative to bodyB's origin
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointDef2D.CollideConnected">
            <summary>
            Set this flag to true if the attached bodies should collide
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointDef2D.UserData">
            <summary>
            Use this to attach application specific data to your joints.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointDef2D.IsActive">
            <summary>
            The joint is active by default
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics2D.JointDef2D.BreakPoint">
            <summary>
            The amount of force needed to break the joint
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IPhysicAction3D">
            <summary>
            Interface for character controller.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicAction3D.UserData">
            <summary>
            Gets or sets the user data
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicAction3D.InternalController">
            <summary>
            Gets the internal body
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.ICharacterController3D">
            <summary>
            Interface for character controller.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ICharacterController3D.StepHeight">
            <summary>
            Gets or sets the step height
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ICharacterController3D.FallSpeed">
            <summary>
            Gets or sets the fall speed
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ICharacterController3D.JumpSpeed">
            <summary>
            Gets or sets the jump speed
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ICharacterController3D.Gravity">
            <summary>
            Gets or sets the character gravity
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ICharacterController3D.OnGround">
            <summary>
            Gets a value indicating whether this character is on the ground.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ICharacterController3D.MaxSlope">
            <summary>
            Gets or sets the max slope
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ICharacterController3D.Jump">
            <summary>
            Jumps this character.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ICharacterController3D.Jump(WaveEngine.Common.Math.Vector3)">
            <summary>
            Jumps this character.
            </summary>
            <param name="jumpDirection">The direction</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ICharacterController3D.Teleport(WaveEngine.Common.Math.Vector3)">
            <summary>
            Teleports the specified character
            </summary>
            <param name="newPosition">The new position</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ICharacterController3D.SetVelocity(WaveEngine.Common.Math.Vector3)">
            <summary>
            Sets the character velocity.
            </summary>
            <param name="velocity">The velociy vector</param>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.CollisionCategory3D">
            <summary>
            Physic 3D Collision categories
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.Cat1">
            <summary>
            Cat1 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.Cat2">
            <summary>
            Cat2 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.Cat3">
            <summary>
            Cat3 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.Cat4">
            <summary>
            Cat4 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.Cat5">
            <summary>
            Cat5 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.Cat6">
            <summary>
            Cat6 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.Cat7">
            <summary>
            Cat7 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.Cat8">
            <summary>
            Cat8 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.Cat9">
            <summary>
            Cat9 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.Cat10">
            <summary>
            Cat10 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.Cat11">
            <summary>
            Cat11 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.Cat12">
            <summary>
            Cat12 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.Cat13">
            <summary>
            Cat13 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.Cat14">
            <summary>
            Cat14 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.Cat15">
            <summary>
            Cat15 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.Cat16">
            <summary>
            Cat16 Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.None">
            <summary>
            None Category
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.CollisionCategory3D.All">
            <summary>
            All Categories
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IGhostBody3D">
            <summary>
            Interface for Ghost body of 3D physics.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IStaticBody3D">
            <summary>
            Interface for Static body of 3D physics.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IPhysicBody3D">
            <summary>
            Interface for body of 3D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.UserData">
            <summary>
            Gets or sets the user data
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.InternalBody">
            <summary>
            Gets the internal body
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.IsSensor">
            <summary>
            Gets or sets a value indicating whether this body collects contact information but never generates a collision response.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.Friction">
            <summary>
            Gets or sets the friction of the rigid body
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.Restitution">
            <summary>
            Gets or sets the restitution of the rigid body
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.Flags">
            <summary>
            Gets or sets the static body flags
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.CollisionCategories">
            <summary>
            Gets or sets the collision category bits.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.MaskBits">
            <summary>
            Gets or sets the collision mask bits.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.ColliderShapes">
            <summary>
            Gets the colliders enumerable
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.Transform">
            <summary>
            Gets the wolrd transform of the body.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IPhysicBody3D.AddColliderShape(WaveEngine.Common.Physics3D.IColliderShape3D)">
            <summary>
            Add collider shape to the body
            </summary>
            <param name="shape">The shape</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IPhysicBody3D.RemoveColliderShape(WaveEngine.Common.Physics3D.IColliderShape3D)">
            <summary>
            Remove collider shape to the body
            </summary>
            <param name="shape">The shape to remove</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IPhysicBody3D.GetColliderShapeByIndex(System.Int32)">
            <summary>
            Gets collider shape by index
            </summary>
            <param name="index">The index</param>
            <returns>The collider shape</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IPhysicBody3D.SetTransform(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Quaternion,WaveEngine.Common.Math.Vector3)">
            <summary>
            Set the position of the body's origin and rotation. This breaks any contacts and wakes the other bodies. Manipulating a body's transform may cause non-physical behavior.
            </summary>
            <param name="position">the world position of the body's local origin.</param>
            <param name="orientation">the world rotation as a quaternion.</param>
            <param name="scale">the world scale</param>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.AnisotropicFriction">
            <summary>
            Gets or sets the anisotropic friction
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.CcdMotionThreshold">
            <summary>
            Gets or sets the CCD motion threshold
            </summary>
            <remarks>
            CCD motion clamping activates for convex objects that exceed a (squared to avoid taking square roots)
            velocity threshold. By default this threshold is zero, which means this feature is disabled for rigid bodies.
            </remarks>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.CcdSweptSphereRadius">
            <summary>
            Gets or sets the CCD swept shere radius
            </summary>
            <remarks>
            CCD works on an embedded sphere of radius, make sure this radius is embedded inside the convex objects, preferably smaller
            </remarks>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.CompanionId">
            <summary>
            Gets or sets the Companion ID
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.ContactDamping">
            <summary>
            Gets the contact damping
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.ContactProcessingThreshold">
            <summary>
            Gets or sets the contact processing threshold
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.ContactStiffness">
            <summary>
            Gets the contact stiffness
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.DeactivationTime">
            <summary>
            Gets or sets the deactivation time
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.HasContactResponse">
            <summary>
            Gets a value indicating whether has contact response
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.HitFraction">
            <summary>
            Gets or sets the hit fraction
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.InterpolationAngularVelocity">
            <summary>
            Gets or sets the angular velocity interpolated
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.InterpolationLinearVelocity">
            <summary>
            Gets or sets the linear velocity interpolated
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.InterpolationWorldTransform">
            <summary>
            Gets or sets the world transform interpolated
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.IsActive">
            <summary>
            Gets a value indicating whether this body is active
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.IslandTag">
            <summary>
            Gets or sets the island tag
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.IsStaticObject">
            <summary>
            Gets a value indicating whether this body is static
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.RollingFriction">
            <summary>
            Gets or sets the rolling friction
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPhysicBody3D.SpinningFriction">
            <summary>
            Gets or sets the spinning fraction
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.ActivationState">
            <summary>
            Activation state
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.ActivationState.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.ActivationState.ActiveTag">
            <summary>
            Active tag
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.ActivationState.IslandSleeping">
            <summary>
            Island sleeping
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.ActivationState.WantsDeactivation">
            <summary>
            Wants deactivation
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.ActivationState.DisableDeactivation">
            <summary>
            Disable deactivation
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.ActivationState.DisableSimulation">
            <summary>
            Disable simulation
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IRigidBody3D">
            <summary>
            Interface for RigidBody of 3D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.ActivationState">
            <summary>
            Gets or sets the activation state
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.Mass">
            <summary>
            Gets or sets the mass of the rigid body;
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.Gravity">
            <summary>
            Gets or sets the gravity applied to that rigid body
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.LinearDamping">
            <summary>
            Gets the Linear damping is use to reduce the linear velocity.
            <remarks>The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large.</remarks>
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.AngularDamping">
            <summary>
            Gets the Angular damping is use to reduce the angular velocity.
            <remarks>The damping parameter can be larger than 1.0f but the damping effect becomes sensitive to the time step when the damping parameter is large.</remarks>
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.LinearSleepingThreshold">
            <summary>
            Gets the sleeping threshold for linear velocity
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.AngularSleepingThreshold">
            <summary>
            Gets the sleeping threshold for angular velocity
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.LinearVelocity">
            <summary>
            Gets or sets the linear velocity
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.AngularVelocity">
            <summary>
            Gets or sets the angular velocity
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.InvMass">
            <summary>
            Gets the inverse of the mass
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.InvInertiaTensorWorld">
            <summary>
            Gets the Inverse vector of the inertia tensor of the world
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.CenterOfMassTransform">
            <summary>
            Gets or sets the center of mass transformation
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.CenterOfMassPosition">
            <summary>
            Gets the center of mass position
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.TotalForce">
            <summary>
            Gets the total force applied to the rigid body
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.TotalTorque">
            <summary>
            Gets the total torque applied to the rigid body
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.InvInertiaDiagLocal">
            <summary>
            Gets or sets the InvInertiaDiagLocal vector of the rigid body
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.Orientation">
            <summary>
            Gets the orientation
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.Aabb">
            <summary>
            Gets the bounding box
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.LinearFactor">
            <summary>
            Gets or sets the linear factor
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.AngularFactor">
            <summary>
            Gets or sets the angular factor
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.LocalInertia">
            <summary>
            Gets the local inertia
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.IsInWorld">
            <summary>
            Gets a value indicating whether this body is in the world
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.WakeUp">
            <summary>
            Wake up the rigid body
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.ResetMassProperty(System.Single,WaveEngine.Common.Math.Vector3)">
            <summary>
            Reset the mass property
            </summary>
            <param name="mass">The mass</param>
            <param name="inertia">The inertia</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.ApplyGravity">
            <summary>
            Apply the gravity
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.ApplyDamping(System.Single)">
            <summary>
            Apply the damping
            </summary>
            <param name="step">Delta time.</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.IntegrateVelocities(System.Single)">
            <summary>
            Integrate velocities
            </summary>
            <param name="step">Delta time.</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.ApplyCentralForce(WaveEngine.Common.Math.Vector3)">
            <summary>
            Apply a central force to the rigid body
            </summary>
            <param name="force">The force</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.ApplyTorque(WaveEngine.Common.Math.Vector3)">
            <summary>
            Apply a torque force to the rigid body
            </summary>
            <param name="torque">The torque</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.ApplyForce(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Apply a force to the rigid body
            </summary>
            <param name="force">The force vector</param>
            <param name="relativePosition">Relative poosition of the point where the force will be applied</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.ApplyCentralImpulse(WaveEngine.Common.Math.Vector3)">
            <summary>
            Apply an impulse to the center of the rigid body
            </summary>
            <param name="impulse">The impulse</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.ApplyTorqueImpulse(WaveEngine.Common.Math.Vector3)">
            <summary>
            Apply torque impulse to the rigid body
            </summary>
            <param name="torque">The torque impulse</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.ApplyImpulse(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Apply an impulse to the rigid body
            </summary>
            <param name="impulse">The impulse</param>
            <param name="relativePosition">Relative poosition of the point where the force will be applied</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.ClearForces">
            <summary>
            Clear all forces applied to the rigid body
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.UpdateInertiaTensor">
            <summary>
            Update the inertia tensor
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.GetVelocityInLocalPoint(WaveEngine.Common.Math.Vector3)">
            <summary>
            Gets the velocity in a local point of the rigid body
            </summary>
            <param name="relativePosition">The relative position</param>
            <returns>The velocity in the specified point</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.ComputeImpulseDenominator(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Compute impulse dominator
            </summary>
            <param name="pos">The position</param>
            <param name="normal">The normal</param>
            <returns>The impulse denominator</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.ComputeAngularImpulseDenominator(WaveEngine.Common.Math.Vector3)">
            <summary>
            Compute the angular impulse denominator
            </summary>
            <param name="axis">The axis</param>
            <returns>The angular impulse denominator</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.UpdateDeactivation(System.Single)">
            <summary>
            Update the deactivation
            </summary>
            <param name="step">The time step</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.WantsSleeping">
            <summary>
            Return if the entity need to sleep
            </summary>
            <returns>The rigid body need to sleep</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.ComputeGyroscopicImpulseImplicit_World(System.Single)">
            <summary>
            Compute the gyrocsopic impulse implicit by world
            </summary>
            <param name="step">The step</param>
            <returns>The Gyroscopic impulse</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.ComputeGyroscopicImpulseImplicit_Body(System.Single)">
            <summary>
            Compute the gyrocsopic impulse implicit by Body
            </summary>
            <param name="step">The step</param>
            <returns>The Gyroscopic impulse</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.ComputeGyroscopicForceExplicit(System.Single)">
            <summary>
            Compute the gyrocsopic impulse implicit
            </summary>
            <param name="step">The step</param>
            <returns>The Gyroscopic impulse</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.SetDamping(System.Single,System.Single)">
            <summary>
            Set Damping values
            </summary>
            <param name="linearDamping">Linear damping value</param>
            <param name="angularDamping">Angular damping value</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IRigidBody3D.SetSleepingThresholds(System.Single,System.Single)">
            <summary>
            Set sleeping threshold values
            </summary>
            <param name="linear">Linear threshold value</param>
            <param name="angular">Angular threshold value</param>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.IsKinematicObject">
            <summary>
            Gets a value indicating whether this body is kinematic
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IRigidBody3D.IsStaticOrKinematicObject">
            <summary>
            Gets a value indicating whether this body is kinematic or kinematic
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.GhostBodyDef3D">
            <summary>
            Definition of a Ghost Body 3D.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.StaticBodyDef3D">
            <summary>
            Definition of a Static Body 3D.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.PhysicBodyDef3D`1">
            <summary>
            Definition of a Physic Body 3D.
            </summary>
            <typeparam name="T">The physic body which this deffinition applies</typeparam>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.StaticBody3DFlags">
            <summary>
            Collision object 3D flags
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.StaticBody3DFlags.None">
            <summary>
            Empty flag
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.StaticBody3DFlags.StaticObject">
            <summary>
            This is a static object
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.StaticBody3DFlags.KinematicObject">
            <summary>
            This is a kinematic object
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.StaticBody3DFlags.NoContactResponse">
            <summary>
            This object doesn't have contact response
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.StaticBody3DFlags.CustomMaterialCallback">
            <summary>
            Custom material callback
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.StaticBody3DFlags.CharacterObject">
            <summary>
            This is a character object
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.StaticBody3DFlags.DisableVisualizeObject">
            <summary>
            Disable visualize object
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.StaticBody3DFlags.DisableSpuCollisionProcessing">
            <summary>
            Disable SPU collision processing
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.StaticBody3DFlags.HasContactStiffnessDamping">
            <summary>
            Has contact stiffness damping
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.StaticBody3DFlags.HasCustomDebugRenderingColor">
            <summary>
            Has custom debug rendering color
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.RigidBody3DFlags">
            <summary>
            Rigid body 3D flags
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBody3DFlags.DisableWorldGravity">
            <summary>
            Disable the world gravity
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBody3DFlags.EnableGyroscopicForceExplicit">
            <summary>
            Enable gyroscopic force explicit
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBody3DFlags.EnableGyroscopicForceImplicitWorld">
            <summary>
            Enable gyroscopic force implicit by world
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBody3DFlags.EnableGyroscopicForceImplicitBody">
            <summary>
            Enable gyroscopic force explicit by body
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.PhysicBodyDef3D">
            <summary>
            Definition of a Physic Body 3D.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.PhysicBodyDef3D.Position">
            <summary>
            The translation
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.PhysicBodyDef3D.Orientation">
            <summary>
            The orientation
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.PhysicBodyDef3D.CollisionCategories">
            <summary>
            Gets or sets the collision category bits.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.PhysicBodyDef3D.MaskBits">
            <summary>
            Gets or sets the collision mask bits.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.PhysicBodyDef3D.CenterOfMassOffset">
            <summary>
            RigidBody center of mass offset
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.PhysicBodyDef3D.Friction">
            <summary>
            Gets or sets the friction of the body
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.PhysicBodyDef3D.RollingFriction">
            <summary>
            Gets or sets the rolling friction of the body
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.PhysicBodyDef3D.Restitution">
            <summary>
            Gets or sets the restitution of the body
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.PhysicBodyDef3D.CcdMotionThreshold">
            <summary>
            Gets or sets the CCD motion threshold
            </summary>
            <remarks>
            CCD motion clamping activates for convex objects that exceed a (squared to avoid taking square roots)
            velocity threshold. By default this threshold is zero, which means this feature is disabled for rigid bodies.
            </remarks>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.PhysicBodyDef3D.CcdSweptSphereRadius">
            <summary>
            Gets or sets the CCD swept shere radius
            </summary>
            <remarks>
            CCD works on an embedded sphere of radius, make sure this radius is embedded inside the convex objects, preferably smaller
            </remarks>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.PhysicBodyDef3D.CollisionStore">
            <summary>
            The collision store
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.PhysicBodyDef3D.UserData">
            <summary>
            The user data
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.PhysicBodyDef3D.IsSensor">
            <summary>
            This body is not affected by collisions
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.RigidBodyDef3D">
            <summary>
            Definition of a Rigid Body 3D.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.Mass">
            <summary>
            The mass of the body
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.LocalInertia">
            <summary>
            The local inertia
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.LinearDamping">
            <summary>
            Linear damping is use to reduce the linear velocity.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.AngularDamping">
            <summary>
            Angular damping is use to reduce the angular velocity.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.LinearSleepingThreshold">
            <summary>
            The linear sleeping threshold
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.AngularSleepingThreshold">
            <summary>
            The angular sleeping threshold
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.AdditionalDamping">
            <summary>
            Has additional damping information
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.AdditionalDampingFactor">
            <summary>
            Additional damping factor
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.AdditionalLinearDampingThresholdSqr">
            <summary>
            Additional linear damping threshold (Sqr)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.AdditionalAngularDampingThresholdSqr">
            <summary>
            Additional angular damping threshold (Sqr)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.AdditionalAngularDampingFactor">
            <summary>
            Additional angular damping threshold
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.LinearVelocity">
            <summary>
            The linear velocity
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.AngularVelocity">
            <summary>
            The linear velocity
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.Type">
            <summary>
            The rigid body 2D type
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.LinearFactor">
            <summary>
            The linear factor
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.AngularFactor">
            <summary>
            The angular factor
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.OverrideGravity">
            <summary>
            Overrided gravity vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyDef3D.Gravity">
            <summary>
            Overrided gravity vector.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.RigidBodyType3D">
            <summary>
            Rigid body type 3D
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyType3D.Kinematic">
            <summary>
            Zero mass, non-zero velocity set by user, moved by solver.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.RigidBodyType3D.Dynamic">
            <summary>
            Zero mass, non-zero velocity set by user, moved by solver.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IConeColliderShape3D">
            <summary>
            Interface for a Cone Shape of 3D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeColliderShape3D.Radius">
            <summary>
            Gets or sets the radius of the capsule
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeColliderShape3D.Height">
            <summary>
            Gets or sets the height of the capsule
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.ICylinderColliderShape3D">
            <summary>
            Interface for a cylinder collider Shape of 3D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ICylinderColliderShape3D.Radius">
            <summary>
            Gets or sets the radius of the capsule
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ICylinderColliderShape3D.Height">
            <summary>
            Gets or sets the height of the capsule
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.ICapsuleColliderShape3D">
            <summary>
            Interface for a capsule collider Shape of 3D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ICapsuleColliderShape3D.Radius">
            <summary>
            Gets or sets the radius of the capsule
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ICapsuleColliderShape3D.Height">
            <summary>
            Gets or sets the height of the capsule
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IMeshColliderShape3D">
            <summary>
            Interface for a Mesh collider Shape of 3D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IMeshColliderShape3D.Mesh">
            <summary>
            Gets or sets the mesh of the shape
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IMeshColliderShape3D.Convex">
            <summary>
            Gets or sets a value indicating whether we need to create a convex shape from the mesh
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IMeshColliderShape3D.Size">
            <summary>
            Gets or sets the local scaling
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.ISphereColliderShape3D">
            <summary>
            Interface for a Sphere collider Shape of 3D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISphereColliderShape3D.Radius">
            <summary>
            Gets or sets the sphere radius
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IBoxColliderShape3D">
            <summary>
            Interface for a Box collider Shape of 3D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IBoxColliderShape3D.Size">
            <summary>
            Gets or sets the size of the box collider
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IColliderShape3D">
            <summary>
            Interface for a Collider Shape of 3D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IColliderShape3D.LocalScaling">
            <summary>
            Gets or sets the local scaling
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IColliderShape3D.OffsetTransform">
            <summary>
            Gets or sets the offset of the collider
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IColliderShape3D.InternalCollider">
            <summary>
            Gets the internal collider
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IColliderShape3D.UserData">
            <summary>
            Gets or sets the user data
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IColliderShape3D.Margin">
            <summary>
            Gets or sets the collision margin of this shape
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.ICollisionInfoStore3D">
            <summary>
            Represent a collision info list
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ICollisionInfoStore3D.ProcessCollision">
            <summary>
            Gets a value indicating whether we need to process collision
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ICollisionInfoStore3D.AddContact(WaveEngine.Common.Physics3D.IPhysicBody3D,WaveEngine.Common.Physics3D.IColliderShape3D,WaveEngine.Common.Physics3D.IPhysicBody3D,WaveEngine.Common.Physics3D.IColliderShape3D,WaveEngine.Common.Physics3D.InternalContactPoint3D@)">
            <summary>
            Add collision info
            </summary>
            <param name="bodyA">The first body</param>
            <param name="colliderA">The first collider</param>
            <param name="bodyB">The second body</param>
            <param name="colliderB">The second collider</param>
            <param name="contact">The contact</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ICollisionInfoStore3D.BeginContactProcess">
            <summary>
            Reset store
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ICollisionInfoStore3D.EndContactProcess(System.Boolean)">
            <summary>
            End contact process
            </summary>
            <param name="fireEvents">Fire events</param>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.HitResult3D">
            <summary>
            Hit result 3D
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.HitResult3D.Normal">
            <summary>
            The normal of the ray hit
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.HitResult3D.Point">
            <summary>
            The point of the ray
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.HitResult3D.HitFraction">
            <summary>
            The fraction
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.HitResult3D.Succeeded">
            <summary>
            True if this hit occurs
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.HitResult3D.PhysicBody">
            <summary>
            The physic body
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.HitResult3D.Collider">
            <summary>
            The collider shape
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.InternalContactPoint3D">
            <summary>
            Contact point between 2 colliders
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.InternalContactPoint3D.Distance">
            <summary>
            The Distance
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.InternalContactPoint3D.Normal">
            <summary>
            The Normal
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.InternalContactPoint3D.PositionOnThis">
            <summary>
            The position on this
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.InternalContactPoint3D.PositionOnOther">
            <summary>
            The position on other collider
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.RayCastCallbackDelegate">
            <summary>
            Raycast callback delegate
            </summary>
            <param name="hit">A new hig result detected</param>
            <returns>Continue giving hits</returns>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.ISimulation3D">
            <summary>
            Interface for Simulation3D.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISimulation3D.Gravity">
            <summary>
            Gets or sets the global gravity vector
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISimulation3D.ApplySpeculativeContactRestitution">
            <summary>
            Gets or sets a value indicating whether you want to apply the speculative contact restitution.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISimulation3D.WorldScale">
            <summary>
            Gets or sets the world scale
            <remarks>
            By default, the scale of the world is 1unit = 1meter.
            </remarks>
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISimulation3D.MaxSubSteps">
            <summary>
            Gets or sets the maximum number of substepts that Physics3D is allowed to perform every step.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISimulation3D.FixedTimeStep">
            <summary>
            Gets or sets the resolution of physics simulation. Default value of 1/60, or 60fps.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISimulation3D.InternalWorld">
            <summary>
            Gets the internal native world instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISimulation3D.DrawFlags">
            <summary>
            Gets or sets the debug draw flags
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Physics3D.ISimulation3D.OnPhysicStep">
            <summary>
            Event fired when the physics will do an step
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.CreatePhysicBody``2(``1)">
            <summary>
            Creates a StaticBody 3D
            </summary>
            <param name="bodyDef"> Body definition</param>
            <returns>The static body instance</returns>
            <typeparam name="T">The physic body interface</typeparam>
            <typeparam name="J">The body definition class</typeparam>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.AddPhysicBody(WaveEngine.Common.Physics3D.IPhysicBody3D)">
            <summary>
            Add the physic body to the simulation world
            </summary>
            <param name="body">The body</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.RemovePhysicBody(WaveEngine.Common.Physics3D.IPhysicBody3D)">
            <summary>
            Removes a RigidBody 3D from the world
            </summary>
            <param name="body"> The body to remove</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.CreateColliderShape``1(System.Object[])">
            <summary>
            Instantiate a new Collider shape
            </summary>
            <typeparam name="T">The ColliderShape type</typeparam>
            <param name="param">Collider parameters</param>
            <returns>The new collider shape</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.CreateJoint``2(``1)">
            <summary>
            Creates a Joint
            </summary>
            <typeparam name="T">The Joint type</typeparam>
            <typeparam name="J">The Joint definition type</typeparam>
            <param name="jointDef">The joint definition instance</param>
            <returns>The new joint instance</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.RemoveJoint(WaveEngine.Common.Physics3D.IJoint3D)">
            <summary>
            Remove the joint from the physic world
            </summary>
            <param name="joint">The joint to remove</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.CreatePhysicAction``1(System.Object[])">
            <summary>
            Create a physic action instance (character, vehicle controllers...)
            </summary>
            <typeparam name="T">The type of the physic action</typeparam>
            <param name="param">The initialization parameters</param>
            <returns>The created instance</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.RemovePhysicAction(WaveEngine.Common.Physics3D.IPhysicAction3D)">
            <summary>
            Remvoe the physic action
            </summary>
            <param name="physicAction">The physic action to remove</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.Step(System.TimeSpan)">
            <summary>
            Take a time step. This performs collision detection, integration, and constraint solution.
            </summary>
            <param name="gameTime">the amount of time to simulate, this should not vary</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.SetDebugDraw(WaveEngine.Common.Physics3D.ISimulationDebugDraw3D)">
            <summary>
            Sets the debug draw of Simulation 2D
            </summary>
            <param name="debugDraw">The deubg draw instance</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.DebugDraw">
            <summary>
            Draw the debug information
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.RayCast(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Physics3D.CollisionCategory3D)">
            <summary>
            Raycast and stop at the first hit
            </summary>
            <param name="from">The start ray position</param>
            <param name="to">The ray ending</param>
            <param name="filterMask">The collision category to hit the ray</param>
            <returns>The closest hit result</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.RayCastAll(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,System.Collections.Generic.IList{WaveEngine.Common.Physics3D.HitResult3D},WaveEngine.Common.Physics3D.CollisionCategory3D)">
            <summary>
            Raycast and gets all the hits
            </summary>
            <param name="from">The start ray position</param>
            <param name="to">The ray ending</param>
            <param name="resultsOutput">The hit array result</param>
            <param name="filterMask">The collision category to hit the ray</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.RayCast(WaveEngine.Common.Math.Ray@,System.Single,WaveEngine.Common.Physics3D.CollisionCategory3D)">
            <summary>
            Raycast and stop at the first hit
            </summary>
            <param name="ray">The ray</param>
            <param name="rayDistance">The distance to test</param>
            <param name="filterMask">The collision category to hit the ray</param>
            <returns>The closest hit result</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.RayCastAll(WaveEngine.Common.Math.Ray@,System.Single,System.Collections.Generic.IList{WaveEngine.Common.Physics3D.HitResult3D},WaveEngine.Common.Physics3D.CollisionCategory3D)">
            <summary>
            Raycast and gets all the hits
            </summary>
            <param name="ray">The ray</param>
            <param name="rayDistance">The distance to test</param>
            <param name="resultsOutput">The hit array result</param>
            <param name="filterMask">The collision category to hit the ray</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.ConvexSweepTest(WaveEngine.Common.Physics3D.IColliderShape3D,WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix,WaveEngine.Common.Physics3D.CollisionCategory3D)">
            <summary>
            Sweep test using a collider shape and stops at the first hit
            </summary>
            <param name="colliderShape">The collider shape</param>
            <param name="from">The from matrix</param>
            <param name="to">The to matrix</param>
            <param name="filterMask">The collision category to hit the ray</param>
            <returns>The hit result</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.ConvexSweepTestAll(WaveEngine.Common.Physics3D.IColliderShape3D,WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix,System.Collections.Generic.IList{WaveEngine.Common.Physics3D.HitResult3D},WaveEngine.Common.Physics3D.CollisionCategory3D)">
            <summary>
            Sweep test using a collider shape and stops at the first hit
            </summary>
            <param name="colliderShape">The collider shape</param>
            <param name="from">The from matris</param>
            <param name="to">The to matris</param>
            <param name="resultsOutput">The results</param>
            <param name="filterMask">The collision category to hit the ray</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.ContactTest(WaveEngine.Common.Physics3D.IPhysicBody3D,WaveEngine.Common.Physics3D.ICollisionInfoStore3D)">
            <summary>
            The contact test query perform a collision test against all overlapping objects in the physic world.
            </summary>
            <param name="physicBody">The physic body to detect contact</param>
            <param name="collisionStore">Collision store where the simulation will store the collisions</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.ContactPairTest(WaveEngine.Common.Physics3D.IPhysicBody3D,WaveEngine.Common.Physics3D.IPhysicBody3D,WaveEngine.Common.Physics3D.ICollisionInfoStore3D)">
            <summary>
            The contact test query perform a collision test against all overlapping objects in the physic world.
            </summary>
            <param name="physicBodyA">The first physic body to detect contact</param>
            <param name="physicBodyB">The second physic body to detect contact</param>
            <param name="collisionStore">Collision store where the simulation will store the collisions</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.PointTest(WaveEngine.Common.Physics3D.IPhysicBody3D,WaveEngine.Common.Math.Vector3)">
            <summary>
            Test if a point is inside a physic body
            </summary>
            <param name="physicBody">The physic body</param>
            <param name="position">The position to test in world coordinates</param>
            <returns>If this position is inside this body</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulation3D.PointTest(WaveEngine.Common.Physics3D.IColliderShape3D,WaveEngine.Common.Math.Vector3)">
            <summary>
            Test if a point is inside a collision shape
            </summary>
            <param name="shape">The collision shape</param>
            <param name="position">The position to test in world coordinates</param>
            <returns>If this position is inside this collision shape</returns>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.DebugDrawFlags">
            <summary>
            Debug draw flags
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.None">
            <summary>
            Draw nothing
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.DrawWireframe">
            <summary>
            Draw wireframe
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.DrawAabb">
            <summary>
            Draw Axis Aligned Bounding Box
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.DrawFeaturesText">
            <summary>
            Draw Feature text
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.DrawContactPoints">
            <summary>
            Draw contact points
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.NoDeactivation">
            <summary>
            Draw no deactivation
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.NoHelpText">
            <summary>
            No help text
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.DrawText">
            <summary>
            Draw text
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.ProfileTimings">
            <summary>
            Draw profile timings
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.EnableSatComparison">
            <summary>
            Enable sat comparison
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.DisableBulletLCP">
            <summary>
            Disable bullet lcp
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.EnableCCD">
            <summary>
            Enable Continuous Collision Detection
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.DrawConstraints">
            <summary>
            Draw constraints
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.DrawConstraintLimits">
            <summary>
            Draw constraint limits
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.DrawFastWireframe">
            <summary>
            Draw fast wireframe
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.DrawNormals">
            <summary>
            Draw normals
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.All">
            <summary>
            All modes
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DebugDrawFlags.MaxDebugDrawMode">
            <summary>
            Max draw modes
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.ISimulationDebugDraw3D">
            <summary>
            Interface for drawing debug information of Simulation 3D.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulationDebugDraw3D.Draw3dText(WaveEngine.Common.Math.Vector3@,System.String)">
            <summary>
            Draw a 3D text
            </summary>
            <param name="location">The text position</param>
            <param name="textString">The text string</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulationDebugDraw3D.DrawLine(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draw a line
            </summary>
            <param name="from">Start position</param>
            <param name="to">End position</param>
            <param name="color">Line color</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulationDebugDraw3D.DrawCircle(System.Single,WaveEngine.Common.Math.Matrix@,WaveEngine.Common.Graphics.Color@)">
            <summary>
            Draw a line
            </summary>
            <param name="radius">The radius</param>
            <param name="transform">The circle transform</param>
            <param name="color">Line color</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISimulationDebugDraw3D.ReportErrorWarning(System.String)">
            <summary>
            Report warning string
            </summary>
            <param name="warningString">The warning string</param>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.ConeTwistJointDef3D">
            <summary>
            Definition of a Hinge 3D Joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.ConeTwistJointDef3D.AFrame">
            <summary>
            A Frame
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.ConeTwistJointDef3D.BFrame">
            <summary>
            B frame
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.ConeTwistJointDef3D.UseLimits">
            <summary>
            Use limits
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.ConeTwistJointDef3D.LowLimit">
            <summary>
            The high limit
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.ConeTwistJointDef3D.HighLimit">
            <summary>
            The high limit
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.ConeTwistJointDef3D.UseMotor">
            <summary>
            Use hinge motor
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.ConeTwistJointDef3D.MotorTargetVelocity">
            <summary>
            Motor target velocity
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.ConeTwistJointDef3D.MaxMotorImpulse">
            <summary>
            Motor impulse
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.GearJointDef3D">
            <summary>
            Definition of a Gear 3D Joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.GearJointDef3D.AxisInA">
            <summary>
            A Frame
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.GearJointDef3D.AxisInB">
            <summary>
            B frame
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.GearJointDef3D.Ratio">
            <summary>
            Gear A:B ratio
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.FixedJointDef3D">
            <summary>
            Definition of a Fixed 3D Joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.FixedJointDef3D.AFrame">
            <summary>
            A Frame
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.FixedJointDef3D.BFrame">
            <summary>
            B frame
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.GenericAbstract6DofJointDef3D`1">
            <summary>
            Definition of a 6Dof 3D Joint
            </summary>
            <typeparam name="T">The joint interface</typeparam>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.GenericAbstract6DofJointDef3D`1.AFrame">
            <summary>
            A Frame
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.GenericAbstract6DofJointDef3D`1.BFrame">
            <summary>
            B frame
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.Generic6DofSpringJointDef3D">
            <summary>
            Definition of a 6Dof 3D Joint
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IConeTwistJoint3D">
            <summary>
            Interface for a Cone Twist 3D joint physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.AFrame">
            <summary>
            Gets the Reference frame on Body A
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.BFrame">
            <summary>
            Gets the Reference frame on Body B
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.SwingSpan1">
            <summary>
            Gets the swing span 1
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.SwingSpan2">
            <summary>
            Gets the swing span 2
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.TwistSpan">
            <summary>
            Gets the twist span
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.AngularOnly">
            <summary>
            Gets or sets a value indicating whether this apply angular only
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.Damping">
            <summary>
            Gets or sets the damping value
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.FixThresh">
            <summary>
            Gets or sets the fix thresh
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.IsMaxMotorImpulseNormalized">
            <summary>
            Gets a value indicating whether this motor impulse is normalized
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.IsMotorEnabled">
            <summary>
            Gets or sets a value indicating whether this motor is enabled
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.IsPastSwingLimit">
            <summary>
            Gets a value indicating whether the swing limit is past
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.LimitSoftness">
            <summary>
            Gets the limit softness
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.MaxMotorImpulse">
            <summary>
            Gets or sets the max motor impulse
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.MotorTarget">
            <summary>
            Gets or sets the motor target
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.RelaxationFactor">
            <summary>
            Gets the relaxation factor
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.SolveSwingLimit">
            <summary>
            Gets the swing solve limit
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.SolveTwistLimit">
            <summary>
            Gets the twist solve limit
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.TwistLimitSign">
            <summary>
            Gets or sets sign of twist limit
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.Flags">
            <summary>
            Gets the hinge flags
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.FrameOffsetA">
            <summary>
            Gets the frame offset for body A
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IConeTwistJoint3D.FrameOffsetB">
            <summary>
            Gets the frame offset for body B
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IConeTwistJoint3D.SetFrames(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Set frames
            </summary>
            <param name="frameA">The frame A</param>
            <param name="frameB">The frame B</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IConeTwistJoint3D.SetLimit(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set limits
            </summary>
            <param name="swingSpan1">The swing span 1</param>
            <param name="swingSpan2">The swing span 2</param>
            <param name="twistSpan">The twist span</param>
            <param name="softness">How much the hinge rotates for a given force</param>
            <param name="biasFactor">offset for the relaxed rotation of the hinge</param>
            <param name="relaxationFactor">How much force is applied internally to bring the hinge in its central rotation</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IConeTwistJoint3D.SetMotorTargetInConstraintSpace(WaveEngine.Common.Math.Quaternion)">
            <summary>
            Set the motor target in constraint space
            </summary>
            <param name="target">The target orientation</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IConeTwistJoint3D.SetMaxMotorImpulseNormalized(System.Single)">
            <summary>
            Sets the max motor impulse normalized
            </summary>
            <param name="impulse">The impulse</param>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IGearJoint3D">
            <summary>
            Interface for a Gear 3D joint physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IGearJoint3D.AxisInA">
            <summary>
            Gets or sets the axis in A
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IGearJoint3D.AxisInB">
            <summary>
            Gets or sets the axis in B
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IGearJoint3D.Ratio">
            <summary>
            Gets or sets the A:B gear ratio
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IFixedJoint3D">
            <summary>
            Interface for a Hinge 3D joint physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IFixedJoint3D.FrameOffsetA">
            <summary>
            Gets the frame offset for body A
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IFixedJoint3D.FrameOffsetB">
            <summary>
            Gets the frame offset for body B
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IFixedJoint3D.SetFrames(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Set frames
            </summary>
            <param name="frameA">The frame A</param>
            <param name="frameB">The frame B</param>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IGeneric6DofSpringJoint3D">
            <summary>
            Interface for a 6 Dof 3D joint physics.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IGeneric6DofSpringJoint3D.EnableSpring(WaveEngine.Common.Physics3D.DOFType,System.Boolean)">
            <summary>
            Enable or disable the spring
            </summary>
            <param name="index">DOF index</param>
            <param name="isEnabled">Is enabled or not the spring</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IGeneric6DofSpringJoint3D.SetStiffness(WaveEngine.Common.Physics3D.DOFType,System.Single)">
            <summary>
            Setsa the spring stiffness
            </summary>
            <param name="index">DOF index</param>
            <param name="stiffness">The stiffness</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IGeneric6DofSpringJoint3D.SetDamping(WaveEngine.Common.Physics3D.DOFType,System.Single)">
            <summary>
            Sets the spring damping
            </summary>
            <param name="index">DOF index</param>
            <param name="damping">The damping</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IGeneric6DofSpringJoint3D.SetEquilibriumPoint(WaveEngine.Common.Physics3D.DOFType,System.Single)">
            <summary>
            Sets the spring equilibrium point
            </summary>
            <param name="index">DOF index</param>
            <param name="equilibriumPoint">The equilibriumPoint</param>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.DOFType">
            <summary>
            Types of DOF
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DOFType.TranslationX">
            <summary>
            The translation X
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DOFType.TranslationY">
            <summary>
            Translation Y
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DOFType.TranslationZ">
            <summary>
            Translation Z
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DOFType.RotationX">
            <summary>
            Rotation X
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DOFType.RotationY">
            <summary>
            Rotation Y
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.DOFType.RotationZ">
            <summary>
            Rotation Z
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IGeneric6DofJoint3D">
            <summary>
            Interface for a 6 Dof 3D joint physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IGeneric6DofJoint3D.AngularLowerLimit">
            <summary>
            Gets or sets the angular lower limit
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IGeneric6DofJoint3D.AngularUpperLimit">
            <summary>
            Gets or sets the angular upper limit
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IGeneric6DofJoint3D.LinearLowerLimit">
            <summary>
            Gets or sets the linear lower limit
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IGeneric6DofJoint3D.LinearUpperLimit">
            <summary>
            Gets or sets the linear upper limit
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IGeneric6DofJoint3D.FrameOffsetA">
            <summary>
            Gets the frame offset A
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IGeneric6DofJoint3D.FrameOffsetB">
            <summary>
            Gets the frame offset B
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IGeneric6DofJoint3D.Flags">
            <summary>
            Gets the flags
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IGeneric6DofJoint3D.UseFrameOffset">
            <summary>
            Gets or sets a value indicating whether the frame offsets are enabled
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IGeneric6DofJoint3D.UseLinearReferenceFrameA">
            <summary>
            Gets or sets a value indicating whether the joint use A as a Frame reference
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IGeneric6DofJoint3D.SetAxis(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Set axis
            </summary>
            <param name="axis1">The axis 1</param>
            <param name="axis2">The axis 2</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IGeneric6DofJoint3D.SetFrames(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Set frames
            </summary>
            <param name="frameA">The frame A</param>
            <param name="frameB">The frame B</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IGeneric6DofJoint3D.SetLimit(WaveEngine.Common.Physics3D.DOFType,System.Single,System.Single)">
            <summary>
            Sets the axis
            </summary>
            <param name="axis">Axis index 0:X 1:Y 2:Z</param>
            <param name="low">The low limit</param>
            <param name="high">The high limit</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IGeneric6DofJoint3D.GetAngle(WaveEngine.Common.Physics3D.DOFType)">
            <summary>
            Gets the angle of the axis
            </summary>
            <param name="axisIndex">Axis index 0:X 1:Y 2:Z</param>
            <returns>The angle</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IGeneric6DofJoint3D.GetAxis(WaveEngine.Common.Physics3D.DOFType)">
            <summary>
            Gets the axis
            </summary>
            <param name="axisIndex">Axis index 0:X 1:Y 2:Z</param>
            <returns>The axis</returns>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IGeneric6DofJoint3D.IsLimited(WaveEngine.Common.Physics3D.DOFType)">
            <summary>
            Checks if an axis is limited
            </summary>
            <param name="axisIndex">Axis index 0:X 1:Y 2:Z</param>
            <returns>if the axis is limited</returns>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.SliderJointDef3D">
            <summary>
            Definition of a Slider 3D Joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.SliderJointDef3D.AFrame">
            <summary>
            A Frame
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.SliderJointDef3D.BFrame">
            <summary>
            B frame
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.ISliderJoint3D">
            <summary>
            Interface for a Slider 3D joint physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.UseAngularLimit">
            <summary>
            Gets a value indicating whether Use angular limit
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.LowerAngularLimit">
            <summary>
            Gets or sets the Lower angular limit
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.UpperAngularLimit">
            <summary>
            Gets or sets the Upper angular limit
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.UseLinearLimit">
            <summary>
            Gets a value indicating whether Use angular limit
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.LowerLinearLimit">
            <summary>
            Gets or sets the Lower linear limit
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.UpperLinearLimit">
            <summary>
            Gets or sets the Upper linear limit
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.EnableLinearMotor">
            <summary>
            Gets or sets a value indicating whether the motor is enabled
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.MaxLinearMotorForce">
            <summary>
            Gets or sets and sets maximum motor impulse
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.TargetLinearMotorVelocity">
            <summary>
            Gets or sets the max motor target velocity
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.EnableAngularMotor">
            <summary>
            Gets or sets a value indicating whether the motor is enabled
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.MaxAngularMotorForce">
            <summary>
            Gets or sets and sets maximum motor impulse
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.TargetAngularMotorVelocity">
            <summary>
            Gets or sets the max motor target velocity
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.AngularDepth">
            <summary>
            Gets the angular depth
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.AngularPosition">
            <summary>
            Gets the angular position
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.LinearDepth">
            <summary>
            Gets the linear depth
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.LinearPosition">
            <summary>
            Gets the linear position
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.CalculatedTransformA">
            <summary>
            Gets the calculated transform in A
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.CalculatedTransformB">
            <summary>
            Gets the calculated transform in B
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.EnableFrameOffset">
            <summary>
            Gets or sets a value indicating whether this joint use frame offsets
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.AncorInA">
            <summary>
            Gets the ancor in A
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.AncorInB">
            <summary>
            Gets the ancor in B
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.FrameOffsetA">
            <summary>
            Gets the frame offset in A
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.FrameOffsetB">
            <summary>
            Gets the frame offset in B
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.DampingDirAngular">
            <summary>
             Gets or sets the damping direction angular
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.DampingDirLinear">
            <summary>
             Gets or sets the linear damping dir
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.DampingLimAngular">
            <summary>
             Gets or sets the angular damping lim
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.DampingLimLinear">
            <summary>
             Gets or sets the linear damping lim
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.DampingOrthoAngular">
            <summary>
             Gets or sets the angular damping ortho
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.DampingOrthoLinear">
            <summary>
             Gets or sets the linear damping ortho
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.RestitutionDirAngular">
            <summary>
             Gets or sets the Restitution direction angular
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.RestitutionDirLinear">
            <summary>
             Gets or sets the linear Restitution dir
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.RestitutionLimAngular">
            <summary>
             Gets or sets the angular Restitution lim
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.RestitutionLimLinear">
            <summary>
             Gets or sets the linear Restitution lim
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.RestitutionOrthoAngular">
            <summary>
             Gets or sets the angular Restitution ortho
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.RestitutionOrthoLinear">
            <summary>
             Gets or sets the linear Restitution ortho
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.SoftnessDirAngular">
            <summary>
             Gets or sets the Softness direction angular
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.SoftnessDirLinear">
            <summary>
             Gets or sets the linear Softness dir
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.SoftnessLimAngular">
            <summary>
             Gets or sets the angular Softness lim
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.SoftnessLimLinear">
            <summary>
             Gets or sets the linear Softness lim
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.SoftnessOrthoAngular">
            <summary>
             Gets or sets the angular Softness ortho
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.ISliderJoint3D.SoftnessOrthoLinear">
            <summary>
             Gets or sets the linear Softness ortho
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISliderJoint3D.SetFrames(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Set frames
            </summary>
            <param name="frameA">The frame A</param>
            <param name="frameB">The frame B</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.ISliderJoint3D.CalculateTransforms(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Calculate the trasnform
            </summary>
            <param name="transA">Transform for A</param>
            <param name="transB">Transform for B</param>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IJointFeedback3D">
            <summary>
            Interface for a Joint Feedback 3D physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IJointFeedback3D.AppliedForceBodyA">
            <summary>
            Gets the Applied force to body A
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IJointFeedback3D.AppliedTorqueBodyA">
            <summary>
            Gets the Applied torque to body A
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IJointFeedback3D.AppliedForceBodyB">
            <summary>
            Gets the Applied force to body B
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IJointFeedback3D.AppliedTorqueBodyB">
            <summary>
            Gets the Applied torque to body B
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IHingeJoint3D">
            <summary>
            Interface for a Hinge 3D joint physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.AFrame">
            <summary>
            Gets the Reference frame on Body A
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.BFrame">
            <summary>
            Gets the Reference frame on Body B
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.AngularOnly">
            <summary>
            Gets or sets a value indicating whether only affects angular movement to the joint
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.EnableMotor">
            <summary>
            Gets or sets a value indicating whether the motor is enabled
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.Flags">
            <summary>
            Gets the hinge flags
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.FrameOffsetA">
            <summary>
            Gets the frame offset for body A
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.FrameOffsetB">
            <summary>
            Gets the frame offset for body B
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.HasLimit">
            <summary>
            Gets a value indicating whether this joint has limits
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.HingeAngle">
            <summary>
            Gets the angle of the joint
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.LimitBiasFactor">
            <summary>
            Gets the Limit bias factor
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.LimitRelaxationFactor">
            <summary>
            Gets the limit relaxation factor
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.LimitSign">
            <summary>
            Gets the limit sign
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.LimitSoftness">
            <summary>
            Gets the limit softness
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.LowerLimit">
            <summary>
            Gets the lower limit
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.MaxMotorImpulse">
            <summary>
            Gets or sets and sets maximum motor impulse
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.MotorTargetVelocity">
            <summary>
            Gets the max motor target velocity
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.SolveLimit">
            <summary>
            Gets the solve limit
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.UpperLimit">
            <summary>
            Gets the upper limit
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.UseFrameOffset">
            <summary>
            Gets or sets a value indicating whether the frame offsets are enabled
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IHingeJoint3D.UseReferenceFrameA">
            <summary>
            Gets or sets a value indicating whether the joint use A as a Frame reference
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IHingeJoint3D.EnableAngularMotor(System.Boolean,System.Single,System.Single)">
            <summary>
            Enable angular motor
            </summary>
            <param name="motorEnabled">Motor enabled</param>
            <param name="targetVelocity">Target velocity</param>
            <param name="maxMotorImpulse">Max motor impulse</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IHingeJoint3D.SetAxis(WaveEngine.Common.Math.Vector3)">
            <summary>
            Set axis
            </summary>
            <param name="axis">The axis</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IHingeJoint3D.SetFrames(WaveEngine.Common.Math.Matrix,WaveEngine.Common.Math.Matrix)">
            <summary>
            Set frames
            </summary>
            <param name="frameA">The frame A</param>
            <param name="frameB">The frame B</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IHingeJoint3D.SetLimit(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set limits
            </summary>
            <param name="low">The low limit</param>
            <param name="high">The high limit</param>
            <param name="softness">How much the hinge rotates for a given force</param>
            <param name="biasFactor">offset for the relaxed rotation of the hinge</param>
            <param name="relaxationFactor">How much force is applied internally to bring the hinge in its central rotation</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IHingeJoint3D.SetMotorTarget(System.Single,System.Single)">
            <summary>
            Set motor target
            </summary>
            <param name="targetAngle">The target angle</param>
            <param name="deltaTime">The delta time</param>
        </member>
        <member name="M:WaveEngine.Common.Physics3D.IHingeJoint3D.SetMotorTarget(WaveEngine.Common.Math.Quaternion,System.Single)">
            <summary>
            Set motor target
            </summary>
            <param name="qAinB">Quaternion of A in B</param>
            <param name="deltaTime">The delta time</param>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IPointToPointJoint3D">
            <summary>
            Interface for a Point to Point 3D Joint physics.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPointToPointJoint3D.LocalAnchorA">
            <summary>
            Gets or sets the local anchor point relative to bodyA's origin.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IPointToPointJoint3D.LocalAnchorB">
            <summary>
            Gets or sets the local anchor point relative to bodyB's origin.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.IJoint3D">
            <summary>
            Interface for a Joint 3D physics.
            </summary>
        </member>
        <member name="E:WaveEngine.Common.Physics3D.IJoint3D.OnBroke">
            <summary>
            Event fired when the joint is broken
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IJoint3D.InternalJoint">
            <summary>
            Gets the Box2D internal joint
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IJoint3D.BodyA">
            <summary>
            Gets the first body attached to this joint
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IJoint3D.BodyB">
            <summary>
            Gets the second body attached to this joint
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IJoint3D.AppliedImpulse">
            <summary>
            Gets the applied impulse
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IJoint3D.DebugDrawSize">
            <summary>
            Gets or sets the debug draw size of the joint
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IJoint3D.NeedsFeedback">
            <summary>
            Gets or sets a value indicating whether the application needs to obtain feedback
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IJoint3D.JointFeedback">
            <summary>
            Gets the Joint feedback
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IJoint3D.OverrideNumSolverIterations">
            <summary>
            Gets or sets the number of solver iterations
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IJoint3D.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this joint is active
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Physics3D.IJoint3D.BreakingImpulseThreshold">
            <summary>
            Gets or sets the amount offorce that a joint can take before break.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.JointDef3D`1">
            <summary>
            Definition of a 3D Joint
            </summary>
            <typeparam name="T">The type of the joint that define</typeparam>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.JointType3D">
            <summary>
            Joint types
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointType3D.Point2Point">
            <summary>
            Point 2 point joint type
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointType3D.Hinge">
            <summary>
            Hinge joint type
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointType3D.ConeTwist">
            <summary>
            Cone twist joint type
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointType3D.D6">
            <summary>
            D6 joint type
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointType3D.Slider">
            <summary>
            Slider joint type
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointType3D.Contact">
            <summary>
            Contact joint type
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointType3D.D6Spring">
            <summary>
            D6 Spring joint type
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointType3D.Gear">
            <summary>
            Gear joint type
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointType3D.Fixed">
            <summary>
            Fixed joint type
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointType3D.D6Spring2">
            <summary>
            D6 Spring joint type (2nd revision)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointType3D.MaxJoints">
            <summary>
            Max joints
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.HingeJointDef3D">
            <summary>
            Definition of a Hinge 3D Joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.HingeJointDef3D.AFrame">
            <summary>
            A Frame
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.HingeJointDef3D.BFrame">
            <summary>
            B frame
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.PointToPointJointDef3D">
            <summary>
            Definition of a Point to Point 3D Joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.PointToPointJointDef3D.PivotInA">
            <summary>
            The pivot in A
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.PointToPointJointDef3D.PivotInB">
            <summary>
            The pivot in B
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.JointDef3D">
            <summary>
            Definition of a 3D Joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointDef3D.BodyA">
            <summary>
            The first attached body
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointDef3D.BodyB">
            <summary>
            The second attached body
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointDef3D.CollideConnected">
            <summary>
            Set this flag to true if the attached bodies should collide
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointDef3D.UserData">
            <summary>
            Use this to attach application specific data to your joints.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointDef3D.IsActive">
            <summary>
            The joint is active by default
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointDef3D.BreakPoint">
            <summary>
            The amount of force needed to break the joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Physics3D.JointDef3D.NeedsJointFeedback">
            <summary>
            Need joint feedback instance
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Physics3D.Generic6DofJointDef3D">
            <summary>
            Definition of a 6Dof 3D Joint
            </summary>
        </member>
        <member name="T:WaveEngine.Common.PlatformFamily">
            <summary>
            Specifies the platform family.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformFamily.Unknown">
            <summary>
            Unknown family.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformFamily.Mobile">
            <summary>
            Mobile family.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformFamily.Desktop">
            <summary>
            Desktop family.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformFamily.Console">
            <summary>
            Console family.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.PlatformType">
            <summary>
            Specifies the platform type.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformType.Windows">
            <summary>
            Microsoft Windows platform.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformType.Android">
            <summary>
            Google Android Platform.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformType.iOS">
            <summary>
            Apple iOS platform.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformType.Linux">
            <summary>
            Linux platform.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformType.MacOS">
            <summary>
            Apple MacOS platform.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.PlatformType.UWP">
            <summary>
            Universal Windows App
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Serialization.ISerializer">
            <summary>
            Interfaces that represents a serializer
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ISerializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ISerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Deserialize object</returns>
        </member>
        <member name="T:WaveEngine.Common.Serialization.ProtobufModelBuilder">
            <summary>
            Protobuf builder
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.ProtobufModelBuilder.knownTypes">
            <summary>
            The known types
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.ProtobufModelBuilder.runtimeModel">
            <summary>
            The runtime type model
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Serialization.ProtobufModelBuilder.RuntimeModel">
            <summary>
            Gets the runtime type model
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtobufModelBuilder.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Serialization.ProtobufModelBuilder"/> class.
            </summary>
            <param name="knownTypes">The known types.</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtobufModelBuilder.Build">
            <summary>
            Builds the type model.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtobufModelBuilder.IncludeNotReferencedParents(System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.HashSet{System.Type}},System.Collections.Generic.HashSet{System.Type},System.Int32@)">
            <summary>
            Include not referenced parents
            </summary>
            <param name="type">The type</param>
            <param name="subtypesByType">The subtypes by types</param>
            <param name="referencedTypes">The referenced types</param>
            <param name="baseIndex">The base Index</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtobufModelBuilder.HasSubType(ProtoBuf.Meta.MetaType,System.Type)">
            <summary>
            Checks if a <see cref="T:ProtoBuf.Meta.MetaType"/> contains a subtype equal to the specified type
            </summary>
            <param name="type">The meta type</param>
            <param name="subType">The subtype to check</param>
            <returns>
            <c>true</c> is the metatype has the a subtype equal to the specified type; otherwise, <c>false</c>
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtobufModelBuilder.BuildFromSchema(System.IO.Stream)">
            <summary>
            Builds the type model.
            </summary>
            <param name="schemaStream">The schema stream.</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtobufModelBuilder.SaveSchema(System.IO.Stream)">
            <summary>
            Save the proto schema in the stream
            </summary>
            <param name="schemaStream">The schema stream</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtobufModelBuilder.ProccessMetaType(ProtoBuf.Meta.MetaType,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.HashSet{System.Type}},System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Adds the type to runtime model.
            </summary>
            <param name="metaType">The meta type.</param>
            <param name="subtypesByType">The dependencies by type collection.</param>
            <param name="referencedTypes">The referenced types collection.</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtobufModelBuilder.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Get the MemberInfo type of a PropertyInfo or FieldInfo.
            </summary>
            <param name="memberInfo">The member info.</param>
            <returns>The type of the member info.</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtobufModelBuilder.AddMemberTypeReference(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Add the type to the references collection.
            </summary>
            <param name="memberType">The type of the member.</param>
            <param name="referencedTypes">The referenced types collection.</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtobufModelBuilder.AddTypeDependency(System.Type,System.Type,System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.HashSet{System.Type}})">
            <summary>
            Add the type to the dependecies collection.
            </summary>
            <param name="type">The type.</param>
            <param name="baseType">The base type.</param>
            <param name="subtypesByType">The dependencies by type collection.</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtobufModelBuilder.GetDataMemberPropertiesAndFields(System.Type)">
            <summary>
            Gets the data member properties and fields.
            </summary>
            <param name="type">The type.</param>
            <returns>The members of the type.</returns>
        </member>
        <member name="T:WaveEngine.Common.Serialization.ProtoSchemaModel">
            <summary>
            Proto Schema Model
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.ProtoSchemaModel.typesByFullName">
            <summary>
            The wave types.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Serialization.ProtoSchemaModel.TypeModels">
            <summary>
            Gets or sets the TypeModels
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtoSchemaModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Serialization.ProtoSchemaModel"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtoSchemaModel.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Serialization.ProtoSchemaModel"/> class.
            </summary>
            <param name="knownTypes">The known types.</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtoSchemaModel.FromStream(System.IO.Stream,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Deserialize the ProtoSchemaModel from the stream source
            </summary>
            <param name="source">The source stream</param>
            <param name="knownTypes">The known types.</param>
            <returns>The ProtoSchemaModel</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtoSchemaModel.GetTypeByName(System.String)">
            <summary>
            Get the type with the name indicated
            </summary>
            <param name="typeName">The type name</param>
            <returns>The type</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtoSchemaModel.Save(System.IO.Stream)">
            <summary>
            Save the proto schema in the stream
            </summary>
            <param name="schemaStream">The schema stream</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtoSchemaModel.GetSchemaRuntimeModel">
            <summary>
            Get the Runtime Model for the Proto Schema
            </summary>
            <returns>The runtime type model</returns>
        </member>
        <member name="T:WaveEngine.Common.Serialization.ProtoTypeModel">
            <summary>
            Proto Type Model
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.ProtoTypeModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Serialization.ProtoTypeModel"/> class.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Serialization.ProtoTypeModel.Type">
            <summary>
            Gets or sets the known type.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Serialization.ProtoTypeModel.Fields">
            <summary>
            Gets or sets the fields.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Serialization.ProtoTypeModel.Subtypes">
            <summary>
            Gets or sets the subtypes.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.Serialization.SerializationUtils">
            <summary>
            Serialization Utils static class
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializationUtils.AdditionalAssemblies">
            <summary>
            The additional assemblies
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializationUtils.ExcludeAssemblies">
            <summary>
            The assemblies to be excluded
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializationUtils.AssemblyCache">
            <summary>
            Dictionary Assemblies (cache)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializationUtils.SkipReferencedAssemblies">
            <summary>
            Indicates if the referenced assemblies should be loaded
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Serialization.SerializationUtils.UserProjectAssembly">
            <summary>
            Gets the user project assembly
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Serialization.SerializationUtils.UserAdditionalRegisteredAssembly">
            <summary>
            Gets the user additional assemblies
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializationUtils.cachedWaveEngineTypes">
            <summary>
            The cached wave engine types
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializationUtils.cachedWaveEngineTypesAndInterfaces">
            <summary>
            The cached wave engine types
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Serialization.SerializationUtils.WaveEngineTypes">
            <summary>
            Gets the wave engine types
            </summary>
        </member>
        <member name="P:WaveEngine.Common.Serialization.SerializationUtils.WaveEngineTypesAndInterfaces">
            <summary>
            Gets the wave engine types and interfaces
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializationUtils.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Serialization.SerializationUtils" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializationUtils.CleanWaveTypesCache">
            <summary>
            Clean the wave engine cache
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializationUtils.SearchWaveEngineType(System.String)">
            <summary>
            Searches the type of the wave engine.
            </summary>
            <param name="typeFullName">Full name of the type.</param>
            <returns>Type whether exists or null</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializationUtils.GetWaveEngineTypes(System.Boolean)">
            <summary>
            Gets the wave engine types.
            </summary>
            <param name="includeInterfaces">Include the interfaces</param>
            <returns>Known types of Wave Engine</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializationUtils.GetFilteredTypes(System.Type,WaveEngine.Common.Attributes.WaveAssemblyUsage)">
            <summary>
            Gets the types of a desired class.
            </summary>
            <param name="filter">The filter.</param>
            <param name="assemblyUsage">The assembly usage to look for types</param>
            <returns>Known types of Wave Engine</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializationUtils.IsValidWaveType(System.Reflection.TypeInfo,System.Boolean)">
            <summary>
            Determines whether a type is a valid Wave Engine type.
            </summary>
            <param name="typeInfo">The type information.</param>
            <param name="includeInterfaces">if set to <c>true</c> interfaces will be included.</param>
            <returns>
              <c>true</c> if the type is a valid Wave Engine type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializationUtils.GetAssemblyList(WaveEngine.Common.Attributes.WaveAssemblyUsage)">
            <summary>
            Get wave engine assemblies
            </summary>
            <param name="assemblyUsage">The assembly usage to look</param>
            <returns>the assemblies</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializationUtils.SetUserAssembly(System.Reflection.Assembly)">
            <summary>
            Register user project assembly
            </summary>
            <param name="assembly">User assembly.</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializationUtils.RegisterAditionalAssembly(System.Reflection.Assembly)">
            <summary>
            Register additional assembly
            </summary>
            <param name="assembly">Assembly to be registered.</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializationUtils.AddWaveAssemblies(System.Collections.Generic.Dictionary{System.String,System.Reflection.Assembly},WaveEngine.Common.Attributes.WaveAssemblyUsage)">
            <summary>
            Add extra assemblies
            </summary>
            <param name="assemblies">Assemblies map.</param>
            <param name="assemblyUsage">The assembly usage filter</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializationUtils.AddWaveAssembly(System.Collections.Generic.Dictionary{System.String,System.Reflection.Assembly},System.String)">
            <summary>
            Add extra assembly
            </summary>
            <param name="assemblies">Assemblies map.</param>
            <param name="waveName">Wave lib name.</param>
        </member>
        <member name="T:WaveEngine.Common.Serialization.SerializerDataContract">
            <summary>
            Xml serializer
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializerDataContract.serializersCache">
            <summary>
            Cache of serializer used to improve the performance of load times.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializerDataContract.xmlSettings">
            <summary>
            The XML settings
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializerDataContract.serializer">
            <summary>
            The serializar
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerDataContract.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Serialization.SerializerDataContract" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerDataContract.GetSerializer``1">
            <summary>
            Get a new serializer instance.
            </summary>
            <typeparam name="T">Generic type.</typeparam>
            <returns>ISerializer instance.</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerDataContract.GetSerializer(System.Type)">
            <summary>
            Get a new serializer instance.
            </summary>
            <param name="type">The serializer type</param>
            <returns>ISerializer instance.</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerDataContract.CleanCache">
            <summary>
            Clean the cache of serializer types.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerDataContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Serialization.SerializerDataContract"/> class.
            </summary>
            <param name="type">Generic type.</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerDataContract.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerDataContract.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Deserialize object</returns>
        </member>
        <member name="T:WaveEngine.Common.Serialization.SerializerJson">
            <summary>
            Xml serializer
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializerJson.serializersCache">
            <summary>
            Cache of serializer used to improve the performance of load times.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializerJson.serializer">
            <summary>
            The serializar
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerJson.GetSerializer``1">
            <summary>
            Get a new serializer instance.
            </summary>
            <typeparam name="T">Generic type.</typeparam>
            <returns>ISerializer instance.</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerJson.GetSerializer(System.Type)">
            <summary>
            Get a new serializer instance.
            </summary>
            <param name="type">The serializer type</param>
            <returns>ISerializer instance.</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerJson.CleanCache">
            <summary>
            Clean the cache of serializer types.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerJson.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Serialization.SerializerJson"/> class.
            </summary>
            <param name="type">Generic Type.</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerJson.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerJson.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Deserialize object</returns>
        </member>
        <member name="T:WaveEngine.Common.Serialization.SerializerProtobuf">
            <summary>
            Protobuf serializer
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializerProtobuf.ProtoSchemaFileName">
            <summary>
            The proto schema file name
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializerProtobuf.ProtoSchemaDefaultPath">
            <summary>
            The proto schema default path
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializerProtobuf.createLock">
            <summary>
            Lock for creation
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializerProtobuf.runtimeModel">
            <summary>
            The runtime model singleton.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializerProtobuf.serializerType">
            <summary>
            The serializer type.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializerProtobuf.serializerRuntimeModel">
            <summary>
            The serializer runtime model.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerProtobuf.GetSerializer``1">
            <summary>
            Get a new serializer instance.
            </summary>
            <typeparam name="T">Generic type.</typeparam>
            <returns>ISerializer instance.</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerProtobuf.GetSerializer``1(WaveEngine.Common.IO.IIOManager)">
            <summary>
            The XML serializer
            Get a new serializer instance.
            </summary>
            <typeparam name="T">Generic type.</typeparam>
            <param name="ioManager">The io managers</param>
            <returns>ISerializer instance.</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerProtobuf.GetSerializer(System.Type)">
            <summary>
            Get a new serializer instance.
            </summary>
            <param name="type">The type.</param>
            <returns>ISerializer instance.</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerProtobuf.GetSerializer(System.Type,WaveEngine.Common.IO.IIOManager)">
            <summary>
            The XML serializer
            Get a new serializer instance.
            </summary>
            <param name="type">The type.</param>
            <param name="ioManager">The io managers</param>
            <returns>ISerializer instance.</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerProtobuf.CleanCache">
            <summary>
            Clean the cache of serializer types.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerProtobuf.ExistProtoSchemaFile(WaveEngine.Common.IO.IIOManager)">
            <summary>
            Checks if the protobuf scheme file exist
            </summary>
            <param name="ioManager">The io Manager</param>
            <returns>true if the protobuf scheme file exist, false in other case</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerProtobuf.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Serialization.SerializerProtobuf" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerProtobuf.BuildRuntimeModel(WaveEngine.Common.IO.IIOManager)">
            <summary>
            Builds the runtime model.
            </summary>
            <param name="ioManager">The io manager</param>
            <returns>Returns a new runtime model.</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerProtobuf.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerProtobuf.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Deserialize object</returns>
        </member>
        <member name="T:WaveEngine.Common.Serialization.SerializerXml">
            <summary>
            Xml serializer
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializerXml.serializersCache">
            <summary>
            Cache of serializer used to improve the performance of load times.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializerXml.xmlSettings">
            <summary>
            The XML settings
            </summary>
        </member>
        <member name="F:WaveEngine.Common.Serialization.SerializerXml.serializer">
            <summary>
            The serializar
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerXml.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.Serialization.SerializerXml" /> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerXml.GetSerializer``1">
            <summary>
            Get a new serializer instance.
            </summary>
            <typeparam name="T">Generic type.</typeparam>
            <returns>ISerializer instance.</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerXml.GetSerializer(System.Type)">
            <summary>
            Get a new serializer instance.
            </summary>
            <param name="type">The serializer type</param>
            <returns>ISerializer instance.</returns>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerXml.CleanCache">
            <summary>
            Clean the cache of serializer types.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerXml.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.Serialization.SerializerXml"/> class.
            </summary>
            <param name="type">Generic type.</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerXml.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="obj">The object.</param>
        </member>
        <member name="M:WaveEngine.Common.Serialization.SerializerXml.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Deserialize object</returns>
        </member>
        <member name="T:WaveEngine.Common.Service">
            <summary>
            This class is used as a base for different game services that are available application wide.
            </summary>
            <remarks>
            Services are exposed and managed by the "WaveEngine.Framework.Services.WaveServices" static class.
            </remarks>
        </member>
        <member name="P:WaveEngine.Common.Service.IsInitialized">
            <summary>
            Gets a value indicating whether this instance has been initialized.
            </summary>
            <value>
                <c>true</c> if this instance has been initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Common.Service.IsTerminated">
            <summary>
            Gets a value indicating whether this instance has been finalized.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Service.BaseInitialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Service.BaseTerminate">
            <summary>
            Finalizes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Service.Initialize">
            <summary>
            Allows to execute custom logic during the initialization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Service.Terminate">
            <summary>
            Allow to execute custom logic during the finalization of this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Service.OnActivated">
            <summary>
            Called when the service is resumed because the app is activated
            </summary>
        </member>
        <member name="M:WaveEngine.Common.Service.OnDeactivated">
            <summary>
            Called when the service is paused because the app is deactivated
            </summary>
        </member>
        <member name="T:WaveEngine.Common.System.DownloadStringEventArgs">
            <summary>
            Event args for string download completed.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.System.DownloadStringEventArgs.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.System.DownloadStringEventArgs.Exception">
            <summary>
            Gets the exception.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.System.DownloadStringEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.System.DownloadStringEventArgs"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:WaveEngine.Common.System.IStopwatch">
            <summary>
            Interface for stopwatchs.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.System.IStopwatch.ElapsedMilliseconds">
            <summary>
            Gets the elapsed milliseconds.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.System.IStopwatch.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.System.IStopwatch.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.System.IStopwatch.Stop">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.System.ISystem">
            <summary>
            Interface for system.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.System.ISystem.StartStopwatch">
            <summary>
            Starts the stopwatch.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:WaveEngine.Common.System.ISystem.SetTaskContext">
            <summary>
            Sets the task context.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.System.ISystem.BeginTask">
            <summary>
            Begins the task.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.System.ISystem.EndTask">
            <summary>
            Ends the task.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.UnsafeMethods">
            <summary>
            Unsafe and native methods.
            </summary>
        </member>
        <member name="M:WaveEngine.Common.UnsafeMethods.MemCpy(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            C++ memcpy ANSI method wrapper
            </summary>
            <param name="destination">Pointer to the destination array where the content is to be copied, type-casted to a pointer of type void*.</param>
            <param name="source">Pointer to the source of data to be copied, type-casted to a pointer of type const void*.</param>
            <param name="num">Number of bytes to copy.</param>
        </member>
        <member name="M:WaveEngine.Common.UnsafeMethods.CopyPointer(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Copies the pointers.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:WaveEngine.Common.UnsafeMethods.ClonePointer(System.IntPtr,System.Int32)">
            <summary>
            Clones the pointer.
            </summary>
            <param name="source">The source.</param>
            <param name="dataSize">Size of the data.</param>
            <returns>New IntPtr created.</returns>
        </member>
        <member name="T:WaveEngine.Common.UpdatableService">
            <summary>
            Specialized class for a <see cref="T:WaveEngine.Common.Service"/> that needs to be updated constantly.
            </summary>
            <remarks>
            Services are exposed and managed by the "WaveEngine.Framework.Services.WaveServices" static class.
            </remarks>
        </member>
        <member name="M:WaveEngine.Common.UpdatableService.Update(System.TimeSpan)">
            <summary>
            Updates this instance.
            </summary>
            <param name="gameTime">The elapsed game time since the last update.</param>
        </member>
        <member name="T:WaveEngine.Common.VR.VRControllerRole">
            <summary>
            VR HMD provider
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRControllerRole.Undefined">
            <summary>
            The hand role is unknown
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRControllerRole.LeftHand">
            <summary>
            The left hand controller
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRControllerRole.RightHand">
            <summary>
            The right hand controller
            </summary>
        </member>
        <member name="T:WaveEngine.Common.VR.VRGenericControllerState">
            <summary>
            Represents the game pad state.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRGenericControllerState.Pose">
            <summary>
            The pose of this controller
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRGenericControllerState.Role">
            <summary>
            The controller role
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRGenericControllerState.ThumbStick">
            <summary>
            Thumb sticks.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRGenericControllerState.Touchpad">
            <summary>
            Touchpad
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRGenericControllerState.ThumbStickButton">
            <summary>
            State of the grip button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRGenericControllerState.Trigger">
            <summary>
            The trigger.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRGenericControllerState.TriggerButton">
            <summary>
            The trigger button
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRGenericControllerState.Menu">
            <summary>
            State of the menu button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRGenericControllerState.Grip">
            <summary>
            State of the grip button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRGenericControllerState.Button1">
            <summary>
            State of the first button.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRGenericControllerState.Button2">
            <summary>
            State of the second button.
            </summary>
        </member>
        <member name="P:WaveEngine.Common.VR.VRGenericControllerState.IsConnected">
            <summary>
            Gets or sets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WaveEngine.Common.VR.VRGenericControllerState.IsButtonPressed(WaveEngine.Common.Input.VRButtons)">
            <summary>
            Determines whether [is button pressed] [the specified button].
            </summary>
            <param name="button">the specified button.</param>
            <returns>
              <c>true</c> if [is button pressed] [the specified button]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Common.VR.VRGenericControllerState.IsButtonReleased(WaveEngine.Common.Input.VRButtons)">
            <summary>
            Determines whether [is button released] [the specified button].
            </summary>
            <param name="button">the specified button.</param>
            <returns>
              <c>true</c> if [is button released] [the specified button]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:WaveEngine.Common.VR.VRPose">
            <summary>
            Store the VR element pose
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRPose.defaultPose">
            <summary>
            The default pose
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRPose.Position">
            <summary>
            The eye position
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRPose.Orientation">
            <summary>
            The eye orientation
            </summary>
        </member>
        <member name="P:WaveEngine.Common.VR.VRPose.DefaultPose">
            <summary>
            Gets the default pose
            </summary>
        </member>
        <member name="M:WaveEngine.Common.VR.VRPose.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Common.VR.VRPose"/> struct.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.VR.VRMode">
            <summary>
            Specifies which VR mode is used.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRMode.AttachedMode">
            <summary>
            Render a camera attached to the central joint
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRMode.HmdMode">
            <summary>
            The cameras will render inside a HMD (Head Mounted Device)
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VRMode.All">
            <summary>
            Render all modes at the same time
            </summary>
        </member>
        <member name="T:WaveEngine.Common.VR.VREye">
            <summary>
            Store Eye properties
            </summary>
        </member>
        <member name="P:WaveEngine.Common.VR.VREye.Pose">
            <summary>
            Gets or sets the eye pose.
            </summary>
            <value>
            The eye pose.
            </value>
        </member>
        <member name="P:WaveEngine.Common.VR.VREye.Projection">
            <summary>
            Gets or sets the eye projection matrix.
            </summary>
            <value>
            The eye projection matrix.
            </value>
        </member>
        <member name="P:WaveEngine.Common.VR.VREye.Texture">
            <summary>
            Gets or sets the eye texture.
            </summary>
            <value>
            The eye texture.
            </value>
        </member>
        <member name="M:WaveEngine.Common.VR.VREye.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.VR.VREye"/> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.VR.VREyeTexture">
            <summary>
            Contains all the fields used by each eye.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyeTexture.Viewport">
            <summary>
            Eye viewport
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyeTexture.RenderTarget">
            <summary>
            Eye RenderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyeTexture.NearPlane">
            <summary>
            Eye Camera Near clip
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyeTexture.FarPlane">
            <summary>
            Eye Camera Far clip
            </summary>
        </member>
        <member name="M:WaveEngine.Common.VR.VREyeTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Common.VR.VREyeTexture" /> class.
            </summary>
        </member>
        <member name="T:WaveEngine.Common.VR.VREyeType">
            <summary>
            Specifies which eye is being used for rendering.
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyeType.LeftEye">
            <summary>
            The left eye
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyeType.RightEye">
            <summary>
            The right eye
            </summary>
        </member>
        <member name="F:WaveEngine.Common.VR.VREyeType.CenterEye">
            <summary>
            The node between left and right eyes
            </summary>
        </member>
        <member name="T:WaveTestCore.ITestingEngine">
            <summary>
            Interface for Testing engine.
            </summary>
        </member>
        <member name="P:WaveTestCore.ITestingEngine.InRec">
            <summary>
             Gets a value indicating whether the testing engine is in Rec Mode.
            </summary>
        </member>
        <member name="P:WaveTestCore.ITestingEngine.InRun">
            <summary>
            Gets a value indicating whether the testing engine is in Rec Mode.
            </summary>
        </member>
        <member name="P:WaveTestCore.ITestingEngine.IsInTestMode">
            <summary>
            Gets a value indicating whether the testing engine is being visually tested.
            </summary>
        </member>
        <member name="M:WaveTestCore.ITestingEngine.Initialize">
            <summary>
            Initialize Method
            </summary>
        </member>
        <member name="M:WaveTestCore.ITestingEngine.VisualTestUpdate(System.TimeSpan)">
            <summary>
            Visual Test Update method that wraps the original Update method.
            </summary>
            <param name="elapsedTime">The elapsed game time</param>
        </member>
        <member name="M:WaveTestCore.ITestingEngine.VisualTestDraw(System.TimeSpan)">
            <summary>
            Visual Test Draw method that wraps the original Draw method.
            </summary>
            <param name="elapsedTime">The elapsed game time</param>
        </member>
        <member name="M:WaveTestCore.ITestingEngine.SendResponse(System.Exception)">
            <summary>
            Send response result to Visual Manager with and optional exception if occured.
            </summary>
            <param name="exceptionResult">An optional exception</param>
            <returns>Task result</returns>
        </member>
    </members>
</doc>
