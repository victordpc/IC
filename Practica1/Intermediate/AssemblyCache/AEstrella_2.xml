<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AEstrella_2</name>
    </assembly>
    <members>
        <member name="P:AEstrella.Punto2.X">
            <summary>
            Posición X en el plano
            </summary>
        </member>
        <member name="P:AEstrella.Punto2.Y">
            <summary>
            Posicion Y en el plano
            </summary>
        </member>
        <member name="P:AEstrella.Punto2.H">
            <summary>
             Coste según la función heurística hasta la meta 
            </summary>
        </member>
        <member name="P:AEstrella.Punto2.G">
            <summary>
            Coste desde el inicio
            </summary>
        </member>
        <member name="P:AEstrella.Punto2.F">
            <summary>
            Suma de las funciones g y h
            </summary>
        </member>
        <member name="P:AEstrella.Punto2.Abierto">
            <summary>
            Indica si el nodo ya ha sido tratado
            </summary>
        </member>
        <member name="P:AEstrella.Punto.X">
            <summary>
            Posición X en el plano
            </summary>
        </member>
        <member name="P:AEstrella.Punto.Y">
            <summary>
            Posicion Y en el plano
            </summary>
        </member>
        <member name="P:AEstrella.Punto.H">
            <summary>
             Coste según la función heurística hasta la meta 
            </summary>
        </member>
        <member name="P:AEstrella.Punto.G">
            <summary>
            Coste desde el inicio
            </summary>
        </member>
        <member name="P:AEstrella.Punto.F">
            <summary>
            Suma de las funciones g y h
            </summary>
        </member>
        <member name="P:AEstrella.Punto.Abierto">
            <summary>
            Indica si el nodo ya ha sido tratado
            </summary>
        </member>
        <member name="T:AEstrella.FastPriorityQueue`1">
            <summary>
            An implementation of a min-Priority Queue using a heap.  Has O(1) .Contains()!
            See https://github.com/BlueRaja/High-Speed-Priority-Queue-for-C-Sharp/wiki/Getting-Started for more information
            </summary>
            <typeparam name="T">The values in the queue.  Must extend the FastPriorityQueueNode class</typeparam>
        </member>
        <member name="M:AEstrella.FastPriorityQueue`1.#ctor(System.Int32)">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="maxNodes">The max nodes ever allowed to be enqueued (going over this will cause undefined behavior)</param>
        </member>
        <member name="P:AEstrella.FastPriorityQueue`1.Count">
            <summary>
            Returns the number of nodes in the queue.
            O(1)
            </summary>
        </member>
        <member name="P:AEstrella.FastPriorityQueue`1.MaxSize">
            <summary>
            Returns the maximum number of items that can be enqueued at once in this queue.  Once you hit this number (ie. once Count == MaxSize),
            attempting to enqueue another item will cause undefined behavior.  O(1)
            </summary>
        </member>
        <member name="M:AEstrella.FastPriorityQueue`1.Clear">
            <summary>
            Removes every node from the queue.
            O(n) (So, don't do this often!)
            </summary>
        </member>
        <member name="M:AEstrella.FastPriorityQueue`1.Contains(`0)">
            <summary>
            Returns (in O(1)!) whether the given node is in the queue.
            If node is or has been previously added to another queue, the result is undefined unless oldQueue.ResetNode(node) has been called
            O(1)
            </summary>
        </member>
        <member name="M:AEstrella.FastPriorityQueue`1.Enqueue(`0,System.Single)">
            <summary>
            Enqueue a node to the priority queue.  Lower values are placed in front. Ties are broken arbitrarily.
            If the queue is full, the result is undefined.
            If the node is already enqueued, the result is undefined.
            If node is or has been previously added to another queue, the result is undefined unless oldQueue.ResetNode(node) has been called
            O(log n)
            </summary>
        </member>
        <member name="M:AEstrella.FastPriorityQueue`1.HasHigherPriority(`0,`0)">
            <summary>
            Returns true if 'higher' has higher priority than 'lower', false otherwise.
            Note that calling HasHigherPriority(node, node) (ie. both arguments the same node) will return false
            </summary>
        </member>
        <member name="M:AEstrella.FastPriorityQueue`1.HasHigherOrEqualPriority(`0,`0)">
            <summary>
            Returns true if 'higher' has higher priority than 'lower', false otherwise.
            Note that calling HasHigherOrEqualPriority(node, node) (ie. both arguments the same node) will return true
            </summary>
        </member>
        <member name="M:AEstrella.FastPriorityQueue`1.Dequeue">
            <summary>
            Removes the head of the queue and returns it.
            If queue is empty, result is undefined
            O(log n)
            </summary>
        </member>
        <member name="M:AEstrella.FastPriorityQueue`1.Resize(System.Int32)">
            <summary>
            Resize the queue so it can accept more nodes.  All currently enqueued nodes are remain.
            Attempting to decrease the queue size to a size too small to hold the existing nodes results in undefined behavior
            O(n)
            </summary>
        </member>
        <member name="P:AEstrella.FastPriorityQueue`1.First">
            <summary>
            Returns the head of the queue, without removing it (use Dequeue() for that).
            If the queue is empty, behavior is undefined.
            O(1)
            </summary>
        </member>
        <member name="M:AEstrella.FastPriorityQueue`1.UpdatePriority(`0,System.Single)">
            <summary>
            This method must be called on a node every time its priority changes while it is in the queue.  
            <b>Forgetting to call this method will result in a corrupted queue!</b>
            Calling this method on a node not in the queue results in undefined behavior
            O(log n)
            </summary>
        </member>
        <member name="M:AEstrella.FastPriorityQueue`1.Remove(`0)">
            <summary>
            Removes a node from the queue.  The node does not need to be the head of the queue.  
            If the node is not in the queue, the result is undefined.  If unsure, check Contains() first
            O(log n)
            </summary>
        </member>
        <member name="M:AEstrella.FastPriorityQueue`1.ResetNode(`0)">
            <summary>
            By default, nodes that have been previously added to one queue cannot be added to another queue.
            If you need to do this, please call originalQueue.ResetNode(node) before attempting to add it in the new queue
            If the node is currently in the queue or belongs to another queue, the result is undefined
            </summary>
        </member>
        <member name="M:AEstrella.FastPriorityQueue`1.IsValidQueue">
            <summary>
            <b>Should not be called in production code.</b>
            Checks to make sure the queue is still in a valid state.  Used for testing/debugging the queue.
            </summary>
        </member>
        <member name="P:AEstrella.FastPriorityQueueNode.Priority">
            <summary>
            The Priority to insert this node at.  Must be set BEFORE adding a node to the queue (ideally just once, in the node's constructor).
            Should not be manually edited once the node has been enqueued - use queue.UpdatePriority() instead
            </summary>
        </member>
        <member name="P:AEstrella.FastPriorityQueueNode.QueueIndex">
            <summary>
            Represents the current position in the queue
            </summary>
        </member>
        <member name="P:AEstrella.FastPriorityQueueNode.Queue">
            <summary>
            The queue this node is tied to. Used only for debug builds.
            </summary>
        </member>
        <member name="T:AEstrella.IFixedSizePriorityQueue`2">
            <summary>
            A helper-interface only needed to make writing unit tests a bit easier (hence the 'internal' access modifier)
            </summary>
        </member>
        <member name="M:AEstrella.IFixedSizePriorityQueue`2.Resize(System.Int32)">
            <summary>
            Resize the queue so it can accept more nodes.  All currently enqueued nodes are remain.
            Attempting to decrease the queue size to a size too small to hold the existing nodes results in undefined behavior
            </summary>
        </member>
        <member name="P:AEstrella.IFixedSizePriorityQueue`2.MaxSize">
            <summary>
            Returns the maximum number of items that can be enqueued at once in this queue.  Once you hit this number (ie. once Count == MaxSize),
            attempting to enqueue another item will cause undefined behavior.
            </summary>
        </member>
        <member name="M:AEstrella.IFixedSizePriorityQueue`2.ResetNode(`0)">
            <summary>
            By default, nodes that have been previously added to one queue cannot be added to another queue.
            If you need to do this, please call originalQueue.ResetNode(node) before attempting to add it in the new queue
            </summary>
        </member>
        <member name="T:AEstrella.IPriorityQueue`2">
            <summary>
            The IPriorityQueue interface.  This is mainly here for purists, and in case I decide to add more implementations later.
            For speed purposes, it is actually recommended that you *don't* access the priority queue through this interface, since the JIT can
            (theoretically?) optimize method calls from concrete-types slightly better.
            </summary>
        </member>
        <member name="M:AEstrella.IPriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Enqueue a node to the priority queue.  Lower values are placed in front. Ties are broken by first-in-first-out.
            See implementation for how duplicates are handled.
            </summary>
        </member>
        <member name="M:AEstrella.IPriorityQueue`2.Dequeue">
            <summary>
            Removes the head of the queue (node with minimum priority; ties are broken by order of insertion), and returns it.
            </summary>
        </member>
        <member name="M:AEstrella.IPriorityQueue`2.Clear">
            <summary>
            Removes every node from the queue.
            </summary>
        </member>
        <member name="M:AEstrella.IPriorityQueue`2.Contains(`0)">
            <summary>
            Returns whether the given node is in the queue.
            </summary>
        </member>
        <member name="M:AEstrella.IPriorityQueue`2.Remove(`0)">
            <summary>
            Removes a node from the queue.  The node does not need to be the head of the queue.  
            </summary>
        </member>
        <member name="M:AEstrella.IPriorityQueue`2.UpdatePriority(`0,`1)">
            <summary>
            Call this method to change the priority of a node.  
            </summary>
        </member>
        <member name="P:AEstrella.IPriorityQueue`2.First">
            <summary>
            Returns the head of the queue, without removing it (use Dequeue() for that).
            </summary>
        </member>
        <member name="P:AEstrella.IPriorityQueue`2.Count">
            <summary>
            Returns the number of nodes in the queue.
            </summary>
        </member>
    </members>
</doc>
